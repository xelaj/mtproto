package tl_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/xelaj/mtproto/encoding/tl"
	"github.com/xelaj/mtproto/telegram"
)

func TestDecode(t *testing.T) {
	type args struct {
		data []byte
		v    interface{}
	}
	tests := []struct {
		name     string
		args     args
		expected interface{}
		wantErr  bool
	}{
		{
			name: "authSentCode",
			args: args{
				data: []byte{
					//| AuthSentCode CRC |  |          Flag      |  |AuthSentCodeTypeAppCRC|
					0x02, 0x25, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x00, 0x86, 0x59, 0xbb, 0x3d, 0x05, 0x00, 0x00, 0x00,
					0x12, 0x31, 0x66, 0x37, 0x36, 0x64, 0x61, 0x30, 0x64, 0x31, 0x35, 0x35, 0x31, 0x31, 0x35, 0x39,
					0x36, 0x33, 0x36, 0x00, 0x8c, 0x15, 0xa3, 0x72,
				},
				v: &telegram.AuthSentCode{},
			},
			expected: &telegram.AuthSentCode{
				Type: &telegram.AuthSentCodeTypeApp{
					Length: 5,
				},
				PhoneCodeHash: "1f76da0d1551159636",
				NextType:      0x72a3158c,
				Timeout:       0,
			},
		},
		{
			name: "los-pollos-hermanos",
			args: args{
				data: []byte{
					0xa3, 0xc1, 0xdc, 0xba, 0x1e, 0x00, 0x00, 0x00, 0x15, 0xc4, 0xb5, 0x1c, 0x02, 0x00, 0x00, 0x00,
					0xd2, 0xda, 0x6d, 0x3b, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00,
					0xd2, 0xda, 0x6d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x05, 0x06, 0x06, 0x00, 0x00, 0x00,
					0x0c, 0x00, 0x00, 0x00, 0x15, 0xc4, 0xb5, 0x1c, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
					0x06, 0x00, 0x00, 0x00, 0x05, 0x61, 0x6c, 0x61, 0x6c, 0x61, 0x00, 0x00, 0x15, 0xc4, 0xb5, 0x1c,
					0x02, 0x00, 0x00, 0x00, 0xc9, 0x68, 0x8e, 0x20, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
					0xcf, 0x86, 0x88, 0xb9, 0x71, 0x05, 0xa2, 0x28, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
				},
				v: &telegram.PollResults{},
			},
			expected: &telegram.PollResults{
				Min: false,
				Results: []*telegram.PollAnswerVoters{
					&telegram.PollAnswerVoters{
						Chosen:  true,
						Correct: false,
						Option: []byte{
							0x01, 0x02, 0x03,
						},
						Voters: 2,
					},
					&telegram.PollAnswerVoters{
						Chosen:  false,
						Correct: false,
						Option: []byte{
							0x04, 0x05, 0x06,
						},
						Voters: 6,
					},
				},
				TotalVoters: 12,
				RecentVoters: []int32{
					5,
					6,
				},
				Solution: "alala",
				SolutionEntities: []telegram.MessageEntity{
					&telegram.InputMessageEntityMentionName{
						Offset: 1,
						Length: 3,
						UserId: &telegram.InputUserEmpty{},
					},
					&telegram.MessageEntityCode{
						Offset: 1,
						Length: 2,
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tl.Decode(tt.args.data, tt.args.v); (err != nil) != tt.wantErr {
				t.Errorf("Decode() error = %v, wantErr %v", err, tt.wantErr)
			}
			assert.Equal(t, tt.expected, tt.args.v)
		})
	}
}
