// Code generated by generate-tl-files; DO NOT EDIT.

package telegram

import (
	"fmt"
	validator "github.com/go-playground/validator"
	zero "github.com/vikyd/zero"
	serialize "github.com/xelaj/mtproto/serialize"
)

type AccessPointRule struct {
	DcId             int32    `validate:"required"`
	Ips              []IpPort `validate:"required"`
	PhonePrefixRules string   `validate:"required"`
}

func (e *AccessPointRule) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.Ips) == 0 {
		return fmt.Errorf("field 'Ips' is not set")
	} // slice_len_check
	for _, item := range e.Ips {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Ips': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.PhonePrefixRules == "" {
		return fmt.Errorf("field 'PhonePrefixRules' is not set")
	} // builtin_check

	return nil
}

func (e *AccessPointRule) CRC() uint32 {
	return uint32(0x4679b65f)
}

func (e *AccessPointRule) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutVector(e.Ips)
	buf.PutString(e.PhonePrefixRules)
	return buf.Result()
}

func (e *AccessPointRule) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutVector(e.Ips)
	buf.PutString(e.PhonePrefixRules)
	return buf.Result()
}

type AccountAuthorizationForm struct {
	Errors           []SecureValueError   `validate:"required"`
	__flagsPosition  struct{}             // flags param position `validate:"required"`
	PrivacyPolicyUrl string               `flag:"0"`
	RequiredTypes    []SecureRequiredType `validate:"required"`
	Users            []User               `validate:"required"`
	Values           []*SecureValue       `validate:"required"`
}

func (e *AccountAuthorizationForm) Validate() error {
	if len(e.Errors) == 0 {
		return fmt.Errorf("field 'Errors' is not set")
	} // slice_len_check
	for _, item := range e.Errors {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Errors': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.RequiredTypes) == 0 {
		return fmt.Errorf("field 'RequiredTypes' is not set")
	} // slice_len_check
	for _, item := range e.RequiredTypes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'RequiredTypes': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Values) == 0 {
		return fmt.Errorf("field 'Values' is not set")
	} // slice_len_check
	for _, item := range e.Values {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Values': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *AccountAuthorizationForm) CRC() uint32 {
	return uint32(0xad2e1cd8)
}

func (e *AccountAuthorizationForm) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.PrivacyPolicyUrl) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Errors)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.PrivacyPolicyUrl) {
		buf.PutString(e.PrivacyPolicyUrl)
	}
	buf.PutVector(e.RequiredTypes)
	buf.PutVector(e.Users)
	buf.PutVector(e.Values)
	return buf.Result()
}

func (e *AccountAuthorizationForm) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.PrivacyPolicyUrl != "" {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Errors)
	buf.PutUint(flag)
	if e.PrivacyPolicyUrl != "" {
		buf.PutString(e.PrivacyPolicyUrl)
	}
	buf.PutVector(e.RequiredTypes)
	buf.PutVector(e.Users)
	buf.PutVector(e.Values)
	return buf.Result()
}

type AccountAuthorizations struct {
	Authorizations []*Authorization `validate:"required"`
}

func (e *AccountAuthorizations) Validate() error {
	if len(e.Authorizations) == 0 {
		return fmt.Errorf("field 'Authorizations' is not set")
	} // slice_len_check
	for _, item := range e.Authorizations {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Authorizations': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *AccountAuthorizations) CRC() uint32 {
	return uint32(0x1250abde)
}

func (e *AccountAuthorizations) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Authorizations)
	return buf.Result()
}

func (e *AccountAuthorizations) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Authorizations)
	return buf.Result()
}

type AccountAutoDownloadSettings struct {
	High   *AutoDownloadSettings `validate:"required"`
	Low    *AutoDownloadSettings `validate:"required"`
	Medium *AutoDownloadSettings `validate:"required"`
}

func (e *AccountAutoDownloadSettings) Validate() error {
	if err := e.High.Validate(); err != nil {
		return fmt.Errorf("field 'High': %w", err)
	} // type_iter_check

	if err := e.Low.Validate(); err != nil {
		return fmt.Errorf("field 'Low': %w", err)
	} // type_iter_check

	if err := e.Medium.Validate(); err != nil {
		return fmt.Errorf("field 'Medium': %w", err)
	} // type_iter_check

	return nil
}

func (e *AccountAutoDownloadSettings) CRC() uint32 {
	return uint32(0x63cacf26)
}

func (e *AccountAutoDownloadSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.High.Encode())
	buf.PutRawBytes(e.Low.Encode())
	buf.PutRawBytes(e.Medium.Encode())
	return buf.Result()
}

func (e *AccountAutoDownloadSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.High.Encode())
	buf.PutRawBytes(e.Low.Encode())
	buf.PutRawBytes(e.Medium.Encode())
	return buf.Result()
}

type AccountContentSettings struct {
	__flagsPosition    struct{} // flags param position `validate:"required"`
	SensitiveCanChange bool     `flag:"1,encoded_in_bitflags"`
	SensitiveEnabled   bool     `flag:"0,encoded_in_bitflags"`
}

func (e *AccountContentSettings) Validate() error {

	return nil
}

func (e *AccountContentSettings) CRC() uint32 {
	return uint32(0x57e28221)
}

func (e *AccountContentSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SensitiveEnabled) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SensitiveCanChange) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *AccountContentSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SensitiveEnabled != false {
		flag |= 1 << 0
	}
	if e.SensitiveCanChange != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type AccountPassword struct {
	CurrentAlgo             PasswordKdfAlgo       `flag:"2"`
	EmailUnconfirmedPattern string                `flag:"4"`
	__flagsPosition         struct{}              // flags param position `validate:"required"`
	HasPassword             bool                  `flag:"2,encoded_in_bitflags"`
	HasRecovery             bool                  `flag:"0,encoded_in_bitflags"`
	HasSecureValues         bool                  `flag:"1,encoded_in_bitflags"`
	Hint                    string                `flag:"3"`
	NewAlgo                 PasswordKdfAlgo       `validate:"required"`
	NewSecureAlgo           SecurePasswordKdfAlgo `validate:"required"`
	SecureRandom            []byte                `validate:"required"`
	SrpB                    []byte                `flag:"2"`
	SrpId                   int64                 `flag:"2"`
}

func (e *AccountPassword) Validate() error {

	if err := e.NewAlgo.Validate(); err != nil {
		return fmt.Errorf("field 'NewAlgo': %w", err)
	} // type_iter_check

	if err := e.NewSecureAlgo.Validate(); err != nil {
		return fmt.Errorf("field 'NewSecureAlgo': %w", err)
	} // type_iter_check

	if len(e.SecureRandom) == 0 {
		return fmt.Errorf("field 'SecureRandom' is not set")
	} // byte_slice_check

	return nil
}

func (e *AccountPassword) CRC() uint32 {
	return uint32(0xad2641f8)
}

func (e *AccountPassword) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.HasRecovery) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.HasSecureValues) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.CurrentAlgo) || !zero.IsZeroVal(e.HasPassword) || !zero.IsZeroVal(e.SrpB) || !zero.IsZeroVal(e.SrpId) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Hint) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.EmailUnconfirmedPattern) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.CurrentAlgo) {
		buf.PutRawBytes(e.CurrentAlgo.Encode())
	}
	if !zero.IsZeroVal(e.EmailUnconfirmedPattern) {
		buf.PutString(e.EmailUnconfirmedPattern)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Hint) {
		buf.PutString(e.Hint)
	}
	buf.PutRawBytes(e.NewAlgo.Encode())
	buf.PutRawBytes(e.NewSecureAlgo.Encode())
	buf.PutMessage(e.SecureRandom)
	if !zero.IsZeroVal(e.SrpB) {
		buf.PutMessage(e.SrpB)
	}
	if !zero.IsZeroVal(e.SrpId) {
		buf.PutLong(e.SrpId)
	}
	return buf.Result()
}

func (e *AccountPassword) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.HasRecovery != false {
		flag |= 1 << 0
	}
	if e.HasSecureValues != false {
		flag |= 1 << 1
	}
	if e.CurrentAlgo.Validate() == nil || e.HasPassword != false || len(e.SrpB) > 0 || e.SrpId != 0 {
		flag |= 1 << 2
	}
	if e.Hint != "" {
		flag |= 1 << 3
	}
	if e.EmailUnconfirmedPattern != "" {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.CurrentAlgo.Validate() == nil {
		buf.PutRawBytes(e.CurrentAlgo.Encode())
	}
	if e.EmailUnconfirmedPattern != "" {
		buf.PutString(e.EmailUnconfirmedPattern)
	}
	buf.PutUint(flag)
	if e.Hint != "" {
		buf.PutString(e.Hint)
	}
	buf.PutRawBytes(e.NewAlgo.Encode())
	buf.PutRawBytes(e.NewSecureAlgo.Encode())
	buf.PutMessage(e.SecureRandom)
	if len(e.SrpB) > 0 {
		buf.PutMessage(e.SrpB)
	}
	if e.SrpId != 0 {
		buf.PutLong(e.SrpId)
	}
	return buf.Result()
}

type AccountPasswordInputSettings struct {
	Email             string                `flag:"1"`
	__flagsPosition   struct{}              // flags param position `validate:"required"`
	Hint              string                `flag:"0"`
	NewAlgo           PasswordKdfAlgo       `flag:"0"`
	NewPasswordHash   []byte                `flag:"0"`
	NewSecureSettings *SecureSecretSettings `flag:"2"`
}

func (e *AccountPasswordInputSettings) Validate() error {

	return nil
}

func (e *AccountPasswordInputSettings) CRC() uint32 {
	return uint32(0xc23727c9)
}

func (e *AccountPasswordInputSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Hint) || !zero.IsZeroVal(e.NewAlgo) || !zero.IsZeroVal(e.NewPasswordHash) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Email) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.NewSecureSettings) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Email) {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Hint) {
		buf.PutString(e.Hint)
	}
	if !zero.IsZeroVal(e.NewAlgo) {
		buf.PutRawBytes(e.NewAlgo.Encode())
	}
	if !zero.IsZeroVal(e.NewPasswordHash) {
		buf.PutMessage(e.NewPasswordHash)
	}
	if !zero.IsZeroVal(e.NewSecureSettings) {
		buf.PutRawBytes(e.NewSecureSettings.Encode())
	}
	return buf.Result()
}

func (e *AccountPasswordInputSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Hint != "" || e.NewAlgo.Validate() == nil || len(e.NewPasswordHash) > 0 {
		flag |= 1 << 0
	}
	if e.Email != "" {
		flag |= 1 << 1
	}
	if e.NewSecureSettings.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Email != "" {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if e.Hint != "" {
		buf.PutString(e.Hint)
	}
	if e.NewAlgo.Validate() == nil {
		buf.PutRawBytes(e.NewAlgo.Encode())
	}
	if len(e.NewPasswordHash) > 0 {
		buf.PutMessage(e.NewPasswordHash)
	}
	if e.NewSecureSettings.Validate() == nil {
		buf.PutRawBytes(e.NewSecureSettings.Encode())
	}
	return buf.Result()
}

type AccountPasswordSettings struct {
	Email           string                `flag:"0"`
	__flagsPosition struct{}              // flags param position `validate:"required"`
	SecureSettings  *SecureSecretSettings `flag:"1"`
}

func (e *AccountPasswordSettings) Validate() error {

	return nil
}

func (e *AccountPasswordSettings) CRC() uint32 {
	return uint32(0x9a5c33e5)
}

func (e *AccountPasswordSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Email) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SecureSettings) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Email) {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.SecureSettings) {
		buf.PutRawBytes(e.SecureSettings.Encode())
	}
	return buf.Result()
}

func (e *AccountPasswordSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Email != "" {
		flag |= 1 << 0
	}
	if e.SecureSettings.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Email != "" {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if e.SecureSettings.Validate() == nil {
		buf.PutRawBytes(e.SecureSettings.Encode())
	}
	return buf.Result()
}

type AccountPrivacyRules struct {
	Chats []Chat        `validate:"required"`
	Rules []PrivacyRule `validate:"required"`
	Users []User        `validate:"required"`
}

func (e *AccountPrivacyRules) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Rules) == 0 {
		return fmt.Errorf("field 'Rules' is not set")
	} // slice_len_check
	for _, item := range e.Rules {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rules': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *AccountPrivacyRules) CRC() uint32 {
	return uint32(0x50a04e45)
}

func (e *AccountPrivacyRules) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Rules)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *AccountPrivacyRules) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Rules)
	buf.PutVector(e.Users)
	return buf.Result()
}

type AccountSentEmailCode struct {
	EmailPattern string `validate:"required"`
	Length       int32  `validate:"required"`
}

func (e *AccountSentEmailCode) Validate() error {
	if e.EmailPattern == "" {
		return fmt.Errorf("field 'EmailPattern' is not set")
	} // builtin_check

	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	return nil
}

func (e *AccountSentEmailCode) CRC() uint32 {
	return uint32(0x811f854f)
}

func (e *AccountSentEmailCode) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.EmailPattern)
	buf.PutInt(e.Length)
	return buf.Result()
}

func (e *AccountSentEmailCode) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.EmailPattern)
	buf.PutInt(e.Length)
	return buf.Result()
}

type AccountTakeout struct {
	Id int64 `validate:"required"`
}

func (e *AccountTakeout) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (e *AccountTakeout) CRC() uint32 {
	return uint32(0x4dba4501)
}

func (e *AccountTakeout) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *AccountTakeout) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

type AccountTmpPassword struct {
	TmpPassword []byte `validate:"required"`
	ValidUntil  int32  `validate:"required"`
}

func (e *AccountTmpPassword) Validate() error {
	if len(e.TmpPassword) == 0 {
		return fmt.Errorf("field 'TmpPassword' is not set")
	} // byte_slice_check

	if e.ValidUntil == 0 {
		return fmt.Errorf("field 'ValidUntil' is not set")
	} // builtin_check

	return nil
}

func (e *AccountTmpPassword) CRC() uint32 {
	return uint32(0xdb64fd34)
}

func (e *AccountTmpPassword) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.TmpPassword)
	buf.PutInt(e.ValidUntil)
	return buf.Result()
}

func (e *AccountTmpPassword) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.TmpPassword)
	buf.PutInt(e.ValidUntil)
	return buf.Result()
}

type AccountWebAuthorizations struct {
	Authorizations []*WebAuthorization `validate:"required"`
	Users          []User              `validate:"required"`
}

func (e *AccountWebAuthorizations) Validate() error {
	if len(e.Authorizations) == 0 {
		return fmt.Errorf("field 'Authorizations' is not set")
	} // slice_len_check
	for _, item := range e.Authorizations {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Authorizations': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *AccountWebAuthorizations) CRC() uint32 {
	return uint32(0xed56c9fc)
}

func (e *AccountWebAuthorizations) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Authorizations)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *AccountWebAuthorizations) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Authorizations)
	buf.PutVector(e.Users)
	return buf.Result()
}

type AccountDaysTTL struct {
	Days int32 `validate:"required"`
}

func (e *AccountDaysTTL) Validate() error {
	if e.Days == 0 {
		return fmt.Errorf("field 'Days' is not set")
	} // builtin_check

	return nil
}

func (e *AccountDaysTTL) CRC() uint32 {
	return uint32(0xb8d0afdf)
}

func (e *AccountDaysTTL) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Days)
	return buf.Result()
}

func (e *AccountDaysTTL) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Days)
	return buf.Result()
}

type AuthExportedAuthorization struct {
	Bytes []byte `validate:"required"`
	Id    int32  `validate:"required"`
}

func (e *AuthExportedAuthorization) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (e *AuthExportedAuthorization) CRC() uint32 {
	return uint32(0xdf969c2d)
}

func (e *AuthExportedAuthorization) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *AuthExportedAuthorization) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.Id)
	return buf.Result()
}

type AuthPasswordRecovery struct {
	EmailPattern string `validate:"required"`
}

func (e *AuthPasswordRecovery) Validate() error {
	if e.EmailPattern == "" {
		return fmt.Errorf("field 'EmailPattern' is not set")
	} // builtin_check

	return nil
}

func (e *AuthPasswordRecovery) CRC() uint32 {
	return uint32(0x137948a5)
}

func (e *AuthPasswordRecovery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.EmailPattern)
	return buf.Result()
}

func (e *AuthPasswordRecovery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.EmailPattern)
	return buf.Result()
}

type AuthSentCode struct {
	__flagsPosition struct{}         // flags param position `validate:"required"`
	NextType        AuthCodeType     `flag:"1"`
	PhoneCodeHash   string           `validate:"required"`
	Timeout         int32            `flag:"2"`
	Type            AuthSentCodeType `validate:"required"`
}

func (e *AuthSentCode) Validate() error {

	if e.PhoneCodeHash == "" {
		return fmt.Errorf("field 'PhoneCodeHash' is not set")
	} // builtin_check

	if err := e.Type.Validate(); err != nil {
		return fmt.Errorf("field 'Type': %w", err)
	} // type_iter_check

	return nil
}

func (e *AuthSentCode) CRC() uint32 {
	return uint32(0x5e002502)
}

func (e *AuthSentCode) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NextType) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Timeout) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.NextType) {
		buf.PutRawBytes(e.NextType.Encode())
	}
	buf.PutString(e.PhoneCodeHash)
	if !zero.IsZeroVal(e.Timeout) {
		buf.PutInt(e.Timeout)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *AuthSentCode) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NextType != 0 {
		flag |= 1 << 1
	}
	if e.Timeout != 0 {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.NextType != 0 {
		buf.PutRawBytes(e.NextType.Encode())
	}
	buf.PutString(e.PhoneCodeHash)
	if e.Timeout != 0 {
		buf.PutInt(e.Timeout)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type Authorization struct {
	ApiId           int32    `validate:"required"`
	AppName         string   `validate:"required"`
	AppVersion      string   `validate:"required"`
	Country         string   `validate:"required"`
	Current         bool     `flag:"0,encoded_in_bitflags"`
	DateActive      int32    `validate:"required"`
	DateCreated     int32    `validate:"required"`
	DeviceModel     string   `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Hash            int64    `validate:"required"`
	Ip              string   `validate:"required"`
	OfficialApp     bool     `flag:"1,encoded_in_bitflags"`
	PasswordPending bool     `flag:"2,encoded_in_bitflags"`
	Platform        string   `validate:"required"`
	Region          string   `validate:"required"`
	SystemVersion   string   `validate:"required"`
}

func (e *Authorization) Validate() error {
	if e.ApiId == 0 {
		return fmt.Errorf("field 'ApiId' is not set")
	} // builtin_check

	if e.AppName == "" {
		return fmt.Errorf("field 'AppName' is not set")
	} // builtin_check

	if e.AppVersion == "" {
		return fmt.Errorf("field 'AppVersion' is not set")
	} // builtin_check

	if e.Country == "" {
		return fmt.Errorf("field 'Country' is not set")
	} // builtin_check

	if e.DateActive == 0 {
		return fmt.Errorf("field 'DateActive' is not set")
	} // builtin_check

	if e.DateCreated == 0 {
		return fmt.Errorf("field 'DateCreated' is not set")
	} // builtin_check

	if e.DeviceModel == "" {
		return fmt.Errorf("field 'DeviceModel' is not set")
	} // builtin_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	return nil
}

func (e *Authorization) CRC() uint32 {
	return uint32(0xad01d61d)
}

func (e *Authorization) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Current) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.OfficialApp) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.PasswordPending) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ApiId)
	buf.PutString(e.AppName)
	buf.PutString(e.AppVersion)
	buf.PutString(e.Country)
	buf.PutInt(e.DateActive)
	buf.PutInt(e.DateCreated)
	buf.PutString(e.DeviceModel)
	buf.PutUint(flag)
	buf.PutLong(e.Hash)
	buf.PutString(e.Ip)
	buf.PutString(e.Platform)
	buf.PutString(e.Region)
	buf.PutString(e.SystemVersion)
	return buf.Result()
}

func (e *Authorization) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Current != false {
		flag |= 1 << 0
	}
	if e.OfficialApp != false {
		flag |= 1 << 1
	}
	if e.PasswordPending != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ApiId)
	buf.PutString(e.AppName)
	buf.PutString(e.AppVersion)
	buf.PutString(e.Country)
	buf.PutInt(e.DateActive)
	buf.PutInt(e.DateCreated)
	buf.PutString(e.DeviceModel)
	buf.PutUint(flag)
	buf.PutLong(e.Hash)
	buf.PutString(e.Ip)
	buf.PutString(e.Platform)
	buf.PutString(e.Region)
	buf.PutString(e.SystemVersion)
	return buf.Result()
}

type AutoDownloadSettings struct {
	AudioPreloadNext      bool     `flag:"2,encoded_in_bitflags"`
	Disabled              bool     `flag:"0,encoded_in_bitflags"`
	FileSizeMax           int32    `validate:"required"`
	__flagsPosition       struct{} // flags param position `validate:"required"`
	PhonecallsLessData    bool     `flag:"3,encoded_in_bitflags"`
	PhotoSizeMax          int32    `validate:"required"`
	VideoPreloadLarge     bool     `flag:"1,encoded_in_bitflags"`
	VideoSizeMax          int32    `validate:"required"`
	VideoUploadMaxbitrate int32    `validate:"required"`
}

func (e *AutoDownloadSettings) Validate() error {
	if e.FileSizeMax == 0 {
		return fmt.Errorf("field 'FileSizeMax' is not set")
	} // builtin_check

	if e.PhotoSizeMax == 0 {
		return fmt.Errorf("field 'PhotoSizeMax' is not set")
	} // builtin_check

	if e.VideoSizeMax == 0 {
		return fmt.Errorf("field 'VideoSizeMax' is not set")
	} // builtin_check

	if e.VideoUploadMaxbitrate == 0 {
		return fmt.Errorf("field 'VideoUploadMaxbitrate' is not set")
	} // builtin_check

	return nil
}

func (e *AutoDownloadSettings) CRC() uint32 {
	return uint32(0xe04232f3)
}

func (e *AutoDownloadSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Disabled) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.VideoPreloadLarge) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.AudioPreloadNext) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.PhonecallsLessData) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FileSizeMax)
	buf.PutUint(flag)
	buf.PutInt(e.PhotoSizeMax)
	buf.PutInt(e.VideoSizeMax)
	buf.PutInt(e.VideoUploadMaxbitrate)
	return buf.Result()
}

func (e *AutoDownloadSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Disabled != false {
		flag |= 1 << 0
	}
	if e.VideoPreloadLarge != false {
		flag |= 1 << 1
	}
	if e.AudioPreloadNext != false {
		flag |= 1 << 2
	}
	if e.PhonecallsLessData != false {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FileSizeMax)
	buf.PutUint(flag)
	buf.PutInt(e.PhotoSizeMax)
	buf.PutInt(e.VideoSizeMax)
	buf.PutInt(e.VideoUploadMaxbitrate)
	return buf.Result()
}

type BankCardOpenUrl struct {
	Name string `validate:"required"`
	Url  string `validate:"required"`
}

func (e *BankCardOpenUrl) Validate() error {
	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (e *BankCardOpenUrl) CRC() uint32 {
	return uint32(0xf568028a)
}

func (e *BankCardOpenUrl) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *BankCardOpenUrl) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	buf.PutString(e.Url)
	return buf.Result()
}

type BotCommand struct {
	Command     string `validate:"required"`
	Description string `validate:"required"`
}

func (e *BotCommand) Validate() error {
	if e.Command == "" {
		return fmt.Errorf("field 'Command' is not set")
	} // builtin_check

	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	return nil
}

func (e *BotCommand) CRC() uint32 {
	return uint32(0xc27ac8c7)
}

func (e *BotCommand) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Command)
	buf.PutString(e.Description)
	return buf.Result()
}

func (e *BotCommand) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Command)
	buf.PutString(e.Description)
	return buf.Result()
}

type BotInfo struct {
	Commands    []*BotCommand `validate:"required"`
	Description string        `validate:"required"`
	UserId      int32         `validate:"required"`
}

func (e *BotInfo) Validate() error {
	if len(e.Commands) == 0 {
		return fmt.Errorf("field 'Commands' is not set")
	} // slice_len_check
	for _, item := range e.Commands {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Commands': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *BotInfo) CRC() uint32 {
	return uint32(0x98e81d3a)
}

func (e *BotInfo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Commands)
	buf.PutString(e.Description)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *BotInfo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Commands)
	buf.PutString(e.Description)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type CdnConfig struct {
	PublicKeys []*CdnPublicKey `validate:"required"`
}

func (e *CdnConfig) Validate() error {
	if len(e.PublicKeys) == 0 {
		return fmt.Errorf("field 'PublicKeys' is not set")
	} // slice_len_check
	for _, item := range e.PublicKeys {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'PublicKeys': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *CdnConfig) CRC() uint32 {
	return uint32(0x5725e40a)
}

func (e *CdnConfig) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.PublicKeys)
	return buf.Result()
}

func (e *CdnConfig) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.PublicKeys)
	return buf.Result()
}

type CdnPublicKey struct {
	DcId      int32  `validate:"required"`
	PublicKey string `validate:"required"`
}

func (e *CdnPublicKey) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if e.PublicKey == "" {
		return fmt.Errorf("field 'PublicKey' is not set")
	} // builtin_check

	return nil
}

func (e *CdnPublicKey) CRC() uint32 {
	return uint32(0xc982eaba)
}

func (e *CdnPublicKey) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutString(e.PublicKey)
	return buf.Result()
}

func (e *CdnPublicKey) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutString(e.PublicKey)
	return buf.Result()
}

type ChannelAdminLogEvent struct {
	Action ChannelAdminLogEventAction `validate:"required"`
	Date   int32                      `validate:"required"`
	Id     int64                      `validate:"required"`
	UserId int32                      `validate:"required"`
}

func (e *ChannelAdminLogEvent) Validate() error {
	if err := e.Action.Validate(); err != nil {
		return fmt.Errorf("field 'Action': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *ChannelAdminLogEvent) CRC() uint32 {
	return uint32(0x3b5a3e40)
}

func (e *ChannelAdminLogEvent) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.Date)
	buf.PutLong(e.Id)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelAdminLogEvent) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.Date)
	buf.PutLong(e.Id)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelAdminLogEventsFilter struct {
	Ban             bool     `flag:"3,encoded_in_bitflags"`
	Delete          bool     `flag:"13,encoded_in_bitflags"`
	Demote          bool     `flag:"8,encoded_in_bitflags"`
	Edit            bool     `flag:"12,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Info            bool     `flag:"9,encoded_in_bitflags"`
	Invite          bool     `flag:"2,encoded_in_bitflags"`
	Join            bool     `flag:"0,encoded_in_bitflags"`
	Kick            bool     `flag:"5,encoded_in_bitflags"`
	Leave           bool     `flag:"1,encoded_in_bitflags"`
	Pinned          bool     `flag:"11,encoded_in_bitflags"`
	Promote         bool     `flag:"7,encoded_in_bitflags"`
	Settings        bool     `flag:"10,encoded_in_bitflags"`
	Unban           bool     `flag:"4,encoded_in_bitflags"`
	Unkick          bool     `flag:"6,encoded_in_bitflags"`
}

func (e *ChannelAdminLogEventsFilter) Validate() error {

	return nil
}

func (e *ChannelAdminLogEventsFilter) CRC() uint32 {
	return uint32(0xea107ae4)
}

func (e *ChannelAdminLogEventsFilter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Join) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Leave) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Invite) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Ban) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Unban) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Kick) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Unkick) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Promote) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.Demote) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Info) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.Pinned) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Edit) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.Delete) {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *ChannelAdminLogEventsFilter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Join != false {
		flag |= 1 << 0
	}
	if e.Leave != false {
		flag |= 1 << 1
	}
	if e.Invite != false {
		flag |= 1 << 2
	}
	if e.Ban != false {
		flag |= 1 << 3
	}
	if e.Unban != false {
		flag |= 1 << 4
	}
	if e.Kick != false {
		flag |= 1 << 5
	}
	if e.Unkick != false {
		flag |= 1 << 6
	}
	if e.Promote != false {
		flag |= 1 << 7
	}
	if e.Demote != false {
		flag |= 1 << 8
	}
	if e.Info != false {
		flag |= 1 << 9
	}
	if e.Settings != false {
		flag |= 1 << 10
	}
	if e.Pinned != false {
		flag |= 1 << 11
	}
	if e.Edit != false {
		flag |= 1 << 12
	}
	if e.Delete != false {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type ChannelsAdminLogResults struct {
	Chats  []Chat                  `validate:"required"`
	Events []*ChannelAdminLogEvent `validate:"required"`
	Users  []User                  `validate:"required"`
}

func (e *ChannelsAdminLogResults) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Events) == 0 {
		return fmt.Errorf("field 'Events' is not set")
	} // slice_len_check
	for _, item := range e.Events {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Events': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *ChannelsAdminLogResults) CRC() uint32 {
	return uint32(0xed8af74d)
}

func (e *ChannelsAdminLogResults) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Events)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ChannelsAdminLogResults) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Events)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ChannelsChannelParticipant struct {
	Participant ChannelParticipant `validate:"required"`
	Users       []User             `validate:"required"`
}

func (e *ChannelsChannelParticipant) Validate() error {
	if err := e.Participant.Validate(); err != nil {
		return fmt.Errorf("field 'Participant': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *ChannelsChannelParticipant) CRC() uint32 {
	return uint32(0xd0d9b163)
}

func (e *ChannelsChannelParticipant) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participant.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ChannelsChannelParticipant) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participant.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type ChatAdminRights struct {
	AddAdmins       bool     `flag:"9,encoded_in_bitflags"`
	BanUsers        bool     `flag:"4,encoded_in_bitflags"`
	ChangeInfo      bool     `flag:"0,encoded_in_bitflags"`
	DeleteMessages  bool     `flag:"3,encoded_in_bitflags"`
	EditMessages    bool     `flag:"2,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	InviteUsers     bool     `flag:"5,encoded_in_bitflags"`
	PinMessages     bool     `flag:"7,encoded_in_bitflags"`
	PostMessages    bool     `flag:"1,encoded_in_bitflags"`
}

func (e *ChatAdminRights) Validate() error {

	return nil
}

func (e *ChatAdminRights) CRC() uint32 {
	return uint32(0x5fb224d5)
}

func (e *ChatAdminRights) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ChangeInfo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.PostMessages) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.EditMessages) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.DeleteMessages) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.BanUsers) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.InviteUsers) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.PinMessages) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.AddAdmins) {
		flag |= 1 << 9
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *ChatAdminRights) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ChangeInfo != false {
		flag |= 1 << 0
	}
	if e.PostMessages != false {
		flag |= 1 << 1
	}
	if e.EditMessages != false {
		flag |= 1 << 2
	}
	if e.DeleteMessages != false {
		flag |= 1 << 3
	}
	if e.BanUsers != false {
		flag |= 1 << 4
	}
	if e.InviteUsers != false {
		flag |= 1 << 5
	}
	if e.PinMessages != false {
		flag |= 1 << 7
	}
	if e.AddAdmins != false {
		flag |= 1 << 9
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type ChatBannedRights struct {
	ChangeInfo      bool     `flag:"10,encoded_in_bitflags"`
	EmbedLinks      bool     `flag:"7,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	InviteUsers     bool     `flag:"15,encoded_in_bitflags"`
	PinMessages     bool     `flag:"17,encoded_in_bitflags"`
	SendGames       bool     `flag:"5,encoded_in_bitflags"`
	SendGifs        bool     `flag:"4,encoded_in_bitflags"`
	SendInline      bool     `flag:"6,encoded_in_bitflags"`
	SendMedia       bool     `flag:"2,encoded_in_bitflags"`
	SendMessages    bool     `flag:"1,encoded_in_bitflags"`
	SendPolls       bool     `flag:"8,encoded_in_bitflags"`
	SendStickers    bool     `flag:"3,encoded_in_bitflags"`
	UntilDate       int32    `validate:"required"`
	ViewMessages    bool     `flag:"0,encoded_in_bitflags"`
}

func (e *ChatBannedRights) Validate() error {

	if e.UntilDate == 0 {
		return fmt.Errorf("field 'UntilDate' is not set")
	} // builtin_check

	return nil
}

func (e *ChatBannedRights) CRC() uint32 {
	return uint32(0x9f120418)
}

func (e *ChatBannedRights) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ViewMessages) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SendMessages) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.SendMedia) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.SendStickers) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.SendGifs) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.SendGames) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.SendInline) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.EmbedLinks) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.SendPolls) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.ChangeInfo) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.InviteUsers) {
		flag |= 1 << 15
	}
	if !zero.IsZeroVal(e.PinMessages) {
		flag |= 1 << 17
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.UntilDate)
	return buf.Result()
}

func (e *ChatBannedRights) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ViewMessages != false {
		flag |= 1 << 0
	}
	if e.SendMessages != false {
		flag |= 1 << 1
	}
	if e.SendMedia != false {
		flag |= 1 << 2
	}
	if e.SendStickers != false {
		flag |= 1 << 3
	}
	if e.SendGifs != false {
		flag |= 1 << 4
	}
	if e.SendGames != false {
		flag |= 1 << 5
	}
	if e.SendInline != false {
		flag |= 1 << 6
	}
	if e.EmbedLinks != false {
		flag |= 1 << 7
	}
	if e.SendPolls != false {
		flag |= 1 << 8
	}
	if e.ChangeInfo != false {
		flag |= 1 << 10
	}
	if e.InviteUsers != false {
		flag |= 1 << 15
	}
	if e.PinMessages != false {
		flag |= 1 << 17
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.UntilDate)
	return buf.Result()
}

type ChatOnlines struct {
	Onlines int32 `validate:"required"`
}

func (e *ChatOnlines) Validate() error {
	if e.Onlines == 0 {
		return fmt.Errorf("field 'Onlines' is not set")
	} // builtin_check

	return nil
}

func (e *ChatOnlines) CRC() uint32 {
	return uint32(0xf041e250)
}

func (e *ChatOnlines) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Onlines)
	return buf.Result()
}

func (e *ChatOnlines) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Onlines)
	return buf.Result()
}

type CodeSettings struct {
	AllowAppHash    bool     `flag:"4,encoded_in_bitflags"`
	AllowFlashcall  bool     `flag:"0,encoded_in_bitflags"`
	CurrentNumber   bool     `flag:"1,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
}

func (e *CodeSettings) Validate() error {

	return nil
}

func (e *CodeSettings) CRC() uint32 {
	return uint32(0xdebebe83)
}

func (e *CodeSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.AllowFlashcall) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.CurrentNumber) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.AllowAppHash) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *CodeSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.AllowFlashcall != false {
		flag |= 1 << 0
	}
	if e.CurrentNumber != false {
		flag |= 1 << 1
	}
	if e.AllowAppHash != false {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type Config struct {
	AutoupdateUrlPrefix     string      `flag:"7"`
	BaseLangPackVersion     int32       `flag:"2"`
	BlockedMode             bool        `flag:"8,encoded_in_bitflags"`
	CallConnectTimeoutMs    int32       `validate:"required"`
	CallPacketTimeoutMs     int32       `validate:"required"`
	CallReceiveTimeoutMs    int32       `validate:"required"`
	CallRingTimeoutMs       int32       `validate:"required"`
	CaptionLengthMax        int32       `validate:"required"`
	ChannelsReadMediaPeriod int32       `validate:"required"`
	ChatSizeMax             int32       `validate:"required"`
	Date                    int32       `validate:"required"`
	DcOptions               []*DcOption `validate:"required"`
	DcTxtDomainName         string      `validate:"required"`
	DefaultP2PContacts      bool        `flag:"3,encoded_in_bitflags"`
	EditTimeLimit           int32       `validate:"required"`
	Expires                 int32       `validate:"required"`
	__flagsPosition         struct{}    // flags param position `validate:"required"`
	ForwardedCountMax       int32       `validate:"required"`
	GifSearchUsername       string      `flag:"9"`
	IgnorePhoneEntities     bool        `flag:"5,encoded_in_bitflags"`
	ImgSearchUsername       string      `flag:"11"`
	LangPackVersion         int32       `flag:"2"`
	MeUrlPrefix             string      `validate:"required"`
	MegagroupSizeMax        int32       `validate:"required"`
	MessageLengthMax        int32       `validate:"required"`
	NotifyCloudDelayMs      int32       `validate:"required"`
	NotifyDefaultDelayMs    int32       `validate:"required"`
	OfflineBlurTimeoutMs    int32       `validate:"required"`
	OfflineIdleTimeoutMs    int32       `validate:"required"`
	OnlineCloudTimeoutMs    int32       `validate:"required"`
	OnlineUpdatePeriodMs    int32       `validate:"required"`
	PfsEnabled              bool        `flag:"13,encoded_in_bitflags"`
	PhonecallsEnabled       bool        `flag:"1,encoded_in_bitflags"`
	PinnedDialogsCountMax   int32       `validate:"required"`
	PinnedInfolderCountMax  int32       `validate:"required"`
	PreloadFeaturedStickers bool        `flag:"4,encoded_in_bitflags"`
	PushChatLimit           int32       `validate:"required"`
	PushChatPeriodMs        int32       `validate:"required"`
	RatingEDecay            int32       `validate:"required"`
	RevokePmInbox           bool        `flag:"6,encoded_in_bitflags"`
	RevokePmTimeLimit       int32       `validate:"required"`
	RevokeTimeLimit         int32       `validate:"required"`
	SavedGifsLimit          int32       `validate:"required"`
	StaticMapsProvider      string      `flag:"12"`
	StickersFavedLimit      int32       `validate:"required"`
	StickersRecentLimit     int32       `validate:"required"`
	SuggestedLangCode       string      `flag:"2"`
	TestMode                bool        `validate:"required"`
	ThisDc                  int32       `validate:"required"`
	TmpSessions             int32       `flag:"0"`
	VenueSearchUsername     string      `flag:"10"`
	WebfileDcId             int32       `validate:"required"`
}

func (e *Config) Validate() error {
	if e.CallConnectTimeoutMs == 0 {
		return fmt.Errorf("field 'CallConnectTimeoutMs' is not set")
	} // builtin_check

	if e.CallPacketTimeoutMs == 0 {
		return fmt.Errorf("field 'CallPacketTimeoutMs' is not set")
	} // builtin_check

	if e.CallReceiveTimeoutMs == 0 {
		return fmt.Errorf("field 'CallReceiveTimeoutMs' is not set")
	} // builtin_check

	if e.CallRingTimeoutMs == 0 {
		return fmt.Errorf("field 'CallRingTimeoutMs' is not set")
	} // builtin_check

	if e.CaptionLengthMax == 0 {
		return fmt.Errorf("field 'CaptionLengthMax' is not set")
	} // builtin_check

	if e.ChannelsReadMediaPeriod == 0 {
		return fmt.Errorf("field 'ChannelsReadMediaPeriod' is not set")
	} // builtin_check

	if e.ChatSizeMax == 0 {
		return fmt.Errorf("field 'ChatSizeMax' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.DcOptions) == 0 {
		return fmt.Errorf("field 'DcOptions' is not set")
	} // slice_len_check
	for _, item := range e.DcOptions {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'DcOptions': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *Config) CRC() uint32 {
	return uint32(0x330b4067)
}

func (e *Config) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TmpSessions) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.PhonecallsEnabled) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.BaseLangPackVersion) || !zero.IsZeroVal(e.LangPackVersion) || !zero.IsZeroVal(e.SuggestedLangCode) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.DefaultP2PContacts) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.PreloadFeaturedStickers) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.IgnorePhoneEntities) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.RevokePmInbox) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.AutoupdateUrlPrefix) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.BlockedMode) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.GifSearchUsername) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.VenueSearchUsername) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.ImgSearchUsername) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.StaticMapsProvider) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.PfsEnabled) {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.AutoupdateUrlPrefix) {
		buf.PutString(e.AutoupdateUrlPrefix)
	}
	if !zero.IsZeroVal(e.BaseLangPackVersion) {
		buf.PutInt(e.BaseLangPackVersion)
	}
	buf.PutInt(e.CallConnectTimeoutMs)
	buf.PutInt(e.CallPacketTimeoutMs)
	buf.PutInt(e.CallReceiveTimeoutMs)
	buf.PutInt(e.CallRingTimeoutMs)
	buf.PutInt(e.CaptionLengthMax)
	buf.PutInt(e.ChannelsReadMediaPeriod)
	buf.PutInt(e.ChatSizeMax)
	buf.PutInt(e.Date)
	buf.PutVector(e.DcOptions)
	buf.PutString(e.DcTxtDomainName)
	buf.PutInt(e.EditTimeLimit)
	buf.PutInt(e.Expires)
	buf.PutUint(flag)
	buf.PutInt(e.ForwardedCountMax)
	if !zero.IsZeroVal(e.GifSearchUsername) {
		buf.PutString(e.GifSearchUsername)
	}
	if !zero.IsZeroVal(e.ImgSearchUsername) {
		buf.PutString(e.ImgSearchUsername)
	}
	if !zero.IsZeroVal(e.LangPackVersion) {
		buf.PutInt(e.LangPackVersion)
	}
	buf.PutString(e.MeUrlPrefix)
	buf.PutInt(e.MegagroupSizeMax)
	buf.PutInt(e.MessageLengthMax)
	buf.PutInt(e.NotifyCloudDelayMs)
	buf.PutInt(e.NotifyDefaultDelayMs)
	buf.PutInt(e.OfflineBlurTimeoutMs)
	buf.PutInt(e.OfflineIdleTimeoutMs)
	buf.PutInt(e.OnlineCloudTimeoutMs)
	buf.PutInt(e.OnlineUpdatePeriodMs)
	buf.PutInt(e.PinnedDialogsCountMax)
	buf.PutInt(e.PinnedInfolderCountMax)
	buf.PutInt(e.PushChatLimit)
	buf.PutInt(e.PushChatPeriodMs)
	buf.PutInt(e.RatingEDecay)
	buf.PutInt(e.RevokePmTimeLimit)
	buf.PutInt(e.RevokeTimeLimit)
	buf.PutInt(e.SavedGifsLimit)
	if !zero.IsZeroVal(e.StaticMapsProvider) {
		buf.PutString(e.StaticMapsProvider)
	}
	buf.PutInt(e.StickersFavedLimit)
	buf.PutInt(e.StickersRecentLimit)
	if !zero.IsZeroVal(e.SuggestedLangCode) {
		buf.PutString(e.SuggestedLangCode)
	}
	buf.PutBool(e.TestMode)
	buf.PutInt(e.ThisDc)
	if !zero.IsZeroVal(e.TmpSessions) {
		buf.PutInt(e.TmpSessions)
	}
	if !zero.IsZeroVal(e.VenueSearchUsername) {
		buf.PutString(e.VenueSearchUsername)
	}
	buf.PutInt(e.WebfileDcId)
	return buf.Result()
}

func (e *Config) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TmpSessions != 0 {
		flag |= 1 << 0
	}
	if e.PhonecallsEnabled != false {
		flag |= 1 << 1
	}
	if e.BaseLangPackVersion != 0 || e.LangPackVersion != 0 || e.SuggestedLangCode != "" {
		flag |= 1 << 2
	}
	if e.DefaultP2PContacts != false {
		flag |= 1 << 3
	}
	if e.PreloadFeaturedStickers != false {
		flag |= 1 << 4
	}
	if e.IgnorePhoneEntities != false {
		flag |= 1 << 5
	}
	if e.RevokePmInbox != false {
		flag |= 1 << 6
	}
	if e.AutoupdateUrlPrefix != "" {
		flag |= 1 << 7
	}
	if e.BlockedMode != false {
		flag |= 1 << 8
	}
	if e.GifSearchUsername != "" {
		flag |= 1 << 9
	}
	if e.VenueSearchUsername != "" {
		flag |= 1 << 10
	}
	if e.ImgSearchUsername != "" {
		flag |= 1 << 11
	}
	if e.StaticMapsProvider != "" {
		flag |= 1 << 12
	}
	if e.PfsEnabled != false {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.AutoupdateUrlPrefix != "" {
		buf.PutString(e.AutoupdateUrlPrefix)
	}
	if e.BaseLangPackVersion != 0 {
		buf.PutInt(e.BaseLangPackVersion)
	}
	buf.PutInt(e.CallConnectTimeoutMs)
	buf.PutInt(e.CallPacketTimeoutMs)
	buf.PutInt(e.CallReceiveTimeoutMs)
	buf.PutInt(e.CallRingTimeoutMs)
	buf.PutInt(e.CaptionLengthMax)
	buf.PutInt(e.ChannelsReadMediaPeriod)
	buf.PutInt(e.ChatSizeMax)
	buf.PutInt(e.Date)
	buf.PutVector(e.DcOptions)
	buf.PutString(e.DcTxtDomainName)
	buf.PutInt(e.EditTimeLimit)
	buf.PutInt(e.Expires)
	buf.PutUint(flag)
	buf.PutInt(e.ForwardedCountMax)
	if e.GifSearchUsername != "" {
		buf.PutString(e.GifSearchUsername)
	}
	if e.ImgSearchUsername != "" {
		buf.PutString(e.ImgSearchUsername)
	}
	if e.LangPackVersion != 0 {
		buf.PutInt(e.LangPackVersion)
	}
	buf.PutString(e.MeUrlPrefix)
	buf.PutInt(e.MegagroupSizeMax)
	buf.PutInt(e.MessageLengthMax)
	buf.PutInt(e.NotifyCloudDelayMs)
	buf.PutInt(e.NotifyDefaultDelayMs)
	buf.PutInt(e.OfflineBlurTimeoutMs)
	buf.PutInt(e.OfflineIdleTimeoutMs)
	buf.PutInt(e.OnlineCloudTimeoutMs)
	buf.PutInt(e.OnlineUpdatePeriodMs)
	buf.PutInt(e.PinnedDialogsCountMax)
	buf.PutInt(e.PinnedInfolderCountMax)
	buf.PutInt(e.PushChatLimit)
	buf.PutInt(e.PushChatPeriodMs)
	buf.PutInt(e.RatingEDecay)
	buf.PutInt(e.RevokePmTimeLimit)
	buf.PutInt(e.RevokeTimeLimit)
	buf.PutInt(e.SavedGifsLimit)
	if e.StaticMapsProvider != "" {
		buf.PutString(e.StaticMapsProvider)
	}
	buf.PutInt(e.StickersFavedLimit)
	buf.PutInt(e.StickersRecentLimit)
	if e.SuggestedLangCode != "" {
		buf.PutString(e.SuggestedLangCode)
	}
	buf.PutBool(e.TestMode)
	buf.PutInt(e.ThisDc)
	if e.TmpSessions != 0 {
		buf.PutInt(e.TmpSessions)
	}
	if e.VenueSearchUsername != "" {
		buf.PutString(e.VenueSearchUsername)
	}
	buf.PutInt(e.WebfileDcId)
	return buf.Result()
}

type Contact struct {
	Mutual bool  `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *Contact) Validate() error {
	if e.Mutual == false {
		return fmt.Errorf("field 'Mutual' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *Contact) CRC() uint32 {
	return uint32(0xf911c994)
}

func (e *Contact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Mutual)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *Contact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Mutual)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ContactBlocked struct {
	Date   int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *ContactBlocked) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *ContactBlocked) CRC() uint32 {
	return uint32(0x561bc879)
}

func (e *ContactBlocked) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ContactBlocked) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ContactStatus struct {
	Status UserStatus `validate:"required"`
	UserId int32      `validate:"required"`
}

func (e *ContactStatus) Validate() error {
	if err := e.Status.Validate(); err != nil {
		return fmt.Errorf("field 'Status': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *ContactStatus) CRC() uint32 {
	return uint32(0xd3680c61)
}

func (e *ContactStatus) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Status.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ContactStatus) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Status.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ContactsFound struct {
	Chats     []Chat `validate:"required"`
	MyResults []Peer `validate:"required"`
	Results   []Peer `validate:"required"`
	Users     []User `validate:"required"`
}

func (e *ContactsFound) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.MyResults) == 0 {
		return fmt.Errorf("field 'MyResults' is not set")
	} // slice_len_check
	for _, item := range e.MyResults {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'MyResults': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Results) == 0 {
		return fmt.Errorf("field 'Results' is not set")
	} // slice_len_check
	for _, item := range e.Results {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Results': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *ContactsFound) CRC() uint32 {
	return uint32(0xb3134d9d)
}

func (e *ContactsFound) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.MyResults)
	buf.PutVector(e.Results)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsFound) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.MyResults)
	buf.PutVector(e.Results)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsImportedContacts struct {
	Imported       []*ImportedContact `validate:"required"`
	PopularInvites []*PopularContact  `validate:"required"`
	RetryContacts  []int64            `validate:"required"`
	Users          []User             `validate:"required"`
}

func (e *ContactsImportedContacts) Validate() error {
	if len(e.Imported) == 0 {
		return fmt.Errorf("field 'Imported' is not set")
	} // slice_len_check
	for _, item := range e.Imported {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Imported': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.PopularInvites) == 0 {
		return fmt.Errorf("field 'PopularInvites' is not set")
	} // slice_len_check
	for _, item := range e.PopularInvites {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'PopularInvites': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.RetryContacts) == 0 {
		return fmt.Errorf("field 'RetryContacts' is not set")
	} // slice_len_check
	for _, item := range e.RetryContacts {
		if item == 0 {
			return fmt.Errorf("field 'RetryContacts' is not set")
		} // builtin_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *ContactsImportedContacts) CRC() uint32 {
	return uint32(0x77d01c3b)
}

func (e *ContactsImportedContacts) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Imported)
	buf.PutVector(e.PopularInvites)
	buf.PutVector(e.RetryContacts)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsImportedContacts) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Imported)
	buf.PutVector(e.PopularInvites)
	buf.PutVector(e.RetryContacts)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsResolvedPeer struct {
	Chats []Chat `validate:"required"`
	Peer  Peer   `validate:"required"`
	Users []User `validate:"required"`
}

func (e *ContactsResolvedPeer) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *ContactsResolvedPeer) CRC() uint32 {
	return uint32(0x7f077ad9)
}

func (e *ContactsResolvedPeer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsResolvedPeer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type DataJSON struct {
	Data string `validate:"required"`
}

func (e *DataJSON) Validate() error {
	if e.Data == "" {
		return fmt.Errorf("field 'Data' is not set")
	} // builtin_check

	return nil
}

func (e *DataJSON) CRC() uint32 {
	return uint32(0x7d748d04)
}

func (e *DataJSON) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Data)
	return buf.Result()
}

func (e *DataJSON) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Data)
	return buf.Result()
}

type DcOption struct {
	Cdn             bool     `flag:"3,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Id              int32    `validate:"required"`
	IpAddress       string   `validate:"required"`
	Ipv6            bool     `flag:"0,encoded_in_bitflags"`
	MediaOnly       bool     `flag:"1,encoded_in_bitflags"`
	Port            int32    `validate:"required"`
	Secret          []byte   `flag:"10"`
	Static          bool     `flag:"4,encoded_in_bitflags"`
	TcpoOnly        bool     `flag:"2,encoded_in_bitflags"`
}

func (e *DcOption) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.IpAddress == "" {
		return fmt.Errorf("field 'IpAddress' is not set")
	} // builtin_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	return nil
}

func (e *DcOption) CRC() uint32 {
	return uint32(0x18b7a10d)
}

func (e *DcOption) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Ipv6) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.MediaOnly) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.TcpoOnly) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Cdn) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Static) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Secret) {
		flag |= 1 << 10
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.IpAddress)
	buf.PutInt(e.Port)
	if !zero.IsZeroVal(e.Secret) {
		buf.PutMessage(e.Secret)
	}
	return buf.Result()
}

func (e *DcOption) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Ipv6 != false {
		flag |= 1 << 0
	}
	if e.MediaOnly != false {
		flag |= 1 << 1
	}
	if e.TcpoOnly != false {
		flag |= 1 << 2
	}
	if e.Cdn != false {
		flag |= 1 << 3
	}
	if e.Static != false {
		flag |= 1 << 4
	}
	if len(e.Secret) > 0 {
		flag |= 1 << 10
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.IpAddress)
	buf.PutInt(e.Port)
	if len(e.Secret) > 0 {
		buf.PutMessage(e.Secret)
	}
	return buf.Result()
}

type DialogFilter struct {
	Bots            bool        `flag:"4,encoded_in_bitflags"`
	Broadcasts      bool        `flag:"3,encoded_in_bitflags"`
	Contacts        bool        `flag:"0,encoded_in_bitflags"`
	Emoticon        string      `flag:"25"`
	ExcludeArchived bool        `flag:"13,encoded_in_bitflags"`
	ExcludeMuted    bool        `flag:"11,encoded_in_bitflags"`
	ExcludePeers    []InputPeer `validate:"required"`
	ExcludeRead     bool        `flag:"12,encoded_in_bitflags"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	Groups          bool        `flag:"2,encoded_in_bitflags"`
	Id              int32       `validate:"required"`
	IncludePeers    []InputPeer `validate:"required"`
	NonContacts     bool        `flag:"1,encoded_in_bitflags"`
	PinnedPeers     []InputPeer `validate:"required"`
	Title           string      `validate:"required"`
}

func (e *DialogFilter) Validate() error {
	if len(e.ExcludePeers) == 0 {
		return fmt.Errorf("field 'ExcludePeers' is not set")
	} // slice_len_check
	for _, item := range e.ExcludePeers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'ExcludePeers': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if len(e.IncludePeers) == 0 {
		return fmt.Errorf("field 'IncludePeers' is not set")
	} // slice_len_check
	for _, item := range e.IncludePeers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'IncludePeers': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.PinnedPeers) == 0 {
		return fmt.Errorf("field 'PinnedPeers' is not set")
	} // slice_len_check
	for _, item := range e.PinnedPeers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'PinnedPeers': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *DialogFilter) CRC() uint32 {
	return uint32(0x7438f7e8)
}

func (e *DialogFilter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Contacts) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NonContacts) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Groups) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Broadcasts) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Bots) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.ExcludeMuted) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.ExcludeRead) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.ExcludeArchived) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.Emoticon) {
		flag |= 1 << 25
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Emoticon) {
		buf.PutString(e.Emoticon)
	}
	buf.PutVector(e.ExcludePeers)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutVector(e.IncludePeers)
	buf.PutVector(e.PinnedPeers)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *DialogFilter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Contacts != false {
		flag |= 1 << 0
	}
	if e.NonContacts != false {
		flag |= 1 << 1
	}
	if e.Groups != false {
		flag |= 1 << 2
	}
	if e.Broadcasts != false {
		flag |= 1 << 3
	}
	if e.Bots != false {
		flag |= 1 << 4
	}
	if e.ExcludeMuted != false {
		flag |= 1 << 11
	}
	if e.ExcludeRead != false {
		flag |= 1 << 12
	}
	if e.ExcludeArchived != false {
		flag |= 1 << 13
	}
	if e.Emoticon != "" {
		flag |= 1 << 25
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Emoticon != "" {
		buf.PutString(e.Emoticon)
	}
	buf.PutVector(e.ExcludePeers)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutVector(e.IncludePeers)
	buf.PutVector(e.PinnedPeers)
	buf.PutString(e.Title)
	return buf.Result()
}

type DialogFilterSuggested struct {
	Description string        `validate:"required"`
	Filter      *DialogFilter `validate:"required"`
}

func (e *DialogFilterSuggested) Validate() error {
	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	if err := e.Filter.Validate(); err != nil {
		return fmt.Errorf("field 'Filter': %w", err)
	} // type_iter_check

	return nil
}

func (e *DialogFilterSuggested) CRC() uint32 {
	return uint32(0x77744d4a)
}

func (e *DialogFilterSuggested) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Description)
	buf.PutRawBytes(e.Filter.Encode())
	return buf.Result()
}

func (e *DialogFilterSuggested) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Description)
	buf.PutRawBytes(e.Filter.Encode())
	return buf.Result()
}

type EmojiKeywordsDifference struct {
	FromVersion int32          `validate:"required"`
	Keywords    []EmojiKeyword `validate:"required"`
	LangCode    string         `validate:"required"`
	Version     int32          `validate:"required"`
}

func (e *EmojiKeywordsDifference) Validate() error {
	if e.FromVersion == 0 {
		return fmt.Errorf("field 'FromVersion' is not set")
	} // builtin_check

	if len(e.Keywords) == 0 {
		return fmt.Errorf("field 'Keywords' is not set")
	} // slice_len_check
	for _, item := range e.Keywords {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Keywords': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.LangCode == "" {
		return fmt.Errorf("field 'LangCode' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (e *EmojiKeywordsDifference) CRC() uint32 {
	return uint32(0x5cc761bd)
}

func (e *EmojiKeywordsDifference) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FromVersion)
	buf.PutVector(e.Keywords)
	buf.PutString(e.LangCode)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *EmojiKeywordsDifference) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FromVersion)
	buf.PutVector(e.Keywords)
	buf.PutString(e.LangCode)
	buf.PutInt(e.Version)
	return buf.Result()
}

type EmojiLanguage struct {
	LangCode string `validate:"required"`
}

func (e *EmojiLanguage) Validate() error {
	if e.LangCode == "" {
		return fmt.Errorf("field 'LangCode' is not set")
	} // builtin_check

	return nil
}

func (e *EmojiLanguage) CRC() uint32 {
	return uint32(0xb3fb5361)
}

func (e *EmojiLanguage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (e *EmojiLanguage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

type EmojiURL struct {
	Url string `validate:"required"`
}

func (e *EmojiURL) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (e *EmojiURL) CRC() uint32 {
	return uint32(0xa575739d)
}

func (e *EmojiURL) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *EmojiURL) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

type Error struct {
	Code int32  `validate:"required"`
	Text string `validate:"required"`
}

func (e *Error) Validate() error {
	if e.Code == 0 {
		return fmt.Errorf("field 'Code' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (e *Error) CRC() uint32 {
	return uint32(0xc4b9f9bb)
}

func (e *Error) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Code)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *Error) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Code)
	buf.PutString(e.Text)
	return buf.Result()
}

type ExportedMessageLink struct {
	Html string `validate:"required"`
	Link string `validate:"required"`
}

func (e *ExportedMessageLink) Validate() error {
	if e.Html == "" {
		return fmt.Errorf("field 'Html' is not set")
	} // builtin_check

	if e.Link == "" {
		return fmt.Errorf("field 'Link' is not set")
	} // builtin_check

	return nil
}

func (e *ExportedMessageLink) CRC() uint32 {
	return uint32(0x5dab1af4)
}

func (e *ExportedMessageLink) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Html)
	buf.PutString(e.Link)
	return buf.Result()
}

func (e *ExportedMessageLink) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Html)
	buf.PutString(e.Link)
	return buf.Result()
}

type FileHash struct {
	Hash   []byte `validate:"required"`
	Limit  int32  `validate:"required"`
	Offset int32  `validate:"required"`
}

func (e *FileHash) Validate() error {
	if len(e.Hash) == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // byte_slice_check

	if e.Limit == 0 {
		return fmt.Errorf("field 'Limit' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (e *FileHash) CRC() uint32 {
	return uint32(0x6242c773)
}

func (e *FileHash) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutInt(e.Limit)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *FileHash) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutInt(e.Limit)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type FileLocation struct {
	LocalId  int32 `validate:"required"`
	VolumeId int64 `validate:"required"`
}

func (e *FileLocation) Validate() error {
	if e.LocalId == 0 {
		return fmt.Errorf("field 'LocalId' is not set")
	} // builtin_check

	if e.VolumeId == 0 {
		return fmt.Errorf("field 'VolumeId' is not set")
	} // builtin_check

	return nil
}

func (e *FileLocation) CRC() uint32 {
	return uint32(0xbc7fc6cd)
}

func (e *FileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.LocalId)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

func (e *FileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.LocalId)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

type Folder struct {
	AutofillNewBroadcasts     bool      `flag:"0,encoded_in_bitflags"`
	AutofillNewCorrespondents bool      `flag:"2,encoded_in_bitflags"`
	AutofillPublicGroups      bool      `flag:"1,encoded_in_bitflags"`
	__flagsPosition           struct{}  // flags param position `validate:"required"`
	Id                        int32     `validate:"required"`
	Photo                     ChatPhoto `flag:"3"`
	Title                     string    `validate:"required"`
}

func (e *Folder) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *Folder) CRC() uint32 {
	return uint32(0xff544e65)
}

func (e *Folder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.AutofillNewBroadcasts) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.AutofillPublicGroups) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.AutofillNewCorrespondents) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *Folder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.AutofillNewBroadcasts != false {
		flag |= 1 << 0
	}
	if e.AutofillPublicGroups != false {
		flag |= 1 << 1
	}
	if e.AutofillNewCorrespondents != false {
		flag |= 1 << 2
	}
	if e.Photo.Validate() == nil {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutString(e.Title)
	return buf.Result()
}

type FolderPeer struct {
	FolderId int32 `validate:"required"`
	Peer     Peer  `validate:"required"`
}

func (e *FolderPeer) Validate() error {
	if e.FolderId == 0 {
		return fmt.Errorf("field 'FolderId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (e *FolderPeer) CRC() uint32 {
	return uint32(0xe9baa668)
}

func (e *FolderPeer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *FolderPeer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type Game struct {
	AccessHash      int64    `validate:"required"`
	Description     string   `validate:"required"`
	Document        Document `flag:"0"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Id              int64    `validate:"required"`
	Photo           Photo    `validate:"required"`
	ShortName       string   `validate:"required"`
	Title           string   `validate:"required"`
}

func (e *Game) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if e.ShortName == "" {
		return fmt.Errorf("field 'ShortName' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *Game) CRC() uint32 {
	return uint32(0xbdf9653b)
}

func (e *Game) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutString(e.Description)
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.ShortName)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *Game) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Document.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutString(e.Description)
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.ShortName)
	buf.PutString(e.Title)
	return buf.Result()
}

type GlobalPrivacySettings struct {
	ArchiveAndMuteNewNoncontactPeers bool     `flag:"0"`
	__flagsPosition                  struct{} // flags param position `validate:"required"`
}

func (e *GlobalPrivacySettings) Validate() error {

	return nil
}

func (e *GlobalPrivacySettings) CRC() uint32 {
	return uint32(0xbea2f424)
}

func (e *GlobalPrivacySettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ArchiveAndMuteNewNoncontactPeers) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.ArchiveAndMuteNewNoncontactPeers) {
		buf.PutBool(e.ArchiveAndMuteNewNoncontactPeers)
	}
	buf.PutUint(flag)
	return buf.Result()
}

func (e *GlobalPrivacySettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ArchiveAndMuteNewNoncontactPeers != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.ArchiveAndMuteNewNoncontactPeers != false {
		buf.PutBool(e.ArchiveAndMuteNewNoncontactPeers)
	}
	buf.PutUint(flag)
	return buf.Result()
}

type HelpConfigSimple struct {
	Date    int32              `validate:"required"`
	Expires int32              `validate:"required"`
	Rules   []*AccessPointRule `validate:"required"`
}

func (e *HelpConfigSimple) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	if len(e.Rules) == 0 {
		return fmt.Errorf("field 'Rules' is not set")
	} // slice_len_check
	for _, item := range e.Rules {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rules': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *HelpConfigSimple) CRC() uint32 {
	return uint32(0x5a592a6c)
}

func (e *HelpConfigSimple) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Expires)
	buf.PutVector(e.Rules)
	return buf.Result()
}

func (e *HelpConfigSimple) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Expires)
	buf.PutVector(e.Rules)
	return buf.Result()
}

type HelpInviteText struct {
	Message string `validate:"required"`
}

func (e *HelpInviteText) Validate() error {
	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (e *HelpInviteText) CRC() uint32 {
	return uint32(0x18cb9f78)
}

func (e *HelpInviteText) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Message)
	return buf.Result()
}

func (e *HelpInviteText) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Message)
	return buf.Result()
}

type HelpRecentMeUrls struct {
	Chats []Chat        `validate:"required"`
	Urls  []RecentMeUrl `validate:"required"`
	Users []User        `validate:"required"`
}

func (e *HelpRecentMeUrls) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Urls) == 0 {
		return fmt.Errorf("field 'Urls' is not set")
	} // slice_len_check
	for _, item := range e.Urls {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Urls': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *HelpRecentMeUrls) CRC() uint32 {
	return uint32(0xe0310d7)
}

func (e *HelpRecentMeUrls) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Urls)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *HelpRecentMeUrls) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Urls)
	buf.PutVector(e.Users)
	return buf.Result()
}

type HelpSupport struct {
	PhoneNumber string `validate:"required"`
	User        User   `validate:"required"`
}

func (e *HelpSupport) Validate() error {
	if e.PhoneNumber == "" {
		return fmt.Errorf("field 'PhoneNumber' is not set")
	} // builtin_check

	if err := e.User.Validate(); err != nil {
		return fmt.Errorf("field 'User': %w", err)
	} // type_iter_check

	return nil
}

func (e *HelpSupport) CRC() uint32 {
	return uint32(0x17c6b5f6)
}

func (e *HelpSupport) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

func (e *HelpSupport) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.PhoneNumber)
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

type HelpSupportName struct {
	Name string `validate:"required"`
}

func (e *HelpSupportName) Validate() error {
	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	return nil
}

func (e *HelpSupportName) CRC() uint32 {
	return uint32(0x8c05f1c9)
}

func (e *HelpSupportName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	return buf.Result()
}

func (e *HelpSupportName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	return buf.Result()
}

type HelpTermsOfService struct {
	Entities        []MessageEntity `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Id              *DataJSON       `validate:"required"`
	MinAgeConfirm   int32           `flag:"1"`
	Popup           bool            `flag:"0,encoded_in_bitflags"`
	Text            string          `validate:"required"`
}

func (e *HelpTermsOfService) Validate() error {
	if len(e.Entities) == 0 {
		return fmt.Errorf("field 'Entities' is not set")
	} // slice_len_check
	for _, item := range e.Entities {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Entities': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (e *HelpTermsOfService) CRC() uint32 {
	return uint32(0x780a0310)
}

func (e *HelpTermsOfService) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Popup) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.MinAgeConfirm) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if !zero.IsZeroVal(e.MinAgeConfirm) {
		buf.PutInt(e.MinAgeConfirm)
	}
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *HelpTermsOfService) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Popup != false {
		flag |= 1 << 0
	}
	if e.MinAgeConfirm != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if e.MinAgeConfirm != 0 {
		buf.PutInt(e.MinAgeConfirm)
	}
	buf.PutString(e.Text)
	return buf.Result()
}

type HighScore struct {
	Pos    int32 `validate:"required"`
	Score  int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *HighScore) Validate() error {
	if e.Pos == 0 {
		return fmt.Errorf("field 'Pos' is not set")
	} // builtin_check

	if e.Score == 0 {
		return fmt.Errorf("field 'Score' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *HighScore) CRC() uint32 {
	return uint32(0x58fffcd0)
}

func (e *HighScore) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pos)
	buf.PutInt(e.Score)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *HighScore) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pos)
	buf.PutInt(e.Score)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ImportedContact struct {
	ClientId int64 `validate:"required"`
	UserId   int32 `validate:"required"`
}

func (e *ImportedContact) Validate() error {
	if e.ClientId == 0 {
		return fmt.Errorf("field 'ClientId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *ImportedContact) CRC() uint32 {
	return uint32(0xd0028438)
}

func (e *ImportedContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ImportedContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type InlineBotSwitchPM struct {
	StartParam string `validate:"required"`
	Text       string `validate:"required"`
}

func (e *InlineBotSwitchPM) Validate() error {
	if e.StartParam == "" {
		return fmt.Errorf("field 'StartParam' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (e *InlineBotSwitchPM) CRC() uint32 {
	return uint32(0x3c20629f)
}

func (e *InlineBotSwitchPM) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.StartParam)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *InlineBotSwitchPM) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.StartParam)
	buf.PutString(e.Text)
	return buf.Result()
}

type InputAppEvent struct {
	Data JSONValue `validate:"required"`
	Peer int64     `validate:"required"`
	Time float64   `validate:"required"`
	Type string    `validate:"required"`
}

func (e *InputAppEvent) Validate() error {
	if err := e.Data.Validate(); err != nil {
		return fmt.Errorf("field 'Data': %w", err)
	} // type_iter_check

	if e.Peer == 0 {
		return fmt.Errorf("field 'Peer' is not set")
	} // builtin_check

	if e.Time == 0 {
		return fmt.Errorf("field 'Time' is not set")
	} // builtin_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (e *InputAppEvent) CRC() uint32 {
	return uint32(0x1d1b1245)
}

func (e *InputAppEvent) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutLong(e.Peer)
	buf.PutDouble(e.Time)
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *InputAppEvent) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutLong(e.Peer)
	buf.PutDouble(e.Time)
	buf.PutString(e.Type)
	return buf.Result()
}

type InputBotInlineMessageID struct {
	AccessHash int64 `validate:"required"`
	DcId       int32 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputBotInlineMessageID) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (e *InputBotInlineMessageID) CRC() uint32 {
	return uint32(0x890c3d89)
}

func (e *InputBotInlineMessageID) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.DcId)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputBotInlineMessageID) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.DcId)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputClientProxy struct {
	Address string `validate:"required"`
	Port    int32  `validate:"required"`
}

func (e *InputClientProxy) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	return nil
}

func (e *InputClientProxy) CRC() uint32 {
	return uint32(0x75588b3f)
}

func (e *InputClientProxy) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutInt(e.Port)
	return buf.Result()
}

func (e *InputClientProxy) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutInt(e.Port)
	return buf.Result()
}

type InputEncryptedChat struct {
	AccessHash int64 `validate:"required"`
	ChatId     int32 `validate:"required"`
}

func (e *InputEncryptedChat) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	return nil
}

func (e *InputEncryptedChat) CRC() uint32 {
	return uint32(0xf141b5e1)
}

func (e *InputEncryptedChat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (e *InputEncryptedChat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChatId)
	return buf.Result()
}

type InputFolderPeer struct {
	FolderId int32     `validate:"required"`
	Peer     InputPeer `validate:"required"`
}

func (e *InputFolderPeer) Validate() error {
	if e.FolderId == 0 {
		return fmt.Errorf("field 'FolderId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (e *InputFolderPeer) CRC() uint32 {
	return uint32(0xfbd2c296)
}

func (e *InputFolderPeer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *InputFolderPeer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type InputPeerNotifySettings struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	MuteUntil       int32    `flag:"2"`
	ShowPreviews    bool     `flag:"0"`
	Silent          bool     `flag:"1"`
	Sound           string   `flag:"3"`
}

func (e *InputPeerNotifySettings) Validate() error {

	return nil
}

func (e *InputPeerNotifySettings) CRC() uint32 {
	return uint32(0x9c3d198e)
}

func (e *InputPeerNotifySettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ShowPreviews) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.MuteUntil) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Sound) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MuteUntil) {
		buf.PutInt(e.MuteUntil)
	}
	if !zero.IsZeroVal(e.ShowPreviews) {
		buf.PutBool(e.ShowPreviews)
	}
	if !zero.IsZeroVal(e.Silent) {
		buf.PutBool(e.Silent)
	}
	if !zero.IsZeroVal(e.Sound) {
		buf.PutString(e.Sound)
	}
	return buf.Result()
}

func (e *InputPeerNotifySettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ShowPreviews != false {
		flag |= 1 << 0
	}
	if e.Silent != false {
		flag |= 1 << 1
	}
	if e.MuteUntil != 0 {
		flag |= 1 << 2
	}
	if e.Sound != "" {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.MuteUntil != 0 {
		buf.PutInt(e.MuteUntil)
	}
	if e.ShowPreviews != false {
		buf.PutBool(e.ShowPreviews)
	}
	if e.Silent != false {
		buf.PutBool(e.Silent)
	}
	if e.Sound != "" {
		buf.PutString(e.Sound)
	}
	return buf.Result()
}

type InputPhoneCall struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputPhoneCall) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (e *InputPhoneCall) CRC() uint32 {
	return uint32(0x1e36fded)
}

func (e *InputPhoneCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputPhoneCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputContact struct {
	ClientId  int64  `validate:"required"`
	FirstName string `validate:"required"`
	LastName  string `validate:"required"`
	Phone     string `validate:"required"`
}

func (e *InputContact) Validate() error {
	if e.ClientId == 0 {
		return fmt.Errorf("field 'ClientId' is not set")
	} // builtin_check

	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.Phone == "" {
		return fmt.Errorf("field 'Phone' is not set")
	} // builtin_check

	return nil
}

func (e *InputContact) CRC() uint32 {
	return uint32(0xf392b7f4)
}

func (e *InputContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.Phone)
	return buf.Result()
}

func (e *InputContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.Phone)
	return buf.Result()
}

type InputSecureValue struct {
	Data            *SecureData       `flag:"0"`
	Files           []InputSecureFile `flag:"4"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	FrontSide       InputSecureFile   `flag:"1"`
	PlainData       SecurePlainData   `flag:"5"`
	ReverseSide     InputSecureFile   `flag:"2"`
	Selfie          InputSecureFile   `flag:"3"`
	Translation     []InputSecureFile `flag:"6"`
	Type            SecureValueType   `validate:"required"`
}

func (e *InputSecureValue) Validate() error {

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (e *InputSecureValue) CRC() uint32 {
	return uint32(0xdb21d0a7)
}

func (e *InputSecureValue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Data) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FrontSide) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReverseSide) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Selfie) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Files) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.PlainData) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Translation) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Data) {
		buf.PutRawBytes(e.Data.Encode())
	}
	if !zero.IsZeroVal(e.Files) {
		buf.PutVector(e.Files)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FrontSide) {
		buf.PutRawBytes(e.FrontSide.Encode())
	}
	if !zero.IsZeroVal(e.PlainData) {
		buf.PutRawBytes(e.PlainData.Encode())
	}
	if !zero.IsZeroVal(e.ReverseSide) {
		buf.PutRawBytes(e.ReverseSide.Encode())
	}
	if !zero.IsZeroVal(e.Selfie) {
		buf.PutRawBytes(e.Selfie.Encode())
	}
	if !zero.IsZeroVal(e.Translation) {
		buf.PutVector(e.Translation)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *InputSecureValue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Data.Validate() == nil {
		flag |= 1 << 0
	}
	if e.FrontSide.Validate() == nil {
		flag |= 1 << 1
	}
	if e.ReverseSide.Validate() == nil {
		flag |= 1 << 2
	}
	if e.Selfie.Validate() == nil {
		flag |= 1 << 3
	}
	if len(e.Files) > 0 {
		flag |= 1 << 4
	}
	if e.PlainData.Validate() == nil {
		flag |= 1 << 5
	}
	if len(e.Translation) > 0 {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Data.Validate() == nil {
		buf.PutRawBytes(e.Data.Encode())
	}
	if len(e.Files) > 0 {
		buf.PutVector(e.Files)
	}
	buf.PutUint(flag)
	if e.FrontSide.Validate() == nil {
		buf.PutRawBytes(e.FrontSide.Encode())
	}
	if e.PlainData.Validate() == nil {
		buf.PutRawBytes(e.PlainData.Encode())
	}
	if e.ReverseSide.Validate() == nil {
		buf.PutRawBytes(e.ReverseSide.Encode())
	}
	if e.Selfie.Validate() == nil {
		buf.PutRawBytes(e.Selfie.Encode())
	}
	if len(e.Translation) > 0 {
		buf.PutVector(e.Translation)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type InputSingleMedia struct {
	Entities        []MessageEntity `flag:"0"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Media           InputMedia      `validate:"required"`
	Message         string          `validate:"required"`
	RandomId        int64           `validate:"required"`
}

func (e *InputSingleMedia) Validate() error {

	if err := e.Media.Validate(); err != nil {
		return fmt.Errorf("field 'Media': %w", err)
	} // type_iter_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	if e.RandomId == 0 {
		return fmt.Errorf("field 'RandomId' is not set")
	} // builtin_check

	return nil
}

func (e *InputSingleMedia) CRC() uint32 {
	return uint32(0x1cc6e91f)
}

func (e *InputSingleMedia) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutRawBytes(e.Media.Encode())
	buf.PutString(e.Message)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

func (e *InputSingleMedia) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Entities) > 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutRawBytes(e.Media.Encode())
	buf.PutString(e.Message)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

type InputStickerSetItem struct {
	Document        InputDocument `validate:"required"`
	Emoji           string        `validate:"required"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	MaskCoords      *MaskCoords   `flag:"0"`
}

func (e *InputStickerSetItem) Validate() error {
	if err := e.Document.Validate(); err != nil {
		return fmt.Errorf("field 'Document': %w", err)
	} // type_iter_check

	if e.Emoji == "" {
		return fmt.Errorf("field 'Emoji' is not set")
	} // builtin_check

	return nil
}

func (e *InputStickerSetItem) CRC() uint32 {
	return uint32(0xffa0a496)
}

func (e *InputStickerSetItem) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.MaskCoords) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Document.Encode())
	buf.PutString(e.Emoji)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MaskCoords) {
		buf.PutRawBytes(e.MaskCoords.Encode())
	}
	return buf.Result()
}

func (e *InputStickerSetItem) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.MaskCoords.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Document.Encode())
	buf.PutString(e.Emoji)
	buf.PutUint(flag)
	if e.MaskCoords.Validate() == nil {
		buf.PutRawBytes(e.MaskCoords.Encode())
	}
	return buf.Result()
}

type InputThemeSettings struct {
	AccentColor        int32              `validate:"required"`
	BaseTheme          BaseTheme          `validate:"required"`
	__flagsPosition    struct{}           // flags param position `validate:"required"`
	MessageBottomColor int32              `flag:"0"`
	MessageTopColor    int32              `flag:"0"`
	Wallpaper          InputWallPaper     `flag:"1"`
	WallpaperSettings  *WallPaperSettings `flag:"1"`
}

func (e *InputThemeSettings) Validate() error {
	if e.AccentColor == 0 {
		return fmt.Errorf("field 'AccentColor' is not set")
	} // builtin_check

	if e.BaseTheme == 0 {
		return fmt.Errorf("field 'BaseTheme' is not set")
	} // enum_check

	return nil
}

func (e *InputThemeSettings) CRC() uint32 {
	return uint32(0xbd507cd1)
}

func (e *InputThemeSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.MessageBottomColor) || !zero.IsZeroVal(e.MessageTopColor) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Wallpaper) || !zero.IsZeroVal(e.WallpaperSettings) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AccentColor)
	buf.PutRawBytes(e.BaseTheme.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MessageBottomColor) {
		buf.PutInt(e.MessageBottomColor)
	}
	if !zero.IsZeroVal(e.MessageTopColor) {
		buf.PutInt(e.MessageTopColor)
	}
	if !zero.IsZeroVal(e.Wallpaper) {
		buf.PutRawBytes(e.Wallpaper.Encode())
	}
	if !zero.IsZeroVal(e.WallpaperSettings) {
		buf.PutRawBytes(e.WallpaperSettings.Encode())
	}
	return buf.Result()
}

func (e *InputThemeSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.MessageBottomColor != 0 || e.MessageTopColor != 0 {
		flag |= 1 << 0
	}
	if e.Wallpaper.Validate() == nil || e.WallpaperSettings.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AccentColor)
	buf.PutRawBytes(e.BaseTheme.Encode())
	buf.PutUint(flag)
	if e.MessageBottomColor != 0 {
		buf.PutInt(e.MessageBottomColor)
	}
	if e.MessageTopColor != 0 {
		buf.PutInt(e.MessageTopColor)
	}
	if e.Wallpaper.Validate() == nil {
		buf.PutRawBytes(e.Wallpaper.Encode())
	}
	if e.WallpaperSettings.Validate() == nil {
		buf.PutRawBytes(e.WallpaperSettings.Encode())
	}
	return buf.Result()
}

type InputWebDocument struct {
	Attributes []DocumentAttribute `validate:"required"`
	MimeType   string              `validate:"required"`
	Size       int32               `validate:"required"`
	Url        string              `validate:"required"`
}

func (e *InputWebDocument) Validate() error {
	if len(e.Attributes) == 0 {
		return fmt.Errorf("field 'Attributes' is not set")
	} // slice_len_check
	for _, item := range e.Attributes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Attributes': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (e *InputWebDocument) CRC() uint32 {
	return uint32(0x9bed434d)
}

func (e *InputWebDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *InputWebDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

type Invoice struct {
	Currency                 string          `validate:"required"`
	EmailRequested           bool            `flag:"3,encoded_in_bitflags"`
	EmailToProvider          bool            `flag:"7,encoded_in_bitflags"`
	__flagsPosition          struct{}        // flags param position `validate:"required"`
	Flexible                 bool            `flag:"5,encoded_in_bitflags"`
	NameRequested            bool            `flag:"1,encoded_in_bitflags"`
	PhoneRequested           bool            `flag:"2,encoded_in_bitflags"`
	PhoneToProvider          bool            `flag:"6,encoded_in_bitflags"`
	Prices                   []*LabeledPrice `validate:"required"`
	ShippingAddressRequested bool            `flag:"4,encoded_in_bitflags"`
	Test                     bool            `flag:"0,encoded_in_bitflags"`
}

func (e *Invoice) Validate() error {
	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if len(e.Prices) == 0 {
		return fmt.Errorf("field 'Prices' is not set")
	} // slice_len_check
	for _, item := range e.Prices {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Prices': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *Invoice) CRC() uint32 {
	return uint32(0xc30aa358)
}

func (e *Invoice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Test) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NameRequested) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.PhoneRequested) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.EmailRequested) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.ShippingAddressRequested) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Flexible) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.PhoneToProvider) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.EmailToProvider) {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	buf.PutVector(e.Prices)
	return buf.Result()
}

func (e *Invoice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Test != false {
		flag |= 1 << 0
	}
	if e.NameRequested != false {
		flag |= 1 << 1
	}
	if e.PhoneRequested != false {
		flag |= 1 << 2
	}
	if e.EmailRequested != false {
		flag |= 1 << 3
	}
	if e.ShippingAddressRequested != false {
		flag |= 1 << 4
	}
	if e.Flexible != false {
		flag |= 1 << 5
	}
	if e.PhoneToProvider != false {
		flag |= 1 << 6
	}
	if e.EmailToProvider != false {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	buf.PutVector(e.Prices)
	return buf.Result()
}

type JSONObjectValue struct {
	Key   string    `validate:"required"`
	Value JSONValue `validate:"required"`
}

func (e *JSONObjectValue) Validate() error {
	if e.Key == "" {
		return fmt.Errorf("field 'Key' is not set")
	} // builtin_check

	if err := e.Value.Validate(); err != nil {
		return fmt.Errorf("field 'Value': %w", err)
	} // type_iter_check

	return nil
}

func (e *JSONObjectValue) CRC() uint32 {
	return uint32(0xc0de1bd9)
}

func (e *JSONObjectValue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	buf.PutRawBytes(e.Value.Encode())
	return buf.Result()
}

func (e *JSONObjectValue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	buf.PutRawBytes(e.Value.Encode())
	return buf.Result()
}

type KeyboardButtonRow struct {
	Buttons []KeyboardButton `validate:"required"`
}

func (e *KeyboardButtonRow) Validate() error {
	if len(e.Buttons) == 0 {
		return fmt.Errorf("field 'Buttons' is not set")
	} // slice_len_check
	for _, item := range e.Buttons {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Buttons': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *KeyboardButtonRow) CRC() uint32 {
	return uint32(0x77608b83)
}

func (e *KeyboardButtonRow) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Buttons)
	return buf.Result()
}

func (e *KeyboardButtonRow) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Buttons)
	return buf.Result()
}

type LabeledPrice struct {
	Amount int64  `validate:"required"`
	Label  string `validate:"required"`
}

func (e *LabeledPrice) Validate() error {
	if e.Amount == 0 {
		return fmt.Errorf("field 'Amount' is not set")
	} // builtin_check

	if e.Label == "" {
		return fmt.Errorf("field 'Label' is not set")
	} // builtin_check

	return nil
}

func (e *LabeledPrice) CRC() uint32 {
	return uint32(0xcb296bf8)
}

func (e *LabeledPrice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Amount)
	buf.PutString(e.Label)
	return buf.Result()
}

func (e *LabeledPrice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Amount)
	buf.PutString(e.Label)
	return buf.Result()
}

type LangPackDifference struct {
	FromVersion int32            `validate:"required"`
	LangCode    string           `validate:"required"`
	Strings     []LangPackString `validate:"required"`
	Version     int32            `validate:"required"`
}

func (e *LangPackDifference) Validate() error {
	if e.FromVersion == 0 {
		return fmt.Errorf("field 'FromVersion' is not set")
	} // builtin_check

	if e.LangCode == "" {
		return fmt.Errorf("field 'LangCode' is not set")
	} // builtin_check

	if len(e.Strings) == 0 {
		return fmt.Errorf("field 'Strings' is not set")
	} // slice_len_check
	for _, item := range e.Strings {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Strings': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (e *LangPackDifference) CRC() uint32 {
	return uint32(0xf385c1f6)
}

func (e *LangPackDifference) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FromVersion)
	buf.PutString(e.LangCode)
	buf.PutVector(e.Strings)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *LangPackDifference) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FromVersion)
	buf.PutString(e.LangCode)
	buf.PutVector(e.Strings)
	buf.PutInt(e.Version)
	return buf.Result()
}

type LangPackLanguage struct {
	BaseLangCode    string   `flag:"1"`
	Beta            bool     `flag:"3,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	LangCode        string   `validate:"required"`
	Name            string   `validate:"required"`
	NativeName      string   `validate:"required"`
	Official        bool     `flag:"0,encoded_in_bitflags"`
	PluralCode      string   `validate:"required"`
	Rtl             bool     `flag:"2,encoded_in_bitflags"`
	StringsCount    int32    `validate:"required"`
	TranslatedCount int32    `validate:"required"`
	TranslationsUrl string   `validate:"required"`
}

func (e *LangPackLanguage) Validate() error {

	if e.LangCode == "" {
		return fmt.Errorf("field 'LangCode' is not set")
	} // builtin_check

	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	if e.NativeName == "" {
		return fmt.Errorf("field 'NativeName' is not set")
	} // builtin_check

	if e.PluralCode == "" {
		return fmt.Errorf("field 'PluralCode' is not set")
	} // builtin_check

	if e.StringsCount == 0 {
		return fmt.Errorf("field 'StringsCount' is not set")
	} // builtin_check

	if e.TranslatedCount == 0 {
		return fmt.Errorf("field 'TranslatedCount' is not set")
	} // builtin_check

	if e.TranslationsUrl == "" {
		return fmt.Errorf("field 'TranslationsUrl' is not set")
	} // builtin_check

	return nil
}

func (e *LangPackLanguage) CRC() uint32 {
	return uint32(0xeeca5ce3)
}

func (e *LangPackLanguage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Official) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.BaseLangCode) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Rtl) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Beta) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.BaseLangCode) {
		buf.PutString(e.BaseLangCode)
	}
	buf.PutUint(flag)
	buf.PutString(e.LangCode)
	buf.PutString(e.Name)
	buf.PutString(e.NativeName)
	buf.PutString(e.PluralCode)
	buf.PutInt(e.StringsCount)
	buf.PutInt(e.TranslatedCount)
	buf.PutString(e.TranslationsUrl)
	return buf.Result()
}

func (e *LangPackLanguage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Official != false {
		flag |= 1 << 0
	}
	if e.BaseLangCode != "" {
		flag |= 1 << 1
	}
	if e.Rtl != false {
		flag |= 1 << 2
	}
	if e.Beta != false {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.BaseLangCode != "" {
		buf.PutString(e.BaseLangCode)
	}
	buf.PutUint(flag)
	buf.PutString(e.LangCode)
	buf.PutString(e.Name)
	buf.PutString(e.NativeName)
	buf.PutString(e.PluralCode)
	buf.PutInt(e.StringsCount)
	buf.PutInt(e.TranslatedCount)
	buf.PutString(e.TranslationsUrl)
	return buf.Result()
}

type MaskCoords struct {
	N    int32   `validate:"required"`
	X    float64 `validate:"required"`
	Y    float64 `validate:"required"`
	Zoom float64 `validate:"required"`
}

func (e *MaskCoords) Validate() error {
	if e.N == 0 {
		return fmt.Errorf("field 'N' is not set")
	} // builtin_check

	if e.X == 0 {
		return fmt.Errorf("field 'X' is not set")
	} // builtin_check

	if e.Y == 0 {
		return fmt.Errorf("field 'Y' is not set")
	} // builtin_check

	if e.Zoom == 0 {
		return fmt.Errorf("field 'Zoom' is not set")
	} // builtin_check

	return nil
}

func (e *MaskCoords) CRC() uint32 {
	return uint32(0xaed6dbb2)
}

func (e *MaskCoords) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.N)
	buf.PutDouble(e.X)
	buf.PutDouble(e.Y)
	buf.PutDouble(e.Zoom)
	return buf.Result()
}

func (e *MaskCoords) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.N)
	buf.PutDouble(e.X)
	buf.PutDouble(e.Y)
	buf.PutDouble(e.Zoom)
	return buf.Result()
}

type MessageFwdHeader struct {
	ChannelId       int32    `flag:"1"`
	ChannelPost     int32    `flag:"2"`
	Date            int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	FromId          int32    `flag:"0"`
	FromName        string   `flag:"5"`
	PostAuthor      string   `flag:"3"`
	PsaType         string   `flag:"6"`
	SavedFromMsgId  int32    `flag:"4"`
	SavedFromPeer   Peer     `flag:"4"`
}

func (e *MessageFwdHeader) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	return nil
}

func (e *MessageFwdHeader) CRC() uint32 {
	return uint32(0x353a686b)
}

func (e *MessageFwdHeader) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FromId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ChannelId) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ChannelPost) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.PostAuthor) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.SavedFromMsgId) || !zero.IsZeroVal(e.SavedFromPeer) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.FromName) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.PsaType) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.ChannelId) {
		buf.PutInt(e.ChannelId)
	}
	if !zero.IsZeroVal(e.ChannelPost) {
		buf.PutInt(e.ChannelPost)
	}
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FromId) {
		buf.PutInt(e.FromId)
	}
	if !zero.IsZeroVal(e.FromName) {
		buf.PutString(e.FromName)
	}
	if !zero.IsZeroVal(e.PostAuthor) {
		buf.PutString(e.PostAuthor)
	}
	if !zero.IsZeroVal(e.PsaType) {
		buf.PutString(e.PsaType)
	}
	if !zero.IsZeroVal(e.SavedFromMsgId) {
		buf.PutInt(e.SavedFromMsgId)
	}
	if !zero.IsZeroVal(e.SavedFromPeer) {
		buf.PutRawBytes(e.SavedFromPeer.Encode())
	}
	return buf.Result()
}

func (e *MessageFwdHeader) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FromId != 0 {
		flag |= 1 << 0
	}
	if e.ChannelId != 0 {
		flag |= 1 << 1
	}
	if e.ChannelPost != 0 {
		flag |= 1 << 2
	}
	if e.PostAuthor != "" {
		flag |= 1 << 3
	}
	if e.SavedFromMsgId != 0 || e.SavedFromPeer.Validate() == nil {
		flag |= 1 << 4
	}
	if e.FromName != "" {
		flag |= 1 << 5
	}
	if e.PsaType != "" {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.ChannelId != 0 {
		buf.PutInt(e.ChannelId)
	}
	if e.ChannelPost != 0 {
		buf.PutInt(e.ChannelPost)
	}
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.FromId != 0 {
		buf.PutInt(e.FromId)
	}
	if e.FromName != "" {
		buf.PutString(e.FromName)
	}
	if e.PostAuthor != "" {
		buf.PutString(e.PostAuthor)
	}
	if e.PsaType != "" {
		buf.PutString(e.PsaType)
	}
	if e.SavedFromMsgId != 0 {
		buf.PutInt(e.SavedFromMsgId)
	}
	if e.SavedFromPeer.Validate() == nil {
		buf.PutRawBytes(e.SavedFromPeer.Encode())
	}
	return buf.Result()
}

type MessageInteractionCounters struct {
	Forwards int32 `validate:"required"`
	MsgId    int32 `validate:"required"`
	Views    int32 `validate:"required"`
}

func (e *MessageInteractionCounters) Validate() error {
	if e.Forwards == 0 {
		return fmt.Errorf("field 'Forwards' is not set")
	} // builtin_check

	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if e.Views == 0 {
		return fmt.Errorf("field 'Views' is not set")
	} // builtin_check

	return nil
}

func (e *MessageInteractionCounters) CRC() uint32 {
	return uint32(0xad4fc9bd)
}

func (e *MessageInteractionCounters) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Forwards)
	buf.PutInt(e.MsgId)
	buf.PutInt(e.Views)
	return buf.Result()
}

func (e *MessageInteractionCounters) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Forwards)
	buf.PutInt(e.MsgId)
	buf.PutInt(e.Views)
	return buf.Result()
}

type MessageRange struct {
	MaxId int32 `validate:"required"`
	MinId int32 `validate:"required"`
}

func (e *MessageRange) Validate() error {
	if e.MaxId == 0 {
		return fmt.Errorf("field 'MaxId' is not set")
	} // builtin_check

	if e.MinId == 0 {
		return fmt.Errorf("field 'MinId' is not set")
	} // builtin_check

	return nil
}

func (e *MessageRange) CRC() uint32 {
	return uint32(0xae30253)
}

func (e *MessageRange) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxId)
	buf.PutInt(e.MinId)
	return buf.Result()
}

func (e *MessageRange) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxId)
	buf.PutInt(e.MinId)
	return buf.Result()
}

type MessagesAffectedHistory struct {
	Offset   int32 `validate:"required"`
	Pts      int32 `validate:"required"`
	PtsCount int32 `validate:"required"`
}

func (e *MessagesAffectedHistory) Validate() error {
	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (e *MessagesAffectedHistory) CRC() uint32 {
	return uint32(0xb45c69d1)
}

func (e *MessagesAffectedHistory) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *MessagesAffectedHistory) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Offset)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type MessagesAffectedMessages struct {
	Pts      int32 `validate:"required"`
	PtsCount int32 `validate:"required"`
}

func (e *MessagesAffectedMessages) Validate() error {
	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (e *MessagesAffectedMessages) CRC() uint32 {
	return uint32(0x84d19185)
}

func (e *MessagesAffectedMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *MessagesAffectedMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type MessagesArchivedStickers struct {
	Count int32               `validate:"required"`
	Sets  []StickerSetCovered `validate:"required"`
}

func (e *MessagesArchivedStickers) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Sets) == 0 {
		return fmt.Errorf("field 'Sets' is not set")
	} // slice_len_check
	for _, item := range e.Sets {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sets': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesArchivedStickers) CRC() uint32 {
	return uint32(0x4fcba9c8)
}

func (e *MessagesArchivedStickers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Sets)
	return buf.Result()
}

func (e *MessagesArchivedStickers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Sets)
	return buf.Result()
}

type MessagesBotCallbackAnswer struct {
	Alert           bool     `flag:"1,encoded_in_bitflags"`
	CacheTime       int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	HasUrl          bool     `flag:"3,encoded_in_bitflags"`
	Message         string   `flag:"0"`
	NativeUi        bool     `flag:"4,encoded_in_bitflags"`
	Url             string   `flag:"2"`
}

func (e *MessagesBotCallbackAnswer) Validate() error {
	if e.CacheTime == 0 {
		return fmt.Errorf("field 'CacheTime' is not set")
	} // builtin_check

	return nil
}

func (e *MessagesBotCallbackAnswer) CRC() uint32 {
	return uint32(0x36585ea4)
}

func (e *MessagesBotCallbackAnswer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Message) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Alert) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.HasUrl) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.NativeUi) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.CacheTime)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Message) {
		buf.PutString(e.Message)
	}
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

func (e *MessagesBotCallbackAnswer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Message != "" {
		flag |= 1 << 0
	}
	if e.Alert != false {
		flag |= 1 << 1
	}
	if e.Url != "" {
		flag |= 1 << 2
	}
	if e.HasUrl != false {
		flag |= 1 << 3
	}
	if e.NativeUi != false {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.CacheTime)
	buf.PutUint(flag)
	if e.Message != "" {
		buf.PutString(e.Message)
	}
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

type MessagesBotResults struct {
	CacheTime       int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	Gallery         bool               `flag:"0,encoded_in_bitflags"`
	NextOffset      string             `flag:"1"`
	QueryId         int64              `validate:"required"`
	Results         []BotInlineResult  `validate:"required"`
	SwitchPm        *InlineBotSwitchPM `flag:"2"`
	Users           []User             `validate:"required"`
}

func (e *MessagesBotResults) Validate() error {
	if e.CacheTime == 0 {
		return fmt.Errorf("field 'CacheTime' is not set")
	} // builtin_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if len(e.Results) == 0 {
		return fmt.Errorf("field 'Results' is not set")
	} // slice_len_check
	for _, item := range e.Results {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Results': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesBotResults) CRC() uint32 {
	return uint32(0x947ca848)
}

func (e *MessagesBotResults) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Gallery) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NextOffset) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.SwitchPm) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.CacheTime)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.NextOffset) {
		buf.PutString(e.NextOffset)
	}
	buf.PutLong(e.QueryId)
	buf.PutVector(e.Results)
	if !zero.IsZeroVal(e.SwitchPm) {
		buf.PutRawBytes(e.SwitchPm.Encode())
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesBotResults) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Gallery != false {
		flag |= 1 << 0
	}
	if e.NextOffset != "" {
		flag |= 1 << 1
	}
	if e.SwitchPm.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.CacheTime)
	buf.PutUint(flag)
	if e.NextOffset != "" {
		buf.PutString(e.NextOffset)
	}
	buf.PutLong(e.QueryId)
	buf.PutVector(e.Results)
	if e.SwitchPm.Validate() == nil {
		buf.PutRawBytes(e.SwitchPm.Encode())
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesChatFull struct {
	Chats    []Chat   `validate:"required"`
	FullChat ChatFull `validate:"required"`
	Users    []User   `validate:"required"`
}

func (e *MessagesChatFull) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.FullChat.Validate(); err != nil {
		return fmt.Errorf("field 'FullChat': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesChatFull) CRC() uint32 {
	return uint32(0xe5d7d19c)
}

func (e *MessagesChatFull) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.FullChat.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesChatFull) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.FullChat.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesHighScores struct {
	Scores []*HighScore `validate:"required"`
	Users  []User       `validate:"required"`
}

func (e *MessagesHighScores) Validate() error {
	if len(e.Scores) == 0 {
		return fmt.Errorf("field 'Scores' is not set")
	} // slice_len_check
	for _, item := range e.Scores {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Scores': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesHighScores) CRC() uint32 {
	return uint32(0x9a3bfd99)
}

func (e *MessagesHighScores) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Scores)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesHighScores) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Scores)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesInactiveChats struct {
	Chats []Chat  `validate:"required"`
	Dates []int32 `validate:"required"`
	Users []User  `validate:"required"`
}

func (e *MessagesInactiveChats) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Dates) == 0 {
		return fmt.Errorf("field 'Dates' is not set")
	} // slice_len_check
	for _, item := range e.Dates {
		if item == 0 {
			return fmt.Errorf("field 'Dates' is not set")
		} // builtin_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesInactiveChats) CRC() uint32 {
	return uint32(0xa927fec5)
}

func (e *MessagesInactiveChats) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dates)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesInactiveChats) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dates)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesMessageEditData struct {
	Caption         bool     `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
}

func (e *MessagesMessageEditData) Validate() error {

	return nil
}

func (e *MessagesMessageEditData) CRC() uint32 {
	return uint32(0x26b5dde6)
}

func (e *MessagesMessageEditData) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Caption) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *MessagesMessageEditData) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Caption != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type MessagesPeerDialogs struct {
	Chats    []Chat        `validate:"required"`
	Dialogs  []Dialog      `validate:"required"`
	Messages []Message     `validate:"required"`
	State    *UpdatesState `validate:"required"`
	Users    []User        `validate:"required"`
}

func (e *MessagesPeerDialogs) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Dialogs) == 0 {
		return fmt.Errorf("field 'Dialogs' is not set")
	} // slice_len_check
	for _, item := range e.Dialogs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Dialogs': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.State.Validate(); err != nil {
		return fmt.Errorf("field 'State': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesPeerDialogs) CRC() uint32 {
	return uint32(0x3371c354)
}

func (e *MessagesPeerDialogs) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutRawBytes(e.State.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesPeerDialogs) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutRawBytes(e.State.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesSearchCounter struct {
	Count           int32          `validate:"required"`
	Filter          MessagesFilter `validate:"required"`
	__flagsPosition struct{}       // flags param position `validate:"required"`
	Inexact         bool           `flag:"1,encoded_in_bitflags"`
}

func (e *MessagesSearchCounter) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if err := e.Filter.Validate(); err != nil {
		return fmt.Errorf("field 'Filter': %w", err)
	} // type_iter_check

	return nil
}

func (e *MessagesSearchCounter) CRC() uint32 {
	return uint32(0xe844ebff)
}

func (e *MessagesSearchCounter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Inexact) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutRawBytes(e.Filter.Encode())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *MessagesSearchCounter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Inexact != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutRawBytes(e.Filter.Encode())
	buf.PutUint(flag)
	return buf.Result()
}

type MessagesStickerSet struct {
	Documents []Document     `validate:"required"`
	Packs     []*StickerPack `validate:"required"`
	Set       *StickerSet    `validate:"required"`
}

func (e *MessagesStickerSet) Validate() error {
	if len(e.Documents) == 0 {
		return fmt.Errorf("field 'Documents' is not set")
	} // slice_len_check
	for _, item := range e.Documents {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Documents': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Packs) == 0 {
		return fmt.Errorf("field 'Packs' is not set")
	} // slice_len_check
	for _, item := range e.Packs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Packs': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Set.Validate(); err != nil {
		return fmt.Errorf("field 'Set': %w", err)
	} // type_iter_check

	return nil
}

func (e *MessagesStickerSet) CRC() uint32 {
	return uint32(0xb60a24a6)
}

func (e *MessagesStickerSet) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Documents)
	buf.PutVector(e.Packs)
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

func (e *MessagesStickerSet) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Documents)
	buf.PutVector(e.Packs)
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

type MessagesVotesList struct {
	Count           int32             `validate:"required"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	NextOffset      string            `flag:"0"`
	Users           []User            `validate:"required"`
	Votes           []MessageUserVote `validate:"required"`
}

func (e *MessagesVotesList) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Votes) == 0 {
		return fmt.Errorf("field 'Votes' is not set")
	} // slice_len_check
	for _, item := range e.Votes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Votes': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *MessagesVotesList) CRC() uint32 {
	return uint32(0x823f649)
}

func (e *MessagesVotesList) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NextOffset) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.NextOffset) {
		buf.PutString(e.NextOffset)
	}
	buf.PutVector(e.Users)
	buf.PutVector(e.Votes)
	return buf.Result()
}

func (e *MessagesVotesList) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NextOffset != "" {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	if e.NextOffset != "" {
		buf.PutString(e.NextOffset)
	}
	buf.PutVector(e.Users)
	buf.PutVector(e.Votes)
	return buf.Result()
}

type NearestDc struct {
	Country   string `validate:"required"`
	NearestDc int32  `validate:"required"`
	ThisDc    int32  `validate:"required"`
}

func (e *NearestDc) Validate() error {
	if e.Country == "" {
		return fmt.Errorf("field 'Country' is not set")
	} // builtin_check

	if e.NearestDc == 0 {
		return fmt.Errorf("field 'NearestDc' is not set")
	} // builtin_check

	if e.ThisDc == 0 {
		return fmt.Errorf("field 'ThisDc' is not set")
	} // builtin_check

	return nil
}

func (e *NearestDc) CRC() uint32 {
	return uint32(0x8e1a1775)
}

func (e *NearestDc) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Country)
	buf.PutInt(e.NearestDc)
	buf.PutInt(e.ThisDc)
	return buf.Result()
}

func (e *NearestDc) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Country)
	buf.PutInt(e.NearestDc)
	buf.PutInt(e.ThisDc)
	return buf.Result()
}

type Page struct {
	Blocks          []PageBlock `validate:"required"`
	Documents       []Document  `validate:"required"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	Part            bool        `flag:"0,encoded_in_bitflags"`
	Photos          []Photo     `validate:"required"`
	Rtl             bool        `flag:"1,encoded_in_bitflags"`
	Url             string      `validate:"required"`
	V2              bool        `flag:"2,encoded_in_bitflags"`
	Views           int32       `flag:"3"`
}

func (e *Page) Validate() error {
	if len(e.Blocks) == 0 {
		return fmt.Errorf("field 'Blocks' is not set")
	} // slice_len_check
	for _, item := range e.Blocks {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocks': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Documents) == 0 {
		return fmt.Errorf("field 'Documents' is not set")
	} // slice_len_check
	for _, item := range e.Documents {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Documents': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Photos) == 0 {
		return fmt.Errorf("field 'Photos' is not set")
	} // slice_len_check
	for _, item := range e.Photos {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Photos': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (e *Page) CRC() uint32 {
	return uint32(0x98657f0d)
}

func (e *Page) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Part) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Rtl) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.V2) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Views) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutVector(e.Documents)
	buf.PutUint(flag)
	buf.PutVector(e.Photos)
	buf.PutString(e.Url)
	if !zero.IsZeroVal(e.Views) {
		buf.PutInt(e.Views)
	}
	return buf.Result()
}

func (e *Page) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Part != false {
		flag |= 1 << 0
	}
	if e.Rtl != false {
		flag |= 1 << 1
	}
	if e.V2 != false {
		flag |= 1 << 2
	}
	if e.Views != 0 {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutVector(e.Documents)
	buf.PutUint(flag)
	buf.PutVector(e.Photos)
	buf.PutString(e.Url)
	if e.Views != 0 {
		buf.PutInt(e.Views)
	}
	return buf.Result()
}

type PageCaption struct {
	Credit RichText `validate:"required"`
	Text   RichText `validate:"required"`
}

func (e *PageCaption) Validate() error {
	if err := e.Credit.Validate(); err != nil {
		return fmt.Errorf("field 'Credit': %w", err)
	} // type_iter_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (e *PageCaption) CRC() uint32 {
	return uint32(0x6f747657)
}

func (e *PageCaption) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Credit.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageCaption) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Credit.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageRelatedArticle struct {
	Author          string   `flag:"3"`
	Description     string   `flag:"1"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	PhotoId         int64    `flag:"2"`
	PublishedDate   int32    `flag:"4"`
	Title           string   `flag:"0"`
	Url             string   `validate:"required"`
	WebpageId       int64    `validate:"required"`
}

func (e *PageRelatedArticle) Validate() error {

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	if e.WebpageId == 0 {
		return fmt.Errorf("field 'WebpageId' is not set")
	} // builtin_check

	return nil
}

func (e *PageRelatedArticle) CRC() uint32 {
	return uint32(0xb390dc08)
}

func (e *PageRelatedArticle) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.PhotoId) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Author) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.PublishedDate) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Author) {
		buf.PutString(e.Author)
	}
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.PhotoId) {
		buf.PutLong(e.PhotoId)
	}
	if !zero.IsZeroVal(e.PublishedDate) {
		buf.PutInt(e.PublishedDate)
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

func (e *PageRelatedArticle) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Title != "" {
		flag |= 1 << 0
	}
	if e.Description != "" {
		flag |= 1 << 1
	}
	if e.PhotoId != 0 {
		flag |= 1 << 2
	}
	if e.Author != "" {
		flag |= 1 << 3
	}
	if e.PublishedDate != 0 {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Author != "" {
		buf.PutString(e.Author)
	}
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	if e.PhotoId != 0 {
		buf.PutLong(e.PhotoId)
	}
	if e.PublishedDate != 0 {
		buf.PutInt(e.PublishedDate)
	}
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

type PageTableCell struct {
	AlignCenter     bool     `flag:"3,encoded_in_bitflags"`
	AlignRight      bool     `flag:"4,encoded_in_bitflags"`
	Colspan         int32    `flag:"1"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Header          bool     `flag:"0,encoded_in_bitflags"`
	Rowspan         int32    `flag:"2"`
	Text            RichText `flag:"7"`
	ValignBottom    bool     `flag:"6,encoded_in_bitflags"`
	ValignMiddle    bool     `flag:"5,encoded_in_bitflags"`
}

func (e *PageTableCell) Validate() error {

	return nil
}

func (e *PageTableCell) CRC() uint32 {
	return uint32(0x34566b6a)
}

func (e *PageTableCell) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Header) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Colspan) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Rowspan) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.AlignCenter) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.AlignRight) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.ValignMiddle) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.ValignBottom) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Text) {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Colspan) {
		buf.PutInt(e.Colspan)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Rowspan) {
		buf.PutInt(e.Rowspan)
	}
	if !zero.IsZeroVal(e.Text) {
		buf.PutRawBytes(e.Text.Encode())
	}
	return buf.Result()
}

func (e *PageTableCell) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Header != false {
		flag |= 1 << 0
	}
	if e.Colspan != 0 {
		flag |= 1 << 1
	}
	if e.Rowspan != 0 {
		flag |= 1 << 2
	}
	if e.AlignCenter != false {
		flag |= 1 << 3
	}
	if e.AlignRight != false {
		flag |= 1 << 4
	}
	if e.ValignMiddle != false {
		flag |= 1 << 5
	}
	if e.ValignBottom != false {
		flag |= 1 << 6
	}
	if e.Text.Validate() == nil {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Colspan != 0 {
		buf.PutInt(e.Colspan)
	}
	buf.PutUint(flag)
	if e.Rowspan != 0 {
		buf.PutInt(e.Rowspan)
	}
	if e.Text.Validate() == nil {
		buf.PutRawBytes(e.Text.Encode())
	}
	return buf.Result()
}

type PageTableRow struct {
	Cells []*PageTableCell `validate:"required"`
}

func (e *PageTableRow) Validate() error {
	if len(e.Cells) == 0 {
		return fmt.Errorf("field 'Cells' is not set")
	} // slice_len_check
	for _, item := range e.Cells {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Cells': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *PageTableRow) CRC() uint32 {
	return uint32(0xe0c0c5e5)
}

func (e *PageTableRow) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Cells)
	return buf.Result()
}

func (e *PageTableRow) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Cells)
	return buf.Result()
}

type PaymentCharge struct {
	Id               string `validate:"required"`
	ProviderChargeId string `validate:"required"`
}

func (e *PaymentCharge) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ProviderChargeId == "" {
		return fmt.Errorf("field 'ProviderChargeId' is not set")
	} // builtin_check

	return nil
}

func (e *PaymentCharge) CRC() uint32 {
	return uint32(0xea02c27e)
}

func (e *PaymentCharge) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutString(e.ProviderChargeId)
	return buf.Result()
}

func (e *PaymentCharge) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutString(e.ProviderChargeId)
	return buf.Result()
}

type PaymentRequestedInfo struct {
	Email           string       `flag:"2"`
	__flagsPosition struct{}     // flags param position `validate:"required"`
	Name            string       `flag:"0"`
	Phone           string       `flag:"1"`
	ShippingAddress *PostAddress `flag:"3"`
}

func (e *PaymentRequestedInfo) Validate() error {

	return nil
}

func (e *PaymentRequestedInfo) CRC() uint32 {
	return uint32(0x909c3f94)
}

func (e *PaymentRequestedInfo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Name) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Phone) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Email) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.ShippingAddress) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Email) {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Name) {
		buf.PutString(e.Name)
	}
	if !zero.IsZeroVal(e.Phone) {
		buf.PutString(e.Phone)
	}
	if !zero.IsZeroVal(e.ShippingAddress) {
		buf.PutRawBytes(e.ShippingAddress.Encode())
	}
	return buf.Result()
}

func (e *PaymentRequestedInfo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Name != "" {
		flag |= 1 << 0
	}
	if e.Phone != "" {
		flag |= 1 << 1
	}
	if e.Email != "" {
		flag |= 1 << 2
	}
	if e.ShippingAddress.Validate() == nil {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Email != "" {
		buf.PutString(e.Email)
	}
	buf.PutUint(flag)
	if e.Name != "" {
		buf.PutString(e.Name)
	}
	if e.Phone != "" {
		buf.PutString(e.Phone)
	}
	if e.ShippingAddress.Validate() == nil {
		buf.PutRawBytes(e.ShippingAddress.Encode())
	}
	return buf.Result()
}

type PaymentSavedCredentials struct {
	Id    string `validate:"required"`
	Title string `validate:"required"`
}

func (e *PaymentSavedCredentials) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *PaymentSavedCredentials) CRC() uint32 {
	return uint32(0xcdc27a1f)
}

func (e *PaymentSavedCredentials) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *PaymentSavedCredentials) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutString(e.Title)
	return buf.Result()
}

type PaymentsBankCardData struct {
	OpenUrls []*BankCardOpenUrl `validate:"required"`
	Title    string             `validate:"required"`
}

func (e *PaymentsBankCardData) Validate() error {
	if len(e.OpenUrls) == 0 {
		return fmt.Errorf("field 'OpenUrls' is not set")
	} // slice_len_check
	for _, item := range e.OpenUrls {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'OpenUrls': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *PaymentsBankCardData) CRC() uint32 {
	return uint32(0x3e24e573)
}

func (e *PaymentsBankCardData) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.OpenUrls)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *PaymentsBankCardData) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.OpenUrls)
	buf.PutString(e.Title)
	return buf.Result()
}

type PaymentsPaymentForm struct {
	BotId              int32                    `validate:"required"`
	CanSaveCredentials bool                     `flag:"2,encoded_in_bitflags"`
	__flagsPosition    struct{}                 // flags param position `validate:"required"`
	Invoice            *Invoice                 `validate:"required"`
	NativeParams       *DataJSON                `flag:"4"`
	NativeProvider     string                   `flag:"4"`
	PasswordMissing    bool                     `flag:"3,encoded_in_bitflags"`
	ProviderId         int32                    `validate:"required"`
	SavedCredentials   *PaymentSavedCredentials `flag:"1"`
	SavedInfo          *PaymentRequestedInfo    `flag:"0"`
	Url                string                   `validate:"required"`
	Users              []User                   `validate:"required"`
}

func (e *PaymentsPaymentForm) Validate() error {
	if e.BotId == 0 {
		return fmt.Errorf("field 'BotId' is not set")
	} // builtin_check

	if err := e.Invoice.Validate(); err != nil {
		return fmt.Errorf("field 'Invoice': %w", err)
	} // type_iter_check

	if e.ProviderId == 0 {
		return fmt.Errorf("field 'ProviderId' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *PaymentsPaymentForm) CRC() uint32 {
	return uint32(0x3f56aea3)
}

func (e *PaymentsPaymentForm) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SavedInfo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SavedCredentials) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.CanSaveCredentials) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.PasswordMissing) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.NativeParams) || !zero.IsZeroVal(e.NativeProvider) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Invoice.Encode())
	if !zero.IsZeroVal(e.NativeParams) {
		buf.PutRawBytes(e.NativeParams.Encode())
	}
	if !zero.IsZeroVal(e.NativeProvider) {
		buf.PutString(e.NativeProvider)
	}
	buf.PutInt(e.ProviderId)
	if !zero.IsZeroVal(e.SavedCredentials) {
		buf.PutRawBytes(e.SavedCredentials.Encode())
	}
	if !zero.IsZeroVal(e.SavedInfo) {
		buf.PutRawBytes(e.SavedInfo.Encode())
	}
	buf.PutString(e.Url)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PaymentsPaymentForm) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SavedInfo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.SavedCredentials.Validate() == nil {
		flag |= 1 << 1
	}
	if e.CanSaveCredentials != false {
		flag |= 1 << 2
	}
	if e.PasswordMissing != false {
		flag |= 1 << 3
	}
	if e.NativeParams.Validate() == nil || e.NativeProvider != "" {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Invoice.Encode())
	if e.NativeParams.Validate() == nil {
		buf.PutRawBytes(e.NativeParams.Encode())
	}
	if e.NativeProvider != "" {
		buf.PutString(e.NativeProvider)
	}
	buf.PutInt(e.ProviderId)
	if e.SavedCredentials.Validate() == nil {
		buf.PutRawBytes(e.SavedCredentials.Encode())
	}
	if e.SavedInfo.Validate() == nil {
		buf.PutRawBytes(e.SavedInfo.Encode())
	}
	buf.PutString(e.Url)
	buf.PutVector(e.Users)
	return buf.Result()
}

type PaymentsPaymentReceipt struct {
	BotId            int32                 `validate:"required"`
	CredentialsTitle string                `validate:"required"`
	Currency         string                `validate:"required"`
	Date             int32                 `validate:"required"`
	__flagsPosition  struct{}              // flags param position `validate:"required"`
	Info             *PaymentRequestedInfo `flag:"0"`
	Invoice          *Invoice              `validate:"required"`
	ProviderId       int32                 `validate:"required"`
	Shipping         *ShippingOption       `flag:"1"`
	TotalAmount      int64                 `validate:"required"`
	Users            []User                `validate:"required"`
}

func (e *PaymentsPaymentReceipt) Validate() error {
	if e.BotId == 0 {
		return fmt.Errorf("field 'BotId' is not set")
	} // builtin_check

	if e.CredentialsTitle == "" {
		return fmt.Errorf("field 'CredentialsTitle' is not set")
	} // builtin_check

	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if err := e.Invoice.Validate(); err != nil {
		return fmt.Errorf("field 'Invoice': %w", err)
	} // type_iter_check

	if e.ProviderId == 0 {
		return fmt.Errorf("field 'ProviderId' is not set")
	} // builtin_check

	if e.TotalAmount == 0 {
		return fmt.Errorf("field 'TotalAmount' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *PaymentsPaymentReceipt) CRC() uint32 {
	return uint32(0x500911e1)
}

func (e *PaymentsPaymentReceipt) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Info) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Shipping) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.CredentialsTitle)
	buf.PutString(e.Currency)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Info) {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutRawBytes(e.Invoice.Encode())
	buf.PutInt(e.ProviderId)
	if !zero.IsZeroVal(e.Shipping) {
		buf.PutRawBytes(e.Shipping.Encode())
	}
	buf.PutLong(e.TotalAmount)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PaymentsPaymentReceipt) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Info.Validate() == nil {
		flag |= 1 << 0
	}
	if e.Shipping.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.CredentialsTitle)
	buf.PutString(e.Currency)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.Info.Validate() == nil {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutRawBytes(e.Invoice.Encode())
	buf.PutInt(e.ProviderId)
	if e.Shipping.Validate() == nil {
		buf.PutRawBytes(e.Shipping.Encode())
	}
	buf.PutLong(e.TotalAmount)
	buf.PutVector(e.Users)
	return buf.Result()
}

type PaymentsSavedInfo struct {
	__flagsPosition     struct{}              // flags param position `validate:"required"`
	HasSavedCredentials bool                  `flag:"1,encoded_in_bitflags"`
	SavedInfo           *PaymentRequestedInfo `flag:"0"`
}

func (e *PaymentsSavedInfo) Validate() error {

	return nil
}

func (e *PaymentsSavedInfo) CRC() uint32 {
	return uint32(0xfb8fe43c)
}

func (e *PaymentsSavedInfo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SavedInfo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.HasSavedCredentials) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.SavedInfo) {
		buf.PutRawBytes(e.SavedInfo.Encode())
	}
	return buf.Result()
}

func (e *PaymentsSavedInfo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SavedInfo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.HasSavedCredentials != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.SavedInfo.Validate() == nil {
		buf.PutRawBytes(e.SavedInfo.Encode())
	}
	return buf.Result()
}

type PaymentsValidatedRequestedInfo struct {
	__flagsPosition struct{}          // flags param position `validate:"required"`
	Id              string            `flag:"0"`
	ShippingOptions []*ShippingOption `flag:"1"`
}

func (e *PaymentsValidatedRequestedInfo) Validate() error {

	return nil
}

func (e *PaymentsValidatedRequestedInfo) CRC() uint32 {
	return uint32(0xd1451883)
}

func (e *PaymentsValidatedRequestedInfo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Id) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingOptions) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Id) {
		buf.PutString(e.Id)
	}
	if !zero.IsZeroVal(e.ShippingOptions) {
		buf.PutVector(e.ShippingOptions)
	}
	return buf.Result()
}

func (e *PaymentsValidatedRequestedInfo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Id != "" {
		flag |= 1 << 0
	}
	if len(e.ShippingOptions) > 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Id != "" {
		buf.PutString(e.Id)
	}
	if len(e.ShippingOptions) > 0 {
		buf.PutVector(e.ShippingOptions)
	}
	return buf.Result()
}

type PeerNotifySettings struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	MuteUntil       int32    `flag:"2"`
	ShowPreviews    bool     `flag:"0"`
	Silent          bool     `flag:"1"`
	Sound           string   `flag:"3"`
}

func (e *PeerNotifySettings) Validate() error {

	return nil
}

func (e *PeerNotifySettings) CRC() uint32 {
	return uint32(0xaf509d20)
}

func (e *PeerNotifySettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ShowPreviews) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.MuteUntil) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Sound) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MuteUntil) {
		buf.PutInt(e.MuteUntil)
	}
	if !zero.IsZeroVal(e.ShowPreviews) {
		buf.PutBool(e.ShowPreviews)
	}
	if !zero.IsZeroVal(e.Silent) {
		buf.PutBool(e.Silent)
	}
	if !zero.IsZeroVal(e.Sound) {
		buf.PutString(e.Sound)
	}
	return buf.Result()
}

func (e *PeerNotifySettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ShowPreviews != false {
		flag |= 1 << 0
	}
	if e.Silent != false {
		flag |= 1 << 1
	}
	if e.MuteUntil != 0 {
		flag |= 1 << 2
	}
	if e.Sound != "" {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.MuteUntil != 0 {
		buf.PutInt(e.MuteUntil)
	}
	if e.ShowPreviews != false {
		buf.PutBool(e.ShowPreviews)
	}
	if e.Silent != false {
		buf.PutBool(e.Silent)
	}
	if e.Sound != "" {
		buf.PutString(e.Sound)
	}
	return buf.Result()
}

type PeerSettings struct {
	AddContact            bool     `flag:"1,encoded_in_bitflags"`
	Autoarchived          bool     `flag:"7,encoded_in_bitflags"`
	BlockContact          bool     `flag:"2,encoded_in_bitflags"`
	__flagsPosition       struct{} // flags param position `validate:"required"`
	GeoDistance           int32    `flag:"6"`
	NeedContactsException bool     `flag:"4,encoded_in_bitflags"`
	ReportGeo             bool     `flag:"5,encoded_in_bitflags"`
	ReportSpam            bool     `flag:"0,encoded_in_bitflags"`
	ShareContact          bool     `flag:"3,encoded_in_bitflags"`
}

func (e *PeerSettings) Validate() error {

	return nil
}

func (e *PeerSettings) CRC() uint32 {
	return uint32(0x733f2961)
}

func (e *PeerSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReportSpam) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.AddContact) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.BlockContact) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.ShareContact) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.NeedContactsException) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.ReportGeo) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.GeoDistance) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Autoarchived) {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.GeoDistance) {
		buf.PutInt(e.GeoDistance)
	}
	return buf.Result()
}

func (e *PeerSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReportSpam != false {
		flag |= 1 << 0
	}
	if e.AddContact != false {
		flag |= 1 << 1
	}
	if e.BlockContact != false {
		flag |= 1 << 2
	}
	if e.ShareContact != false {
		flag |= 1 << 3
	}
	if e.NeedContactsException != false {
		flag |= 1 << 4
	}
	if e.ReportGeo != false {
		flag |= 1 << 5
	}
	if e.GeoDistance != 0 {
		flag |= 1 << 6
	}
	if e.Autoarchived != false {
		flag |= 1 << 7
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.GeoDistance != 0 {
		buf.PutInt(e.GeoDistance)
	}
	return buf.Result()
}

type PhonePhoneCall struct {
	PhoneCall PhoneCall `validate:"required"`
	Users     []User    `validate:"required"`
}

func (e *PhonePhoneCall) Validate() error {
	if err := e.PhoneCall.Validate(); err != nil {
		return fmt.Errorf("field 'PhoneCall': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *PhonePhoneCall) CRC() uint32 {
	return uint32(0xec82e140)
}

func (e *PhonePhoneCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PhoneCall.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PhonePhoneCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PhoneCall.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type PhoneCallProtocol struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	LibraryVersions []string `validate:"required"`
	MaxLayer        int32    `validate:"required"`
	MinLayer        int32    `validate:"required"`
	UdpP2P          bool     `flag:"0,encoded_in_bitflags"`
	UdpReflector    bool     `flag:"1,encoded_in_bitflags"`
}

func (e *PhoneCallProtocol) Validate() error {

	if len(e.LibraryVersions) == 0 {
		return fmt.Errorf("field 'LibraryVersions' is not set")
	} // slice_len_check
	for _, item := range e.LibraryVersions {
		if item == "" {
			return fmt.Errorf("field 'LibraryVersions' is not set")
		} // builtin_check
	} // subitem_check

	if e.MaxLayer == 0 {
		return fmt.Errorf("field 'MaxLayer' is not set")
	} // builtin_check

	if e.MinLayer == 0 {
		return fmt.Errorf("field 'MinLayer' is not set")
	} // builtin_check

	return nil
}

func (e *PhoneCallProtocol) CRC() uint32 {
	return uint32(0xfc878fc8)
}

func (e *PhoneCallProtocol) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.UdpP2P) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.UdpReflector) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.LibraryVersions)
	buf.PutInt(e.MaxLayer)
	buf.PutInt(e.MinLayer)
	return buf.Result()
}

func (e *PhoneCallProtocol) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.UdpP2P != false {
		flag |= 1 << 0
	}
	if e.UdpReflector != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.LibraryVersions)
	buf.PutInt(e.MaxLayer)
	buf.PutInt(e.MinLayer)
	return buf.Result()
}

type PhotosPhoto struct {
	Photo Photo  `validate:"required"`
	Users []User `validate:"required"`
}

func (e *PhotosPhoto) Validate() error {
	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *PhotosPhoto) CRC() uint32 {
	return uint32(0x20212ca8)
}

func (e *PhotosPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PhotosPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type Poll struct {
	Answers         []*PollAnswer `validate:"required"`
	CloseDate       int32         `flag:"5"`
	ClosePeriod     int32         `flag:"4"`
	Closed          bool          `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Id              int64         `validate:"required"`
	MultipleChoice  bool          `flag:"2,encoded_in_bitflags"`
	PublicVoters    bool          `flag:"1,encoded_in_bitflags"`
	Question        string        `validate:"required"`
	Quiz            bool          `flag:"3,encoded_in_bitflags"`
}

func (e *Poll) Validate() error {
	if len(e.Answers) == 0 {
		return fmt.Errorf("field 'Answers' is not set")
	} // slice_len_check
	for _, item := range e.Answers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Answers': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Question == "" {
		return fmt.Errorf("field 'Question' is not set")
	} // builtin_check

	return nil
}

func (e *Poll) CRC() uint32 {
	return uint32(0x86e18161)
}

func (e *Poll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Closed) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.PublicVoters) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.MultipleChoice) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Quiz) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.ClosePeriod) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.CloseDate) {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Answers)
	if !zero.IsZeroVal(e.CloseDate) {
		buf.PutInt(e.CloseDate)
	}
	if !zero.IsZeroVal(e.ClosePeriod) {
		buf.PutInt(e.ClosePeriod)
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.Question)
	return buf.Result()
}

func (e *Poll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Closed != false {
		flag |= 1 << 0
	}
	if e.PublicVoters != false {
		flag |= 1 << 1
	}
	if e.MultipleChoice != false {
		flag |= 1 << 2
	}
	if e.Quiz != false {
		flag |= 1 << 3
	}
	if e.ClosePeriod != 0 {
		flag |= 1 << 4
	}
	if e.CloseDate != 0 {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Answers)
	if e.CloseDate != 0 {
		buf.PutInt(e.CloseDate)
	}
	if e.ClosePeriod != 0 {
		buf.PutInt(e.ClosePeriod)
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.Question)
	return buf.Result()
}

type PollAnswer struct {
	Option []byte `validate:"required"`
	Text   string `validate:"required"`
}

func (e *PollAnswer) Validate() error {
	if len(e.Option) == 0 {
		return fmt.Errorf("field 'Option' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (e *PollAnswer) CRC() uint32 {
	return uint32(0x6ca9c2e9)
}

func (e *PollAnswer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Option)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *PollAnswer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Option)
	buf.PutString(e.Text)
	return buf.Result()
}

type PollAnswerVoters struct {
	Chosen          bool     `flag:"0,encoded_in_bitflags"`
	Correct         bool     `flag:"1,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Option          []byte   `validate:"required"`
	Voters          int32    `validate:"required"`
}

func (e *PollAnswerVoters) Validate() error {

	if len(e.Option) == 0 {
		return fmt.Errorf("field 'Option' is not set")
	} // byte_slice_check

	if e.Voters == 0 {
		return fmt.Errorf("field 'Voters' is not set")
	} // builtin_check

	return nil
}

func (e *PollAnswerVoters) CRC() uint32 {
	return uint32(0x3b6ddad2)
}

func (e *PollAnswerVoters) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Chosen) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Correct) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutMessage(e.Option)
	buf.PutInt(e.Voters)
	return buf.Result()
}

func (e *PollAnswerVoters) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Chosen != false {
		flag |= 1 << 0
	}
	if e.Correct != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutMessage(e.Option)
	buf.PutInt(e.Voters)
	return buf.Result()
}

type PollResults struct {
	__flagsPosition  struct{}            // flags param position `validate:"required"`
	Min              bool                `flag:"0,encoded_in_bitflags"`
	RecentVoters     []int32             `flag:"3"`
	Results          []*PollAnswerVoters `flag:"1"`
	Solution         string              `flag:"4"`
	SolutionEntities []MessageEntity     `flag:"4"`
	TotalVoters      int32               `flag:"2"`
}

func (e *PollResults) Validate() error {

	return nil
}

func (e *PollResults) CRC() uint32 {
	return uint32(0xbadcc1a3)
}

func (e *PollResults) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Min) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Results) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.TotalVoters) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.RecentVoters) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Solution) || !zero.IsZeroVal(e.SolutionEntities) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.RecentVoters) {
		buf.PutVector(e.RecentVoters)
	}
	if !zero.IsZeroVal(e.Results) {
		buf.PutVector(e.Results)
	}
	if !zero.IsZeroVal(e.Solution) {
		buf.PutString(e.Solution)
	}
	if !zero.IsZeroVal(e.SolutionEntities) {
		buf.PutVector(e.SolutionEntities)
	}
	if !zero.IsZeroVal(e.TotalVoters) {
		buf.PutInt(e.TotalVoters)
	}
	return buf.Result()
}

func (e *PollResults) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Min != false {
		flag |= 1 << 0
	}
	if len(e.Results) > 0 {
		flag |= 1 << 1
	}
	if e.TotalVoters != 0 {
		flag |= 1 << 2
	}
	if len(e.RecentVoters) > 0 {
		flag |= 1 << 3
	}
	if e.Solution != "" || len(e.SolutionEntities) > 0 {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if len(e.RecentVoters) > 0 {
		buf.PutVector(e.RecentVoters)
	}
	if len(e.Results) > 0 {
		buf.PutVector(e.Results)
	}
	if e.Solution != "" {
		buf.PutString(e.Solution)
	}
	if len(e.SolutionEntities) > 0 {
		buf.PutVector(e.SolutionEntities)
	}
	if e.TotalVoters != 0 {
		buf.PutInt(e.TotalVoters)
	}
	return buf.Result()
}

type PopularContact struct {
	ClientId  int64 `validate:"required"`
	Importers int32 `validate:"required"`
}

func (e *PopularContact) Validate() error {
	if e.ClientId == 0 {
		return fmt.Errorf("field 'ClientId' is not set")
	} // builtin_check

	if e.Importers == 0 {
		return fmt.Errorf("field 'Importers' is not set")
	} // builtin_check

	return nil
}

func (e *PopularContact) CRC() uint32 {
	return uint32(0x5ce14175)
}

func (e *PopularContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutInt(e.Importers)
	return buf.Result()
}

func (e *PopularContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ClientId)
	buf.PutInt(e.Importers)
	return buf.Result()
}

type PostAddress struct {
	City        string `validate:"required"`
	CountryIso2 string `validate:"required"`
	PostCode    string `validate:"required"`
	State       string `validate:"required"`
	StreetLine1 string `validate:"required"`
	StreetLine2 string `validate:"required"`
}

func (e *PostAddress) Validate() error {
	if e.City == "" {
		return fmt.Errorf("field 'City' is not set")
	} // builtin_check

	if e.CountryIso2 == "" {
		return fmt.Errorf("field 'CountryIso2' is not set")
	} // builtin_check

	if e.PostCode == "" {
		return fmt.Errorf("field 'PostCode' is not set")
	} // builtin_check

	if e.State == "" {
		return fmt.Errorf("field 'State' is not set")
	} // builtin_check

	if e.StreetLine1 == "" {
		return fmt.Errorf("field 'StreetLine1' is not set")
	} // builtin_check

	if e.StreetLine2 == "" {
		return fmt.Errorf("field 'StreetLine2' is not set")
	} // builtin_check

	return nil
}

func (e *PostAddress) CRC() uint32 {
	return uint32(0x1e8caaeb)
}

func (e *PostAddress) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.City)
	buf.PutString(e.CountryIso2)
	buf.PutString(e.PostCode)
	buf.PutString(e.State)
	buf.PutString(e.StreetLine1)
	buf.PutString(e.StreetLine2)
	return buf.Result()
}

func (e *PostAddress) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.City)
	buf.PutString(e.CountryIso2)
	buf.PutString(e.PostCode)
	buf.PutString(e.State)
	buf.PutString(e.StreetLine1)
	buf.PutString(e.StreetLine2)
	return buf.Result()
}

type ReceivedNotifyMessage struct {
	Flags int32 `validate:"required"`
	Id    int32 `validate:"required"`
}

func (e *ReceivedNotifyMessage) Validate() error {
	if e.Flags == 0 {
		return fmt.Errorf("field 'Flags' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (e *ReceivedNotifyMessage) CRC() uint32 {
	return uint32(0xa384b779)
}

func (e *ReceivedNotifyMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Flags)
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *ReceivedNotifyMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Flags)
	buf.PutInt(e.Id)
	return buf.Result()
}

type RestrictionReason struct {
	Platform string `validate:"required"`
	Reason   string `validate:"required"`
	Text     string `validate:"required"`
}

func (e *RestrictionReason) Validate() error {
	if e.Platform == "" {
		return fmt.Errorf("field 'Platform' is not set")
	} // builtin_check

	if e.Reason == "" {
		return fmt.Errorf("field 'Reason' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (e *RestrictionReason) CRC() uint32 {
	return uint32(0xd072acb4)
}

func (e *RestrictionReason) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Platform)
	buf.PutString(e.Reason)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *RestrictionReason) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Platform)
	buf.PutString(e.Reason)
	buf.PutString(e.Text)
	return buf.Result()
}

type SavedContact struct {
	Date      int32  `validate:"required"`
	FirstName string `validate:"required"`
	LastName  string `validate:"required"`
	Phone     string `validate:"required"`
}

func (e *SavedContact) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.Phone == "" {
		return fmt.Errorf("field 'Phone' is not set")
	} // builtin_check

	return nil
}

func (e *SavedContact) CRC() uint32 {
	return uint32(0x1142bd56)
}

func (e *SavedContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.Phone)
	return buf.Result()
}

func (e *SavedContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.Phone)
	return buf.Result()
}

type SecureCredentialsEncrypted struct {
	Data   []byte `validate:"required"`
	Hash   []byte `validate:"required"`
	Secret []byte `validate:"required"`
}

func (e *SecureCredentialsEncrypted) Validate() error {
	if len(e.Data) == 0 {
		return fmt.Errorf("field 'Data' is not set")
	} // byte_slice_check

	if len(e.Hash) == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // byte_slice_check

	if len(e.Secret) == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // byte_slice_check

	return nil
}

func (e *SecureCredentialsEncrypted) CRC() uint32 {
	return uint32(0x33f0ea47)
}

func (e *SecureCredentialsEncrypted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutMessage(e.Hash)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

func (e *SecureCredentialsEncrypted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutMessage(e.Hash)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

type SecureData struct {
	Data     []byte `validate:"required"`
	DataHash []byte `validate:"required"`
	Secret   []byte `validate:"required"`
}

func (e *SecureData) Validate() error {
	if len(e.Data) == 0 {
		return fmt.Errorf("field 'Data' is not set")
	} // byte_slice_check

	if len(e.DataHash) == 0 {
		return fmt.Errorf("field 'DataHash' is not set")
	} // byte_slice_check

	if len(e.Secret) == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // byte_slice_check

	return nil
}

func (e *SecureData) CRC() uint32 {
	return uint32(0x8aeabec3)
}

func (e *SecureData) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutMessage(e.DataHash)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

func (e *SecureData) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutMessage(e.DataHash)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

type SecureSecretSettings struct {
	SecureAlgo     SecurePasswordKdfAlgo `validate:"required"`
	SecureSecret   []byte                `validate:"required"`
	SecureSecretId int64                 `validate:"required"`
}

func (e *SecureSecretSettings) Validate() error {
	if err := e.SecureAlgo.Validate(); err != nil {
		return fmt.Errorf("field 'SecureAlgo': %w", err)
	} // type_iter_check

	if len(e.SecureSecret) == 0 {
		return fmt.Errorf("field 'SecureSecret' is not set")
	} // byte_slice_check

	if e.SecureSecretId == 0 {
		return fmt.Errorf("field 'SecureSecretId' is not set")
	} // builtin_check

	return nil
}

func (e *SecureSecretSettings) CRC() uint32 {
	return uint32(0x1527bcac)
}

func (e *SecureSecretSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.SecureAlgo.Encode())
	buf.PutMessage(e.SecureSecret)
	buf.PutLong(e.SecureSecretId)
	return buf.Result()
}

func (e *SecureSecretSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.SecureAlgo.Encode())
	buf.PutMessage(e.SecureSecret)
	buf.PutLong(e.SecureSecretId)
	return buf.Result()
}

type SecureValue struct {
	Data            *SecureData     `flag:"0"`
	Files           []SecureFile    `flag:"4"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	FrontSide       SecureFile      `flag:"1"`
	Hash            []byte          `validate:"required"`
	PlainData       SecurePlainData `flag:"5"`
	ReverseSide     SecureFile      `flag:"2"`
	Selfie          SecureFile      `flag:"3"`
	Translation     []SecureFile    `flag:"6"`
	Type            SecureValueType `validate:"required"`
}

func (e *SecureValue) Validate() error {

	if len(e.Hash) == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // byte_slice_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (e *SecureValue) CRC() uint32 {
	return uint32(0x187fa0ca)
}

func (e *SecureValue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Data) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FrontSide) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReverseSide) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Selfie) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Files) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.PlainData) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Translation) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Data) {
		buf.PutRawBytes(e.Data.Encode())
	}
	if !zero.IsZeroVal(e.Files) {
		buf.PutVector(e.Files)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FrontSide) {
		buf.PutRawBytes(e.FrontSide.Encode())
	}
	buf.PutMessage(e.Hash)
	if !zero.IsZeroVal(e.PlainData) {
		buf.PutRawBytes(e.PlainData.Encode())
	}
	if !zero.IsZeroVal(e.ReverseSide) {
		buf.PutRawBytes(e.ReverseSide.Encode())
	}
	if !zero.IsZeroVal(e.Selfie) {
		buf.PutRawBytes(e.Selfie.Encode())
	}
	if !zero.IsZeroVal(e.Translation) {
		buf.PutVector(e.Translation)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Data.Validate() == nil {
		flag |= 1 << 0
	}
	if e.FrontSide.Validate() == nil {
		flag |= 1 << 1
	}
	if e.ReverseSide.Validate() == nil {
		flag |= 1 << 2
	}
	if e.Selfie.Validate() == nil {
		flag |= 1 << 3
	}
	if len(e.Files) > 0 {
		flag |= 1 << 4
	}
	if e.PlainData.Validate() == nil {
		flag |= 1 << 5
	}
	if len(e.Translation) > 0 {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Data.Validate() == nil {
		buf.PutRawBytes(e.Data.Encode())
	}
	if len(e.Files) > 0 {
		buf.PutVector(e.Files)
	}
	buf.PutUint(flag)
	if e.FrontSide.Validate() == nil {
		buf.PutRawBytes(e.FrontSide.Encode())
	}
	buf.PutMessage(e.Hash)
	if e.PlainData.Validate() == nil {
		buf.PutRawBytes(e.PlainData.Encode())
	}
	if e.ReverseSide.Validate() == nil {
		buf.PutRawBytes(e.ReverseSide.Encode())
	}
	if e.Selfie.Validate() == nil {
		buf.PutRawBytes(e.Selfie.Encode())
	}
	if len(e.Translation) > 0 {
		buf.PutVector(e.Translation)
	}
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueHash struct {
	Hash []byte          `validate:"required"`
	Type SecureValueType `validate:"required"`
}

func (e *SecureValueHash) Validate() error {
	if len(e.Hash) == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // byte_slice_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (e *SecureValueHash) CRC() uint32 {
	return uint32(0xed1ecdb0)
}

func (e *SecureValueHash) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueHash) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type ShippingOption struct {
	Id     string          `validate:"required"`
	Prices []*LabeledPrice `validate:"required"`
	Title  string          `validate:"required"`
}

func (e *ShippingOption) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if len(e.Prices) == 0 {
		return fmt.Errorf("field 'Prices' is not set")
	} // slice_len_check
	for _, item := range e.Prices {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Prices': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *ShippingOption) CRC() uint32 {
	return uint32(0xb6213cdf)
}

func (e *ShippingOption) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutVector(e.Prices)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *ShippingOption) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutVector(e.Prices)
	buf.PutString(e.Title)
	return buf.Result()
}

type StatsBroadcastStats struct {
	EnabledNotifications      *StatsPercentValue            `validate:"required"`
	Followers                 *StatsAbsValueAndPrev         `validate:"required"`
	FollowersGraph            StatsGraph                    `validate:"required"`
	GrowthGraph               StatsGraph                    `validate:"required"`
	InteractionsGraph         StatsGraph                    `validate:"required"`
	IvInteractionsGraph       StatsGraph                    `validate:"required"`
	LanguagesGraph            StatsGraph                    `validate:"required"`
	MuteGraph                 StatsGraph                    `validate:"required"`
	NewFollowersBySourceGraph StatsGraph                    `validate:"required"`
	Period                    *StatsDateRangeDays           `validate:"required"`
	RecentMessageInteractions []*MessageInteractionCounters `validate:"required"`
	SharesPerPost             *StatsAbsValueAndPrev         `validate:"required"`
	TopHoursGraph             StatsGraph                    `validate:"required"`
	ViewsBySourceGraph        StatsGraph                    `validate:"required"`
	ViewsPerPost              *StatsAbsValueAndPrev         `validate:"required"`
}

func (e *StatsBroadcastStats) Validate() error {
	if err := e.EnabledNotifications.Validate(); err != nil {
		return fmt.Errorf("field 'EnabledNotifications': %w", err)
	} // type_iter_check

	if err := e.Followers.Validate(); err != nil {
		return fmt.Errorf("field 'Followers': %w", err)
	} // type_iter_check

	if err := e.FollowersGraph.Validate(); err != nil {
		return fmt.Errorf("field 'FollowersGraph': %w", err)
	} // type_iter_check

	if err := e.GrowthGraph.Validate(); err != nil {
		return fmt.Errorf("field 'GrowthGraph': %w", err)
	} // type_iter_check

	if err := e.InteractionsGraph.Validate(); err != nil {
		return fmt.Errorf("field 'InteractionsGraph': %w", err)
	} // type_iter_check

	if err := e.IvInteractionsGraph.Validate(); err != nil {
		return fmt.Errorf("field 'IvInteractionsGraph': %w", err)
	} // type_iter_check

	if err := e.LanguagesGraph.Validate(); err != nil {
		return fmt.Errorf("field 'LanguagesGraph': %w", err)
	} // type_iter_check

	if err := e.MuteGraph.Validate(); err != nil {
		return fmt.Errorf("field 'MuteGraph': %w", err)
	} // type_iter_check

	if err := e.NewFollowersBySourceGraph.Validate(); err != nil {
		return fmt.Errorf("field 'NewFollowersBySourceGraph': %w", err)
	} // type_iter_check

	return nil
}

func (e *StatsBroadcastStats) CRC() uint32 {
	return uint32(0xbdf78394)
}

func (e *StatsBroadcastStats) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.EnabledNotifications.Encode())
	buf.PutRawBytes(e.Followers.Encode())
	buf.PutRawBytes(e.FollowersGraph.Encode())
	buf.PutRawBytes(e.GrowthGraph.Encode())
	buf.PutRawBytes(e.InteractionsGraph.Encode())
	buf.PutRawBytes(e.IvInteractionsGraph.Encode())
	buf.PutRawBytes(e.LanguagesGraph.Encode())
	buf.PutRawBytes(e.MuteGraph.Encode())
	buf.PutRawBytes(e.NewFollowersBySourceGraph.Encode())
	buf.PutRawBytes(e.Period.Encode())
	buf.PutVector(e.RecentMessageInteractions)
	buf.PutRawBytes(e.SharesPerPost.Encode())
	buf.PutRawBytes(e.TopHoursGraph.Encode())
	buf.PutRawBytes(e.ViewsBySourceGraph.Encode())
	buf.PutRawBytes(e.ViewsPerPost.Encode())
	return buf.Result()
}

func (e *StatsBroadcastStats) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.EnabledNotifications.Encode())
	buf.PutRawBytes(e.Followers.Encode())
	buf.PutRawBytes(e.FollowersGraph.Encode())
	buf.PutRawBytes(e.GrowthGraph.Encode())
	buf.PutRawBytes(e.InteractionsGraph.Encode())
	buf.PutRawBytes(e.IvInteractionsGraph.Encode())
	buf.PutRawBytes(e.LanguagesGraph.Encode())
	buf.PutRawBytes(e.MuteGraph.Encode())
	buf.PutRawBytes(e.NewFollowersBySourceGraph.Encode())
	buf.PutRawBytes(e.Period.Encode())
	buf.PutVector(e.RecentMessageInteractions)
	buf.PutRawBytes(e.SharesPerPost.Encode())
	buf.PutRawBytes(e.TopHoursGraph.Encode())
	buf.PutRawBytes(e.ViewsBySourceGraph.Encode())
	buf.PutRawBytes(e.ViewsPerPost.Encode())
	return buf.Result()
}

type StatsMegagroupStats struct {
	ActionsGraph            StatsGraph              `validate:"required"`
	GrowthGraph             StatsGraph              `validate:"required"`
	LanguagesGraph          StatsGraph              `validate:"required"`
	Members                 *StatsAbsValueAndPrev   `validate:"required"`
	MembersGraph            StatsGraph              `validate:"required"`
	Messages                *StatsAbsValueAndPrev   `validate:"required"`
	MessagesGraph           StatsGraph              `validate:"required"`
	NewMembersBySourceGraph StatsGraph              `validate:"required"`
	Period                  *StatsDateRangeDays     `validate:"required"`
	Posters                 *StatsAbsValueAndPrev   `validate:"required"`
	TopAdmins               []*StatsGroupTopAdmin   `validate:"required"`
	TopHoursGraph           StatsGraph              `validate:"required"`
	TopInviters             []*StatsGroupTopInviter `validate:"required"`
	TopPosters              []*StatsGroupTopPoster  `validate:"required"`
	Users                   []User                  `validate:"required"`
	Viewers                 *StatsAbsValueAndPrev   `validate:"required"`
	WeekdaysGraph           StatsGraph              `validate:"required"`
}

func (e *StatsMegagroupStats) Validate() error {
	if err := e.ActionsGraph.Validate(); err != nil {
		return fmt.Errorf("field 'ActionsGraph': %w", err)
	} // type_iter_check

	if err := e.GrowthGraph.Validate(); err != nil {
		return fmt.Errorf("field 'GrowthGraph': %w", err)
	} // type_iter_check

	if err := e.LanguagesGraph.Validate(); err != nil {
		return fmt.Errorf("field 'LanguagesGraph': %w", err)
	} // type_iter_check

	if err := e.Members.Validate(); err != nil {
		return fmt.Errorf("field 'Members': %w", err)
	} // type_iter_check

	if err := e.MembersGraph.Validate(); err != nil {
		return fmt.Errorf("field 'MembersGraph': %w", err)
	} // type_iter_check

	if err := e.Messages.Validate(); err != nil {
		return fmt.Errorf("field 'Messages': %w", err)
	} // type_iter_check

	if err := e.MessagesGraph.Validate(); err != nil {
		return fmt.Errorf("field 'MessagesGraph': %w", err)
	} // type_iter_check

	if err := e.NewMembersBySourceGraph.Validate(); err != nil {
		return fmt.Errorf("field 'NewMembersBySourceGraph': %w", err)
	} // type_iter_check

	if err := e.Period.Validate(); err != nil {
		return fmt.Errorf("field 'Period': %w", err)
	} // type_iter_check

	return nil
}

func (e *StatsMegagroupStats) CRC() uint32 {
	return uint32(0xef7ff916)
}

func (e *StatsMegagroupStats) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.ActionsGraph.Encode())
	buf.PutRawBytes(e.GrowthGraph.Encode())
	buf.PutRawBytes(e.LanguagesGraph.Encode())
	buf.PutRawBytes(e.Members.Encode())
	buf.PutRawBytes(e.MembersGraph.Encode())
	buf.PutRawBytes(e.Messages.Encode())
	buf.PutRawBytes(e.MessagesGraph.Encode())
	buf.PutRawBytes(e.NewMembersBySourceGraph.Encode())
	buf.PutRawBytes(e.Period.Encode())
	buf.PutRawBytes(e.Posters.Encode())
	buf.PutVector(e.TopAdmins)
	buf.PutRawBytes(e.TopHoursGraph.Encode())
	buf.PutVector(e.TopInviters)
	buf.PutVector(e.TopPosters)
	buf.PutVector(e.Users)
	buf.PutRawBytes(e.Viewers.Encode())
	buf.PutRawBytes(e.WeekdaysGraph.Encode())
	return buf.Result()
}

func (e *StatsMegagroupStats) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.ActionsGraph.Encode())
	buf.PutRawBytes(e.GrowthGraph.Encode())
	buf.PutRawBytes(e.LanguagesGraph.Encode())
	buf.PutRawBytes(e.Members.Encode())
	buf.PutRawBytes(e.MembersGraph.Encode())
	buf.PutRawBytes(e.Messages.Encode())
	buf.PutRawBytes(e.MessagesGraph.Encode())
	buf.PutRawBytes(e.NewMembersBySourceGraph.Encode())
	buf.PutRawBytes(e.Period.Encode())
	buf.PutRawBytes(e.Posters.Encode())
	buf.PutVector(e.TopAdmins)
	buf.PutRawBytes(e.TopHoursGraph.Encode())
	buf.PutVector(e.TopInviters)
	buf.PutVector(e.TopPosters)
	buf.PutVector(e.Users)
	buf.PutRawBytes(e.Viewers.Encode())
	buf.PutRawBytes(e.WeekdaysGraph.Encode())
	return buf.Result()
}

type StatsAbsValueAndPrev struct {
	Current  float64 `validate:"required"`
	Previous float64 `validate:"required"`
}

func (e *StatsAbsValueAndPrev) Validate() error {
	if e.Current == 0 {
		return fmt.Errorf("field 'Current' is not set")
	} // builtin_check

	if e.Previous == 0 {
		return fmt.Errorf("field 'Previous' is not set")
	} // builtin_check

	return nil
}

func (e *StatsAbsValueAndPrev) CRC() uint32 {
	return uint32(0xcb43acde)
}

func (e *StatsAbsValueAndPrev) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Current)
	buf.PutDouble(e.Previous)
	return buf.Result()
}

func (e *StatsAbsValueAndPrev) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Current)
	buf.PutDouble(e.Previous)
	return buf.Result()
}

type StatsDateRangeDays struct {
	MaxDate int32 `validate:"required"`
	MinDate int32 `validate:"required"`
}

func (e *StatsDateRangeDays) Validate() error {
	if e.MaxDate == 0 {
		return fmt.Errorf("field 'MaxDate' is not set")
	} // builtin_check

	if e.MinDate == 0 {
		return fmt.Errorf("field 'MinDate' is not set")
	} // builtin_check

	return nil
}

func (e *StatsDateRangeDays) CRC() uint32 {
	return uint32(0xb637edaf)
}

func (e *StatsDateRangeDays) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxDate)
	buf.PutInt(e.MinDate)
	return buf.Result()
}

func (e *StatsDateRangeDays) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxDate)
	buf.PutInt(e.MinDate)
	return buf.Result()
}

type StatsGroupTopAdmin struct {
	Banned  int32 `validate:"required"`
	Deleted int32 `validate:"required"`
	Kicked  int32 `validate:"required"`
	UserId  int32 `validate:"required"`
}

func (e *StatsGroupTopAdmin) Validate() error {
	if e.Banned == 0 {
		return fmt.Errorf("field 'Banned' is not set")
	} // builtin_check

	if e.Deleted == 0 {
		return fmt.Errorf("field 'Deleted' is not set")
	} // builtin_check

	if e.Kicked == 0 {
		return fmt.Errorf("field 'Kicked' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *StatsGroupTopAdmin) CRC() uint32 {
	return uint32(0x6014f412)
}

func (e *StatsGroupTopAdmin) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Banned)
	buf.PutInt(e.Deleted)
	buf.PutInt(e.Kicked)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *StatsGroupTopAdmin) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Banned)
	buf.PutInt(e.Deleted)
	buf.PutInt(e.Kicked)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type StatsGroupTopInviter struct {
	Invitations int32 `validate:"required"`
	UserId      int32 `validate:"required"`
}

func (e *StatsGroupTopInviter) Validate() error {
	if e.Invitations == 0 {
		return fmt.Errorf("field 'Invitations' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *StatsGroupTopInviter) CRC() uint32 {
	return uint32(0x31962a4c)
}

func (e *StatsGroupTopInviter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Invitations)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *StatsGroupTopInviter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Invitations)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type StatsGroupTopPoster struct {
	AvgChars int32 `validate:"required"`
	Messages int32 `validate:"required"`
	UserId   int32 `validate:"required"`
}

func (e *StatsGroupTopPoster) Validate() error {
	if e.AvgChars == 0 {
		return fmt.Errorf("field 'AvgChars' is not set")
	} // builtin_check

	if e.Messages == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (e *StatsGroupTopPoster) CRC() uint32 {
	return uint32(0x18f3d0f7)
}

func (e *StatsGroupTopPoster) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AvgChars)
	buf.PutInt(e.Messages)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *StatsGroupTopPoster) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AvgChars)
	buf.PutInt(e.Messages)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type StatsPercentValue struct {
	Part  float64 `validate:"required"`
	Total float64 `validate:"required"`
}

func (e *StatsPercentValue) Validate() error {
	if e.Part == 0 {
		return fmt.Errorf("field 'Part' is not set")
	} // builtin_check

	if e.Total == 0 {
		return fmt.Errorf("field 'Total' is not set")
	} // builtin_check

	return nil
}

func (e *StatsPercentValue) CRC() uint32 {
	return uint32(0xcbce2fe0)
}

func (e *StatsPercentValue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Part)
	buf.PutDouble(e.Total)
	return buf.Result()
}

func (e *StatsPercentValue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Part)
	buf.PutDouble(e.Total)
	return buf.Result()
}

type StatsURL struct {
	Url string `validate:"required"`
}

func (e *StatsURL) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (e *StatsURL) CRC() uint32 {
	return uint32(0x47a971e0)
}

func (e *StatsURL) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *StatsURL) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

type StickerPack struct {
	Documents []int64 `validate:"required"`
	Emoticon  string  `validate:"required"`
}

func (e *StickerPack) Validate() error {
	if len(e.Documents) == 0 {
		return fmt.Errorf("field 'Documents' is not set")
	} // slice_len_check
	for _, item := range e.Documents {
		if item == 0 {
			return fmt.Errorf("field 'Documents' is not set")
		} // builtin_check
	} // subitem_check

	if e.Emoticon == "" {
		return fmt.Errorf("field 'Emoticon' is not set")
	} // builtin_check

	return nil
}

func (e *StickerPack) CRC() uint32 {
	return uint32(0x12b299d4)
}

func (e *StickerPack) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Documents)
	buf.PutString(e.Emoticon)
	return buf.Result()
}

func (e *StickerPack) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Documents)
	buf.PutString(e.Emoticon)
	return buf.Result()
}

type StickerSet struct {
	AccessHash      int64     `validate:"required"`
	Animated        bool      `flag:"5,encoded_in_bitflags"`
	Archived        bool      `flag:"1,encoded_in_bitflags"`
	Count           int32     `validate:"required"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Hash            int32     `validate:"required"`
	Id              int64     `validate:"required"`
	InstalledDate   int32     `flag:"0"`
	Masks           bool      `flag:"3,encoded_in_bitflags"`
	Official        bool      `flag:"2,encoded_in_bitflags"`
	ShortName       string    `validate:"required"`
	Thumb           PhotoSize `flag:"4"`
	ThumbDcId       int32     `flag:"4"`
	Title           string    `validate:"required"`
}

func (e *StickerSet) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ShortName == "" {
		return fmt.Errorf("field 'ShortName' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *StickerSet) CRC() uint32 {
	return uint32(0xeeb46f27)
}

func (e *StickerSet) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.InstalledDate) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Archived) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Official) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Masks) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Thumb) || !zero.IsZeroVal(e.ThumbDcId) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Animated) {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutInt(e.Hash)
	buf.PutLong(e.Id)
	if !zero.IsZeroVal(e.InstalledDate) {
		buf.PutInt(e.InstalledDate)
	}
	buf.PutString(e.ShortName)
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if !zero.IsZeroVal(e.ThumbDcId) {
		buf.PutInt(e.ThumbDcId)
	}
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *StickerSet) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.InstalledDate != 0 {
		flag |= 1 << 0
	}
	if e.Archived != false {
		flag |= 1 << 1
	}
	if e.Official != false {
		flag |= 1 << 2
	}
	if e.Masks != false {
		flag |= 1 << 3
	}
	if e.Thumb.Validate() == nil || e.ThumbDcId != 0 {
		flag |= 1 << 4
	}
	if e.Animated != false {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutInt(e.Hash)
	buf.PutLong(e.Id)
	if e.InstalledDate != 0 {
		buf.PutInt(e.InstalledDate)
	}
	buf.PutString(e.ShortName)
	if e.Thumb.Validate() == nil {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if e.ThumbDcId != 0 {
		buf.PutInt(e.ThumbDcId)
	}
	buf.PutString(e.Title)
	return buf.Result()
}

type Theme struct {
	AccessHash      int64          `validate:"required"`
	Creator         bool           `flag:"0,encoded_in_bitflags"`
	Default         bool           `flag:"1,encoded_in_bitflags"`
	Document        Document       `flag:"2"`
	__flagsPosition struct{}       // flags param position `validate:"required"`
	Id              int64          `validate:"required"`
	InstallsCount   int32          `validate:"required"`
	Settings        *ThemeSettings `flag:"3"`
	Slug            string         `validate:"required"`
	Title           string         `validate:"required"`
}

func (e *Theme) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.InstallsCount == 0 {
		return fmt.Errorf("field 'InstallsCount' is not set")
	} // builtin_check

	if e.Slug == "" {
		return fmt.Errorf("field 'Slug' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (e *Theme) CRC() uint32 {
	return uint32(0x28f1114)
}

func (e *Theme) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Creator) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Default) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutInt(e.InstallsCount)
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	buf.PutString(e.Slug)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *Theme) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Creator != false {
		flag |= 1 << 0
	}
	if e.Default != false {
		flag |= 1 << 1
	}
	if e.Document.Validate() == nil {
		flag |= 1 << 2
	}
	if e.Settings.Validate() == nil {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutInt(e.InstallsCount)
	if e.Settings.Validate() == nil {
		buf.PutRawBytes(e.Settings.Encode())
	}
	buf.PutString(e.Slug)
	buf.PutString(e.Title)
	return buf.Result()
}

type ThemeSettings struct {
	AccentColor        int32     `validate:"required"`
	BaseTheme          BaseTheme `validate:"required"`
	__flagsPosition    struct{}  // flags param position `validate:"required"`
	MessageBottomColor int32     `flag:"0"`
	MessageTopColor    int32     `flag:"0"`
	Wallpaper          WallPaper `flag:"1"`
}

func (e *ThemeSettings) Validate() error {
	if e.AccentColor == 0 {
		return fmt.Errorf("field 'AccentColor' is not set")
	} // builtin_check

	if e.BaseTheme == 0 {
		return fmt.Errorf("field 'BaseTheme' is not set")
	} // enum_check

	return nil
}

func (e *ThemeSettings) CRC() uint32 {
	return uint32(0x9c14984a)
}

func (e *ThemeSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.MessageBottomColor) || !zero.IsZeroVal(e.MessageTopColor) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Wallpaper) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AccentColor)
	buf.PutRawBytes(e.BaseTheme.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MessageBottomColor) {
		buf.PutInt(e.MessageBottomColor)
	}
	if !zero.IsZeroVal(e.MessageTopColor) {
		buf.PutInt(e.MessageTopColor)
	}
	if !zero.IsZeroVal(e.Wallpaper) {
		buf.PutRawBytes(e.Wallpaper.Encode())
	}
	return buf.Result()
}

func (e *ThemeSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.MessageBottomColor != 0 || e.MessageTopColor != 0 {
		flag |= 1 << 0
	}
	if e.Wallpaper.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AccentColor)
	buf.PutRawBytes(e.BaseTheme.Encode())
	buf.PutUint(flag)
	if e.MessageBottomColor != 0 {
		buf.PutInt(e.MessageBottomColor)
	}
	if e.MessageTopColor != 0 {
		buf.PutInt(e.MessageTopColor)
	}
	if e.Wallpaper.Validate() == nil {
		buf.PutRawBytes(e.Wallpaper.Encode())
	}
	return buf.Result()
}

type TopPeer struct {
	Peer   Peer    `validate:"required"`
	Rating float64 `validate:"required"`
}

func (e *TopPeer) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.Rating == 0 {
		return fmt.Errorf("field 'Rating' is not set")
	} // builtin_check

	return nil
}

func (e *TopPeer) CRC() uint32 {
	return uint32(0xedcdc05b)
}

func (e *TopPeer) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutDouble(e.Rating)
	return buf.Result()
}

func (e *TopPeer) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutDouble(e.Rating)
	return buf.Result()
}

type TopPeerCategoryPeers struct {
	Category TopPeerCategory `validate:"required"`
	Count    int32           `validate:"required"`
	Peers    []*TopPeer      `validate:"required"`
}

func (e *TopPeerCategoryPeers) Validate() error {
	if e.Category == 0 {
		return fmt.Errorf("field 'Category' is not set")
	} // enum_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Peers) == 0 {
		return fmt.Errorf("field 'Peers' is not set")
	} // slice_len_check
	for _, item := range e.Peers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Peers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (e *TopPeerCategoryPeers) CRC() uint32 {
	return uint32(0xfb834291)
}

func (e *TopPeerCategoryPeers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Category.Encode())
	buf.PutInt(e.Count)
	buf.PutVector(e.Peers)
	return buf.Result()
}

func (e *TopPeerCategoryPeers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Category.Encode())
	buf.PutInt(e.Count)
	buf.PutVector(e.Peers)
	return buf.Result()
}

type UpdatesState struct {
	Date        int32 `validate:"required"`
	Pts         int32 `validate:"required"`
	Qts         int32 `validate:"required"`
	Seq         int32 `validate:"required"`
	UnreadCount int32 `validate:"required"`
}

func (e *UpdatesState) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.Qts == 0 {
		return fmt.Errorf("field 'Qts' is not set")
	} // builtin_check

	if e.Seq == 0 {
		return fmt.Errorf("field 'Seq' is not set")
	} // builtin_check

	if e.UnreadCount == 0 {
		return fmt.Errorf("field 'UnreadCount' is not set")
	} // builtin_check

	return nil
}

func (e *UpdatesState) CRC() uint32 {
	return uint32(0xa56c2a3e)
}

func (e *UpdatesState) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Pts)
	buf.PutInt(e.Qts)
	buf.PutInt(e.Seq)
	buf.PutInt(e.UnreadCount)
	return buf.Result()
}

func (e *UpdatesState) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Pts)
	buf.PutInt(e.Qts)
	buf.PutInt(e.Seq)
	buf.PutInt(e.UnreadCount)
	return buf.Result()
}

type UploadWebFile struct {
	Bytes    []byte          `validate:"required"`
	FileType StorageFileType `validate:"required"`
	MimeType string          `validate:"required"`
	Mtime    int32           `validate:"required"`
	Size     int32           `validate:"required"`
}

func (e *UploadWebFile) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.FileType == 0 {
		return fmt.Errorf("field 'FileType' is not set")
	} // enum_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	if e.Mtime == 0 {
		return fmt.Errorf("field 'Mtime' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	return nil
}

func (e *UploadWebFile) CRC() uint32 {
	return uint32(0x21e753bc)
}

func (e *UploadWebFile) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutRawBytes(e.FileType.Encode())
	buf.PutString(e.MimeType)
	buf.PutInt(e.Mtime)
	buf.PutInt(e.Size)
	return buf.Result()
}

func (e *UploadWebFile) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutRawBytes(e.FileType.Encode())
	buf.PutString(e.MimeType)
	buf.PutInt(e.Mtime)
	buf.PutInt(e.Size)
	return buf.Result()
}

type UserFull struct {
	About               string              `flag:"1"`
	Blocked             bool                `flag:"0,encoded_in_bitflags"`
	BotInfo             *BotInfo            `flag:"3"`
	CanPinMessage       bool                `flag:"7,encoded_in_bitflags"`
	CommonChatsCount    int32               `validate:"required"`
	__flagsPosition     struct{}            // flags param position `validate:"required"`
	FolderId            int32               `flag:"11"`
	HasScheduled        bool                `flag:"12,encoded_in_bitflags"`
	NotifySettings      *PeerNotifySettings `validate:"required"`
	PhoneCallsAvailable bool                `flag:"4,encoded_in_bitflags"`
	PhoneCallsPrivate   bool                `flag:"5,encoded_in_bitflags"`
	PinnedMsgId         int32               `flag:"6"`
	ProfilePhoto        Photo               `flag:"2"`
	Settings            *PeerSettings       `validate:"required"`
	User                User                `validate:"required"`
	VideoCallsAvailable bool                `flag:"13,encoded_in_bitflags"`
}

func (e *UserFull) Validate() error {
	if e.CommonChatsCount == 0 {
		return fmt.Errorf("field 'CommonChatsCount' is not set")
	} // builtin_check

	if err := e.NotifySettings.Validate(); err != nil {
		return fmt.Errorf("field 'NotifySettings': %w", err)
	} // type_iter_check

	if err := e.Settings.Validate(); err != nil {
		return fmt.Errorf("field 'Settings': %w", err)
	} // type_iter_check

	if err := e.User.Validate(); err != nil {
		return fmt.Errorf("field 'User': %w", err)
	} // type_iter_check

	return nil
}

func (e *UserFull) CRC() uint32 {
	return uint32(0xedf17c12)
}

func (e *UserFull) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Blocked) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.About) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ProfilePhoto) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.BotInfo) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.PhoneCallsAvailable) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.PhoneCallsPrivate) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.PinnedMsgId) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.CanPinMessage) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.HasScheduled) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.VideoCallsAvailable) {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.About) {
		buf.PutString(e.About)
	}
	if !zero.IsZeroVal(e.BotInfo) {
		buf.PutRawBytes(e.BotInfo.Encode())
	}
	buf.PutInt(e.CommonChatsCount)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	if !zero.IsZeroVal(e.PinnedMsgId) {
		buf.PutInt(e.PinnedMsgId)
	}
	if !zero.IsZeroVal(e.ProfilePhoto) {
		buf.PutRawBytes(e.ProfilePhoto.Encode())
	}
	buf.PutRawBytes(e.Settings.Encode())
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

func (e *UserFull) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Blocked != false {
		flag |= 1 << 0
	}
	if e.About != "" {
		flag |= 1 << 1
	}
	if e.ProfilePhoto.Validate() == nil {
		flag |= 1 << 2
	}
	if e.BotInfo.Validate() == nil {
		flag |= 1 << 3
	}
	if e.PhoneCallsAvailable != false {
		flag |= 1 << 4
	}
	if e.PhoneCallsPrivate != false {
		flag |= 1 << 5
	}
	if e.PinnedMsgId != 0 {
		flag |= 1 << 6
	}
	if e.CanPinMessage != false {
		flag |= 1 << 7
	}
	if e.FolderId != 0 {
		flag |= 1 << 11
	}
	if e.HasScheduled != false {
		flag |= 1 << 12
	}
	if e.VideoCallsAvailable != false {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.About != "" {
		buf.PutString(e.About)
	}
	if e.BotInfo.Validate() == nil {
		buf.PutRawBytes(e.BotInfo.Encode())
	}
	buf.PutInt(e.CommonChatsCount)
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	if e.PinnedMsgId != 0 {
		buf.PutInt(e.PinnedMsgId)
	}
	if e.ProfilePhoto.Validate() == nil {
		buf.PutRawBytes(e.ProfilePhoto.Encode())
	}
	buf.PutRawBytes(e.Settings.Encode())
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

type VideoSize struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	H               int32         `validate:"required"`
	Location        *FileLocation `validate:"required"`
	Size            int32         `validate:"required"`
	Type            string        `validate:"required"`
	VideoStartTs    float64       `flag:"0"`
	W               int32         `validate:"required"`
}

func (e *VideoSize) Validate() error {

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if err := e.Location.Validate(); err != nil {
		return fmt.Errorf("field 'Location': %w", err)
	} // type_iter_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (e *VideoSize) CRC() uint32 {
	return uint32(0xe831c556)
}

func (e *VideoSize) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.VideoStartTs) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Size)
	buf.PutString(e.Type)
	if !zero.IsZeroVal(e.VideoStartTs) {
		buf.PutDouble(e.VideoStartTs)
	}
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *VideoSize) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.VideoStartTs != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Size)
	buf.PutString(e.Type)
	if e.VideoStartTs != 0 {
		buf.PutDouble(e.VideoStartTs)
	}
	buf.PutInt(e.W)
	return buf.Result()
}

type WallPaperSettings struct {
	BackgroundColor       int32    `flag:"0"`
	Blur                  bool     `flag:"1,encoded_in_bitflags"`
	__flagsPosition       struct{} // flags param position `validate:"required"`
	Intensity             int32    `flag:"3"`
	Motion                bool     `flag:"2,encoded_in_bitflags"`
	Rotation              int32    `flag:"4"`
	SecondBackgroundColor int32    `flag:"4"`
}

func (e *WallPaperSettings) Validate() error {

	return nil
}

func (e *WallPaperSettings) CRC() uint32 {
	return uint32(0x5086cf8)
}

func (e *WallPaperSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.BackgroundColor) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Blur) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Motion) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Intensity) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Rotation) || !zero.IsZeroVal(e.SecondBackgroundColor) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.BackgroundColor) {
		buf.PutInt(e.BackgroundColor)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Intensity) {
		buf.PutInt(e.Intensity)
	}
	if !zero.IsZeroVal(e.Rotation) {
		buf.PutInt(e.Rotation)
	}
	if !zero.IsZeroVal(e.SecondBackgroundColor) {
		buf.PutInt(e.SecondBackgroundColor)
	}
	return buf.Result()
}

func (e *WallPaperSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.BackgroundColor != 0 {
		flag |= 1 << 0
	}
	if e.Blur != false {
		flag |= 1 << 1
	}
	if e.Motion != false {
		flag |= 1 << 2
	}
	if e.Intensity != 0 {
		flag |= 1 << 3
	}
	if e.Rotation != 0 || e.SecondBackgroundColor != 0 {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.BackgroundColor != 0 {
		buf.PutInt(e.BackgroundColor)
	}
	buf.PutUint(flag)
	if e.Intensity != 0 {
		buf.PutInt(e.Intensity)
	}
	if e.Rotation != 0 {
		buf.PutInt(e.Rotation)
	}
	if e.SecondBackgroundColor != 0 {
		buf.PutInt(e.SecondBackgroundColor)
	}
	return buf.Result()
}

type WebAuthorization struct {
	BotId       int32  `validate:"required"`
	Browser     string `validate:"required"`
	DateActive  int32  `validate:"required"`
	DateCreated int32  `validate:"required"`
	Domain      string `validate:"required"`
	Hash        int64  `validate:"required"`
	Ip          string `validate:"required"`
	Platform    string `validate:"required"`
	Region      string `validate:"required"`
}

func (e *WebAuthorization) Validate() error {
	if e.BotId == 0 {
		return fmt.Errorf("field 'BotId' is not set")
	} // builtin_check

	if e.Browser == "" {
		return fmt.Errorf("field 'Browser' is not set")
	} // builtin_check

	if e.DateActive == 0 {
		return fmt.Errorf("field 'DateActive' is not set")
	} // builtin_check

	if e.DateCreated == 0 {
		return fmt.Errorf("field 'DateCreated' is not set")
	} // builtin_check

	if e.Domain == "" {
		return fmt.Errorf("field 'Domain' is not set")
	} // builtin_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if e.Ip == "" {
		return fmt.Errorf("field 'Ip' is not set")
	} // builtin_check

	if e.Platform == "" {
		return fmt.Errorf("field 'Platform' is not set")
	} // builtin_check

	if e.Region == "" {
		return fmt.Errorf("field 'Region' is not set")
	} // builtin_check

	return nil
}

func (e *WebAuthorization) CRC() uint32 {
	return uint32(0xcac943f2)
}

func (e *WebAuthorization) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.Browser)
	buf.PutInt(e.DateActive)
	buf.PutInt(e.DateCreated)
	buf.PutString(e.Domain)
	buf.PutLong(e.Hash)
	buf.PutString(e.Ip)
	buf.PutString(e.Platform)
	buf.PutString(e.Region)
	return buf.Result()
}

func (e *WebAuthorization) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.BotId)
	buf.PutString(e.Browser)
	buf.PutInt(e.DateActive)
	buf.PutInt(e.DateCreated)
	buf.PutString(e.Domain)
	buf.PutLong(e.Hash)
	buf.PutString(e.Ip)
	buf.PutString(e.Platform)
	buf.PutString(e.Region)
	return buf.Result()
}

type WebPageAttribute struct {
	Documents       []Document     `flag:"0"`
	__flagsPosition struct{}       // flags param position `validate:"required"`
	Settings        *ThemeSettings `flag:"1"`
}

func (e *WebPageAttribute) Validate() error {

	return nil
}

func (e *WebPageAttribute) CRC() uint32 {
	return uint32(0x54b56617)
}

func (e *WebPageAttribute) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Documents) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Documents) {
		buf.PutVector(e.Documents)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}

func (e *WebPageAttribute) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Documents) > 0 {
		flag |= 1 << 0
	}
	if e.Settings.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Documents) > 0 {
		buf.PutVector(e.Documents)
	}
	buf.PutUint(flag)
	if e.Settings.Validate() == nil {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}
