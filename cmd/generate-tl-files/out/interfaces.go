// Code generated by generate-tl-files; DO NOT EDIT.

package telegram

import (
	"fmt"
	validator "github.com/go-playground/validator"
	zero "github.com/vikyd/zero"
	serialize "github.com/xelaj/mtproto/serialize"
)

type BotInlineMessage interface {
	serialize.TL
	ImplementsBotInlineMessage()
	Validate() error
}

type BotInlineMessageMediaGeo struct {
	__flagsPosition struct{}    // flags param position `validate:"required"`
	Geo             GeoPoint    `validate:"required"`
	Period          int32       `validate:"required"`
	ReplyMarkup     ReplyMarkup `flag:"2"`
}

func (e *BotInlineMessageMediaGeo) Validate() error {

	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	if e.Period == 0 {
		return fmt.Errorf("field 'Period' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMessageMediaGeo) CRC() uint32 {
	return uint32(0xb722de65)
}

func (*BotInlineMessageMediaGeo) ImplementsBotInlineMessage() {}

func (e *BotInlineMessageMediaGeo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.Period)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *BotInlineMessageMediaGeo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.Period)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type BotInlineMessageText struct {
	Entities        []MessageEntity `flag:"1"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	NoWebpage       bool            `flag:"0,encoded_in_bitflags"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
}

func (e *BotInlineMessageText) Validate() error {

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMessageText) CRC() uint32 {
	return uint32(0x8c7f65e2)
}

func (*BotInlineMessageText) ImplementsBotInlineMessage() {}

func (e *BotInlineMessageText) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *BotInlineMessageText) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NoWebpage != false {
		flag |= 1 << 0
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 1
	}
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type BotInlineMessageMediaContact struct {
	FirstName       string      `validate:"required"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	LastName        string      `validate:"required"`
	PhoneNumber     string      `validate:"required"`
	ReplyMarkup     ReplyMarkup `flag:"2"`
	Vcard           string      `validate:"required"`
}

func (e *BotInlineMessageMediaContact) Validate() error {
	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.PhoneNumber == "" {
		return fmt.Errorf("field 'PhoneNumber' is not set")
	} // builtin_check

	if e.Vcard == "" {
		return fmt.Errorf("field 'Vcard' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMessageMediaContact) CRC() uint32 {
	return uint32(0x18d1cdc2)
}

func (*BotInlineMessageMediaContact) ImplementsBotInlineMessage() {}

func (e *BotInlineMessageMediaContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutUint(flag)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Vcard)
	return buf.Result()
}

func (e *BotInlineMessageMediaContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutUint(flag)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Vcard)
	return buf.Result()
}

type BotInlineMessageMediaAuto struct {
	Entities        []MessageEntity `flag:"1"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
}

func (e *BotInlineMessageMediaAuto) Validate() error {

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMessageMediaAuto) CRC() uint32 {
	return uint32(0x764cf810)
}

func (*BotInlineMessageMediaAuto) ImplementsBotInlineMessage() {}

func (e *BotInlineMessageMediaAuto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *BotInlineMessageMediaAuto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Entities) > 0 {
		flag |= 1 << 1
	}
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type BotInlineMessageMediaVenue struct {
	Address         string      `validate:"required"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	Geo             GeoPoint    `validate:"required"`
	Provider        string      `validate:"required"`
	ReplyMarkup     ReplyMarkup `flag:"2"`
	Title           string      `validate:"required"`
	VenueId         string      `validate:"required"`
	VenueType       string      `validate:"required"`
}

func (e *BotInlineMessageMediaVenue) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	if e.Provider == "" {
		return fmt.Errorf("field 'Provider' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.VenueId == "" {
		return fmt.Errorf("field 'VenueId' is not set")
	} // builtin_check

	if e.VenueType == "" {
		return fmt.Errorf("field 'VenueType' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMessageMediaVenue) CRC() uint32 {
	return uint32(0x8a86659c)
}

func (*BotInlineMessageMediaVenue) ImplementsBotInlineMessage() {}

func (e *BotInlineMessageMediaVenue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutString(e.Provider)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

func (e *BotInlineMessageMediaVenue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutString(e.Provider)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

type BotInlineResult interface {
	serialize.TL
	ImplementsBotInlineResult()
	Validate() error
}

type BotInlineResultObj struct {
	Content         WebDocument      `flag:"5"`
	Description     string           `flag:"2"`
	__flagsPosition struct{}         // flags param position `validate:"required"`
	Id              string           `validate:"required"`
	SendMessage     BotInlineMessage `validate:"required"`
	Thumb           WebDocument      `flag:"4"`
	Title           string           `flag:"1"`
	Type            string           `validate:"required"`
	Url             string           `flag:"3"`
}

func (e *BotInlineResultObj) Validate() error {

	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineResultObj) CRC() uint32 {
	return uint32(0x11965f3a)
}

func (*BotInlineResultObj) ImplementsBotInlineResult() {}

func (e *BotInlineResultObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Thumb) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Content) {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Content) {
		buf.PutRawBytes(e.Content.Encode())
	}
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

func (e *BotInlineResultObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Title != "" {
		flag |= 1 << 1
	}
	if e.Description != "" {
		flag |= 1 << 2
	}
	if e.Url != "" {
		flag |= 1 << 3
	}
	if e.Thumb.Validate() == nil {
		flag |= 1 << 4
	}
	if e.Content.Validate() == nil {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Content.Validate() == nil {
		buf.PutRawBytes(e.Content.Encode())
	}
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if e.Thumb.Validate() == nil {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

type BotInlineMediaResult struct {
	Description     string           `flag:"3"`
	Document        Document         `flag:"1"`
	__flagsPosition struct{}         // flags param position `validate:"required"`
	Id              string           `validate:"required"`
	Photo           Photo            `flag:"0"`
	SendMessage     BotInlineMessage `validate:"required"`
	Title           string           `flag:"2"`
	Type            string           `validate:"required"`
}

func (e *BotInlineMediaResult) Validate() error {

	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*BotInlineMediaResult) CRC() uint32 {
	return uint32(0x17db940b)
}

func (*BotInlineMediaResult) ImplementsBotInlineResult() {}

func (e *BotInlineMediaResult) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutRawBytes(e.SendMessage.Encode())
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *BotInlineMediaResult) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Photo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.Document.Validate() == nil {
		flag |= 1 << 1
	}
	if e.Title != "" {
		flag |= 1 << 2
	}
	if e.Description != "" {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutRawBytes(e.SendMessage.Encode())
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	return buf.Result()
}

type ChannelAdminLogEventAction interface {
	serialize.TL
	ImplementsChannelAdminLogEventAction()
	Validate() error
}

type ChannelAdminLogEventActionChangeLinkedChat struct {
	NewValue  int32 `validate:"required"`
	PrevValue int32 `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeLinkedChat) Validate() error {
	if e.NewValue == 0 {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	if e.PrevValue == 0 {
		return fmt.Errorf("field 'PrevValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionChangeLinkedChat) CRC() uint32 {
	return uint32(0xa26f881b)
}

func (*ChannelAdminLogEventActionChangeLinkedChat) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeLinkedChat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.NewValue)
	buf.PutInt(e.PrevValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeLinkedChat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.NewValue)
	buf.PutInt(e.PrevValue)
	return buf.Result()
}

type ChannelAdminLogEventActionDefaultBannedRights struct {
	NewBannedRights  *ChatBannedRights `validate:"required"`
	PrevBannedRights *ChatBannedRights `validate:"required"`
}

func (e *ChannelAdminLogEventActionDefaultBannedRights) Validate() error {
	if err := e.NewBannedRights.Validate(); err != nil {
		return fmt.Errorf("field 'NewBannedRights': %w", err)
	} // type_iter_check

	if err := e.PrevBannedRights.Validate(); err != nil {
		return fmt.Errorf("field 'PrevBannedRights': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionDefaultBannedRights) CRC() uint32 {
	return uint32(0x2df5fc0a)
}

func (*ChannelAdminLogEventActionDefaultBannedRights) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionDefaultBannedRights) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewBannedRights.Encode())
	buf.PutRawBytes(e.PrevBannedRights.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionDefaultBannedRights) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewBannedRights.Encode())
	buf.PutRawBytes(e.PrevBannedRights.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionTogglePreHistoryHidden struct {
	NewValue bool `validate:"required"`
}

func (e *ChannelAdminLogEventActionTogglePreHistoryHidden) Validate() error {
	if e.NewValue == false {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionTogglePreHistoryHidden) CRC() uint32 {
	return uint32(0x5f5c95f1)
}

func (*ChannelAdminLogEventActionTogglePreHistoryHidden) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionTogglePreHistoryHidden) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionTogglePreHistoryHidden) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

type ChannelAdminLogEventActionToggleSlowMode struct {
	NewValue  int32 `validate:"required"`
	PrevValue int32 `validate:"required"`
}

func (e *ChannelAdminLogEventActionToggleSlowMode) Validate() error {
	if e.NewValue == 0 {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	if e.PrevValue == 0 {
		return fmt.Errorf("field 'PrevValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionToggleSlowMode) CRC() uint32 {
	return uint32(0x53909779)
}

func (*ChannelAdminLogEventActionToggleSlowMode) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionToggleSlowMode) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.NewValue)
	buf.PutInt(e.PrevValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionToggleSlowMode) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.NewValue)
	buf.PutInt(e.PrevValue)
	return buf.Result()
}

type ChannelAdminLogEventActionEditMessage struct {
	NewMessage  Message `validate:"required"`
	PrevMessage Message `validate:"required"`
}

func (e *ChannelAdminLogEventActionEditMessage) Validate() error {
	if err := e.NewMessage.Validate(); err != nil {
		return fmt.Errorf("field 'NewMessage': %w", err)
	} // type_iter_check

	if err := e.PrevMessage.Validate(); err != nil {
		return fmt.Errorf("field 'PrevMessage': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionEditMessage) CRC() uint32 {
	return uint32(0x709b2405)
}

func (*ChannelAdminLogEventActionEditMessage) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionEditMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewMessage.Encode())
	buf.PutRawBytes(e.PrevMessage.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionEditMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewMessage.Encode())
	buf.PutRawBytes(e.PrevMessage.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionStopPoll struct {
	Message Message `validate:"required"`
}

func (e *ChannelAdminLogEventActionStopPoll) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionStopPoll) CRC() uint32 {
	return uint32(0x8f079643)
}

func (*ChannelAdminLogEventActionStopPoll) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionStopPoll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionStopPoll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionChangeTitle struct {
	NewValue  string `validate:"required"`
	PrevValue string `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeTitle) Validate() error {
	if e.NewValue == "" {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	if e.PrevValue == "" {
		return fmt.Errorf("field 'PrevValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionChangeTitle) CRC() uint32 {
	return uint32(0xe6dfb825)
}

func (*ChannelAdminLogEventActionChangeTitle) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeTitle) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeTitle) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

type ChannelAdminLogEventActionChangeStickerSet struct {
	NewStickerset  InputStickerSet `validate:"required"`
	PrevStickerset InputStickerSet `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeStickerSet) Validate() error {
	if err := e.NewStickerset.Validate(); err != nil {
		return fmt.Errorf("field 'NewStickerset': %w", err)
	} // type_iter_check

	if err := e.PrevStickerset.Validate(); err != nil {
		return fmt.Errorf("field 'PrevStickerset': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionChangeStickerSet) CRC() uint32 {
	return uint32(0xb1c3caa7)
}

func (*ChannelAdminLogEventActionChangeStickerSet) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeStickerSet) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewStickerset.Encode())
	buf.PutRawBytes(e.PrevStickerset.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeStickerSet) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewStickerset.Encode())
	buf.PutRawBytes(e.PrevStickerset.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionParticipantInvite struct {
	Participant ChannelParticipant `validate:"required"`
}

func (e *ChannelAdminLogEventActionParticipantInvite) Validate() error {
	if err := e.Participant.Validate(); err != nil {
		return fmt.Errorf("field 'Participant': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionParticipantInvite) CRC() uint32 {
	return uint32(0xe31c34d8)
}

func (*ChannelAdminLogEventActionParticipantInvite) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionParticipantInvite) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participant.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionParticipantInvite) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participant.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionToggleInvites struct {
	NewValue bool `validate:"required"`
}

func (e *ChannelAdminLogEventActionToggleInvites) Validate() error {
	if e.NewValue == false {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionToggleInvites) CRC() uint32 {
	return uint32(0x1b7907ae)
}

func (*ChannelAdminLogEventActionToggleInvites) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionToggleInvites) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionToggleInvites) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

type ChannelAdminLogEventActionChangeAbout struct {
	NewValue  string `validate:"required"`
	PrevValue string `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeAbout) Validate() error {
	if e.NewValue == "" {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	if e.PrevValue == "" {
		return fmt.Errorf("field 'PrevValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionChangeAbout) CRC() uint32 {
	return uint32(0x55188a2e)
}

func (*ChannelAdminLogEventActionChangeAbout) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeAbout) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeAbout) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

type ChannelAdminLogEventActionChangeUsername struct {
	NewValue  string `validate:"required"`
	PrevValue string `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeUsername) Validate() error {
	if e.NewValue == "" {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	if e.PrevValue == "" {
		return fmt.Errorf("field 'PrevValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionChangeUsername) CRC() uint32 {
	return uint32(0x6a4afc38)
}

func (*ChannelAdminLogEventActionChangeUsername) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeUsername) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeUsername) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.NewValue)
	buf.PutString(e.PrevValue)
	return buf.Result()
}

type ChannelAdminLogEventActionParticipantToggleAdmin struct {
	NewParticipant  ChannelParticipant `validate:"required"`
	PrevParticipant ChannelParticipant `validate:"required"`
}

func (e *ChannelAdminLogEventActionParticipantToggleAdmin) Validate() error {
	if err := e.NewParticipant.Validate(); err != nil {
		return fmt.Errorf("field 'NewParticipant': %w", err)
	} // type_iter_check

	if err := e.PrevParticipant.Validate(); err != nil {
		return fmt.Errorf("field 'PrevParticipant': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionParticipantToggleAdmin) CRC() uint32 {
	return uint32(0xd5676710)
}

func (*ChannelAdminLogEventActionParticipantToggleAdmin) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionParticipantToggleAdmin) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewParticipant.Encode())
	buf.PutRawBytes(e.PrevParticipant.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionParticipantToggleAdmin) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewParticipant.Encode())
	buf.PutRawBytes(e.PrevParticipant.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionParticipantToggleBan struct {
	NewParticipant  ChannelParticipant `validate:"required"`
	PrevParticipant ChannelParticipant `validate:"required"`
}

func (e *ChannelAdminLogEventActionParticipantToggleBan) Validate() error {
	if err := e.NewParticipant.Validate(); err != nil {
		return fmt.Errorf("field 'NewParticipant': %w", err)
	} // type_iter_check

	if err := e.PrevParticipant.Validate(); err != nil {
		return fmt.Errorf("field 'PrevParticipant': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionParticipantToggleBan) CRC() uint32 {
	return uint32(0xe6d83d7e)
}

func (*ChannelAdminLogEventActionParticipantToggleBan) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionParticipantToggleBan) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewParticipant.Encode())
	buf.PutRawBytes(e.PrevParticipant.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionParticipantToggleBan) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewParticipant.Encode())
	buf.PutRawBytes(e.PrevParticipant.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionParticipantLeave struct{}

func (e *ChannelAdminLogEventActionParticipantLeave) Validate() error {
	return nil
}

func (*ChannelAdminLogEventActionParticipantLeave) CRC() uint32 {
	return uint32(0xf89777f2)
}

func (*ChannelAdminLogEventActionParticipantLeave) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionParticipantLeave) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionParticipantLeave) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelAdminLogEventActionChangePhoto struct {
	NewPhoto  Photo `validate:"required"`
	PrevPhoto Photo `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangePhoto) Validate() error {
	if err := e.NewPhoto.Validate(); err != nil {
		return fmt.Errorf("field 'NewPhoto': %w", err)
	} // type_iter_check

	if err := e.PrevPhoto.Validate(); err != nil {
		return fmt.Errorf("field 'PrevPhoto': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionChangePhoto) CRC() uint32 {
	return uint32(0x434bd2af)
}

func (*ChannelAdminLogEventActionChangePhoto) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangePhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewPhoto.Encode())
	buf.PutRawBytes(e.PrevPhoto.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangePhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewPhoto.Encode())
	buf.PutRawBytes(e.PrevPhoto.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionParticipantJoin struct{}

func (e *ChannelAdminLogEventActionParticipantJoin) Validate() error {
	return nil
}

func (*ChannelAdminLogEventActionParticipantJoin) CRC() uint32 {
	return uint32(0x183040d3)
}

func (*ChannelAdminLogEventActionParticipantJoin) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionParticipantJoin) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionParticipantJoin) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelAdminLogEventActionToggleSignatures struct {
	NewValue bool `validate:"required"`
}

func (e *ChannelAdminLogEventActionToggleSignatures) Validate() error {
	if e.NewValue == false {
		return fmt.Errorf("field 'NewValue' is not set")
	} // builtin_check

	return nil
}

func (*ChannelAdminLogEventActionToggleSignatures) CRC() uint32 {
	return uint32(0x26ae0971)
}

func (*ChannelAdminLogEventActionToggleSignatures) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionToggleSignatures) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

func (e *ChannelAdminLogEventActionToggleSignatures) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.NewValue)
	return buf.Result()
}

type ChannelAdminLogEventActionDeleteMessage struct {
	Message Message `validate:"required"`
}

func (e *ChannelAdminLogEventActionDeleteMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionDeleteMessage) CRC() uint32 {
	return uint32(0x42e047bb)
}

func (*ChannelAdminLogEventActionDeleteMessage) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionDeleteMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionDeleteMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionChangeLocation struct {
	NewValue  ChannelLocation `validate:"required"`
	PrevValue ChannelLocation `validate:"required"`
}

func (e *ChannelAdminLogEventActionChangeLocation) Validate() error {
	if err := e.NewValue.Validate(); err != nil {
		return fmt.Errorf("field 'NewValue': %w", err)
	} // type_iter_check

	if err := e.PrevValue.Validate(); err != nil {
		return fmt.Errorf("field 'PrevValue': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionChangeLocation) CRC() uint32 {
	return uint32(0xe6b76ae)
}

func (*ChannelAdminLogEventActionChangeLocation) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionChangeLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewValue.Encode())
	buf.PutRawBytes(e.PrevValue.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionChangeLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NewValue.Encode())
	buf.PutRawBytes(e.PrevValue.Encode())
	return buf.Result()
}

type ChannelAdminLogEventActionUpdatePinned struct {
	Message Message `validate:"required"`
}

func (e *ChannelAdminLogEventActionUpdatePinned) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelAdminLogEventActionUpdatePinned) CRC() uint32 {
	return uint32(0xe9e82c18)
}

func (*ChannelAdminLogEventActionUpdatePinned) ImplementsChannelAdminLogEventAction() {}

func (e *ChannelAdminLogEventActionUpdatePinned) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

func (e *ChannelAdminLogEventActionUpdatePinned) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

type ChannelLocation interface {
	serialize.TL
	ImplementsChannelLocation()
	Validate() error
}

type ChannelLocationObj struct {
	Address  string   `validate:"required"`
	GeoPoint GeoPoint `validate:"required"`
}

func (e *ChannelLocationObj) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	return nil
}

func (*ChannelLocationObj) CRC() uint32 {
	return uint32(0x209b82db)
}

func (*ChannelLocationObj) ImplementsChannelLocation() {}

func (e *ChannelLocationObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.GeoPoint.Encode())
	return buf.Result()
}

func (e *ChannelLocationObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.GeoPoint.Encode())
	return buf.Result()
}

type ChannelLocationEmpty struct{}

func (e *ChannelLocationEmpty) Validate() error {
	return nil
}

func (*ChannelLocationEmpty) CRC() uint32 {
	return uint32(0xbfb5ad8b)
}

func (*ChannelLocationEmpty) ImplementsChannelLocation() {}

func (e *ChannelLocationEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelLocationEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelMessagesFilter interface {
	serialize.TL
	ImplementsChannelMessagesFilter()
	Validate() error
}

type ChannelMessagesFilterObj struct {
	ExcludeNewMessages bool            `flag:"1,encoded_in_bitflags"`
	__flagsPosition    struct{}        // flags param position `validate:"required"`
	Ranges             []*MessageRange `validate:"required"`
}

func (e *ChannelMessagesFilterObj) Validate() error {

	if len(e.Ranges) == 0 {
		return fmt.Errorf("field 'Ranges' is not set")
	} // slice_len_check
	for _, item := range e.Ranges {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Ranges': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ChannelMessagesFilterObj) CRC() uint32 {
	return uint32(0xcd77d957)
}

func (*ChannelMessagesFilterObj) ImplementsChannelMessagesFilter() {}

func (e *ChannelMessagesFilterObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ExcludeNewMessages) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Ranges)
	return buf.Result()
}

func (e *ChannelMessagesFilterObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ExcludeNewMessages != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Ranges)
	return buf.Result()
}

type ChannelMessagesFilterEmpty struct{}

func (e *ChannelMessagesFilterEmpty) Validate() error {
	return nil
}

func (*ChannelMessagesFilterEmpty) CRC() uint32 {
	return uint32(0x94d42ee7)
}

func (*ChannelMessagesFilterEmpty) ImplementsChannelMessagesFilter() {}

func (e *ChannelMessagesFilterEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelMessagesFilterEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelParticipant interface {
	serialize.TL
	ImplementsChannelParticipant()
	Validate() error
}

type ChannelParticipantCreator struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Rank            string   `flag:"0"`
	UserId          int32    `validate:"required"`
}

func (e *ChannelParticipantCreator) Validate() error {

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantCreator) CRC() uint32 {
	return uint32(0x808d15a4)
}

func (*ChannelParticipantCreator) ImplementsChannelParticipant() {}

func (e *ChannelParticipantCreator) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Rank) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Rank) {
		buf.PutString(e.Rank)
	}
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelParticipantCreator) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Rank != "" {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Rank != "" {
		buf.PutString(e.Rank)
	}
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelParticipantSelf struct {
	Date      int32 `validate:"required"`
	InviterId int32 `validate:"required"`
	UserId    int32 `validate:"required"`
}

func (e *ChannelParticipantSelf) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.InviterId == 0 {
		return fmt.Errorf("field 'InviterId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantSelf) CRC() uint32 {
	return uint32(0xa3289a6d)
}

func (*ChannelParticipantSelf) ImplementsChannelParticipant() {}

func (e *ChannelParticipantSelf) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelParticipantSelf) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelParticipantBanned struct {
	BannedRights    *ChatBannedRights `validate:"required"`
	Date            int32             `validate:"required"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	KickedBy        int32             `validate:"required"`
	Left            bool              `flag:"0,encoded_in_bitflags"`
	UserId          int32             `validate:"required"`
}

func (e *ChannelParticipantBanned) Validate() error {
	if err := e.BannedRights.Validate(); err != nil {
		return fmt.Errorf("field 'BannedRights': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.KickedBy == 0 {
		return fmt.Errorf("field 'KickedBy' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantBanned) CRC() uint32 {
	return uint32(0x1c0facaf)
}

func (*ChannelParticipantBanned) ImplementsChannelParticipant() {}

func (e *ChannelParticipantBanned) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Left) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.BannedRights.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutInt(e.KickedBy)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelParticipantBanned) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Left != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.BannedRights.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutInt(e.KickedBy)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelParticipantAdmin struct {
	AdminRights     *ChatAdminRights `validate:"required"`
	CanEdit         bool             `flag:"0,encoded_in_bitflags"`
	Date            int32            `validate:"required"`
	__flagsPosition struct{}         // flags param position `validate:"required"`
	InviterId       int32            `flag:"1"`
	PromotedBy      int32            `validate:"required"`
	Rank            string           `flag:"2"`
	Self            bool             `flag:"1,encoded_in_bitflags"`
	UserId          int32            `validate:"required"`
}

func (e *ChannelParticipantAdmin) Validate() error {
	if err := e.AdminRights.Validate(); err != nil {
		return fmt.Errorf("field 'AdminRights': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.PromotedBy == 0 {
		return fmt.Errorf("field 'PromotedBy' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantAdmin) CRC() uint32 {
	return uint32(0xccbebbaf)
}

func (*ChannelParticipantAdmin) ImplementsChannelParticipant() {}

func (e *ChannelParticipantAdmin) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.CanEdit) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.InviterId) || !zero.IsZeroVal(e.Self) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Rank) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.AdminRights.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.InviterId) {
		buf.PutInt(e.InviterId)
	}
	buf.PutInt(e.PromotedBy)
	if !zero.IsZeroVal(e.Rank) {
		buf.PutString(e.Rank)
	}
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelParticipantAdmin) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.CanEdit != false {
		flag |= 1 << 0
	}
	if e.InviterId != 0 || e.Self != false {
		flag |= 1 << 1
	}
	if e.Rank != "" {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.AdminRights.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.InviterId != 0 {
		buf.PutInt(e.InviterId)
	}
	buf.PutInt(e.PromotedBy)
	if e.Rank != "" {
		buf.PutString(e.Rank)
	}
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelParticipantObj struct {
	Date   int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *ChannelParticipantObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantObj) CRC() uint32 {
	return uint32(0x15ebac1d)
}

func (*ChannelParticipantObj) ImplementsChannelParticipant() {}

func (e *ChannelParticipantObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChannelParticipantObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChannelParticipantsFilter interface {
	serialize.TL
	ImplementsChannelParticipantsFilter()
	Validate() error
}

type ChannelParticipantsRecent struct{}

func (e *ChannelParticipantsRecent) Validate() error {
	return nil
}

func (*ChannelParticipantsRecent) CRC() uint32 {
	return uint32(0xde3f3c79)
}

func (*ChannelParticipantsRecent) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsRecent) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelParticipantsRecent) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelParticipantsContacts struct {
	Q string `validate:"required"`
}

func (e *ChannelParticipantsContacts) Validate() error {
	if e.Q == "" {
		return fmt.Errorf("field 'Q' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantsContacts) CRC() uint32 {
	return uint32(0xbb6ae88d)
}

func (*ChannelParticipantsContacts) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsContacts) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

func (e *ChannelParticipantsContacts) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

type ChannelParticipantsKicked struct {
	Q string `validate:"required"`
}

func (e *ChannelParticipantsKicked) Validate() error {
	if e.Q == "" {
		return fmt.Errorf("field 'Q' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantsKicked) CRC() uint32 {
	return uint32(0xa3b54985)
}

func (*ChannelParticipantsKicked) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsKicked) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

func (e *ChannelParticipantsKicked) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

type ChannelParticipantsBots struct{}

func (e *ChannelParticipantsBots) Validate() error {
	return nil
}

func (*ChannelParticipantsBots) CRC() uint32 {
	return uint32(0xb0d1865b)
}

func (*ChannelParticipantsBots) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsBots) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelParticipantsBots) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChannelParticipantsBanned struct {
	Q string `validate:"required"`
}

func (e *ChannelParticipantsBanned) Validate() error {
	if e.Q == "" {
		return fmt.Errorf("field 'Q' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantsBanned) CRC() uint32 {
	return uint32(0x1427a5e1)
}

func (*ChannelParticipantsBanned) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsBanned) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

func (e *ChannelParticipantsBanned) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

type ChannelParticipantsSearch struct {
	Q string `validate:"required"`
}

func (e *ChannelParticipantsSearch) Validate() error {
	if e.Q == "" {
		return fmt.Errorf("field 'Q' is not set")
	} // builtin_check

	return nil
}

func (*ChannelParticipantsSearch) CRC() uint32 {
	return uint32(0x656ac4b)
}

func (*ChannelParticipantsSearch) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsSearch) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

func (e *ChannelParticipantsSearch) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Q)
	return buf.Result()
}

type ChannelParticipantsAdmins struct{}

func (e *ChannelParticipantsAdmins) Validate() error {
	return nil
}

func (*ChannelParticipantsAdmins) CRC() uint32 {
	return uint32(0xb4608969)
}

func (*ChannelParticipantsAdmins) ImplementsChannelParticipantsFilter() {}

func (e *ChannelParticipantsAdmins) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelParticipantsAdmins) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type Chat interface {
	serialize.TL
	ImplementsChat()
	Validate() error
}

type ChatForbidden struct {
	Id    int32  `validate:"required"`
	Title string `validate:"required"`
}

func (e *ChatForbidden) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*ChatForbidden) CRC() uint32 {
	return uint32(0x7328bdb)
}

func (*ChatForbidden) ImplementsChat() {}

func (e *ChatForbidden) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *ChatForbidden) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutString(e.Title)
	return buf.Result()
}

type Channel struct {
	AccessHash          int64                `flag:"13"`
	AdminRights         *ChatAdminRights     `flag:"14"`
	BannedRights        *ChatBannedRights    `flag:"15"`
	Broadcast           bool                 `flag:"5,encoded_in_bitflags"`
	Creator             bool                 `flag:"0,encoded_in_bitflags"`
	Date                int32                `validate:"required"`
	DefaultBannedRights *ChatBannedRights    `flag:"18"`
	__flagsPosition     struct{}             // flags param position `validate:"required"`
	HasGeo              bool                 `flag:"21,encoded_in_bitflags"`
	HasLink             bool                 `flag:"20,encoded_in_bitflags"`
	Id                  int32                `validate:"required"`
	Left                bool                 `flag:"2,encoded_in_bitflags"`
	Megagroup           bool                 `flag:"8,encoded_in_bitflags"`
	Min                 bool                 `flag:"12,encoded_in_bitflags"`
	ParticipantsCount   int32                `flag:"17"`
	Photo               ChatPhoto            `validate:"required"`
	Restricted          bool                 `flag:"9,encoded_in_bitflags"`
	RestrictionReason   []*RestrictionReason `flag:"9"`
	Scam                bool                 `flag:"19,encoded_in_bitflags"`
	Signatures          bool                 `flag:"11,encoded_in_bitflags"`
	SlowmodeEnabled     bool                 `flag:"22,encoded_in_bitflags"`
	Title               string               `validate:"required"`
	Username            string               `flag:"6"`
	Verified            bool                 `flag:"7,encoded_in_bitflags"`
	Version             int32                `validate:"required"`
}

func (e *Channel) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*Channel) CRC() uint32 {
	return uint32(0xd31a961e)
}

func (*Channel) ImplementsChat() {}

func (e *Channel) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Creator) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Left) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Broadcast) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Username) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Verified) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.Megagroup) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Restricted) || !zero.IsZeroVal(e.RestrictionReason) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.Signatures) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Min) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.AccessHash) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.AdminRights) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.BannedRights) {
		flag |= 1 << 15
	}
	if !zero.IsZeroVal(e.ParticipantsCount) {
		flag |= 1 << 17
	}
	if !zero.IsZeroVal(e.DefaultBannedRights) {
		flag |= 1 << 18
	}
	if !zero.IsZeroVal(e.Scam) {
		flag |= 1 << 19
	}
	if !zero.IsZeroVal(e.HasLink) {
		flag |= 1 << 20
	}
	if !zero.IsZeroVal(e.HasGeo) {
		flag |= 1 << 21
	}
	if !zero.IsZeroVal(e.SlowmodeEnabled) {
		flag |= 1 << 22
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.AccessHash) {
		buf.PutLong(e.AccessHash)
	}
	if !zero.IsZeroVal(e.AdminRights) {
		buf.PutRawBytes(e.AdminRights.Encode())
	}
	if !zero.IsZeroVal(e.BannedRights) {
		buf.PutRawBytes(e.BannedRights.Encode())
	}
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.DefaultBannedRights) {
		buf.PutRawBytes(e.DefaultBannedRights.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.ParticipantsCount) {
		buf.PutInt(e.ParticipantsCount)
	}
	buf.PutRawBytes(e.Photo.Encode())
	if !zero.IsZeroVal(e.RestrictionReason) {
		buf.PutVector(e.RestrictionReason)
	}
	buf.PutString(e.Title)
	if !zero.IsZeroVal(e.Username) {
		buf.PutString(e.Username)
	}
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *Channel) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Creator != false {
		flag |= 1 << 0
	}
	if e.Left != false {
		flag |= 1 << 2
	}
	if e.Broadcast != false {
		flag |= 1 << 5
	}
	if e.Username != "" {
		flag |= 1 << 6
	}
	if e.Verified != false {
		flag |= 1 << 7
	}
	if e.Megagroup != false {
		flag |= 1 << 8
	}
	if e.Restricted != false || len(e.RestrictionReason) > 0 {
		flag |= 1 << 9
	}
	if e.Signatures != false {
		flag |= 1 << 11
	}
	if e.Min != false {
		flag |= 1 << 12
	}
	if e.AccessHash != 0 {
		flag |= 1 << 13
	}
	if e.AdminRights.Validate() == nil {
		flag |= 1 << 14
	}
	if e.BannedRights.Validate() == nil {
		flag |= 1 << 15
	}
	if e.ParticipantsCount != 0 {
		flag |= 1 << 17
	}
	if e.DefaultBannedRights.Validate() == nil {
		flag |= 1 << 18
	}
	if e.Scam != false {
		flag |= 1 << 19
	}
	if e.HasLink != false {
		flag |= 1 << 20
	}
	if e.HasGeo != false {
		flag |= 1 << 21
	}
	if e.SlowmodeEnabled != false {
		flag |= 1 << 22
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.AccessHash != 0 {
		buf.PutLong(e.AccessHash)
	}
	if e.AdminRights.Validate() == nil {
		buf.PutRawBytes(e.AdminRights.Encode())
	}
	if e.BannedRights.Validate() == nil {
		buf.PutRawBytes(e.BannedRights.Encode())
	}
	buf.PutInt(e.Date)
	if e.DefaultBannedRights.Validate() == nil {
		buf.PutRawBytes(e.DefaultBannedRights.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if e.ParticipantsCount != 0 {
		buf.PutInt(e.ParticipantsCount)
	}
	buf.PutRawBytes(e.Photo.Encode())
	if len(e.RestrictionReason) > 0 {
		buf.PutVector(e.RestrictionReason)
	}
	buf.PutString(e.Title)
	if e.Username != "" {
		buf.PutString(e.Username)
	}
	buf.PutInt(e.Version)
	return buf.Result()
}

type ChannelForbidden struct {
	AccessHash      int64    `validate:"required"`
	Broadcast       bool     `flag:"5,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Id              int32    `validate:"required"`
	Megagroup       bool     `flag:"8,encoded_in_bitflags"`
	Title           string   `validate:"required"`
	UntilDate       int32    `flag:"16"`
}

func (e *ChannelForbidden) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*ChannelForbidden) CRC() uint32 {
	return uint32(0x289da732)
}

func (*ChannelForbidden) ImplementsChat() {}

func (e *ChannelForbidden) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Broadcast) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Megagroup) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.UntilDate) {
		flag |= 1 << 16
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.Title)
	if !zero.IsZeroVal(e.UntilDate) {
		buf.PutInt(e.UntilDate)
	}
	return buf.Result()
}

func (e *ChannelForbidden) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Broadcast != false {
		flag |= 1 << 5
	}
	if e.Megagroup != false {
		flag |= 1 << 8
	}
	if e.UntilDate != 0 {
		flag |= 1 << 16
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.Title)
	if e.UntilDate != 0 {
		buf.PutInt(e.UntilDate)
	}
	return buf.Result()
}

type ChatEmpty struct {
	Id int32 `validate:"required"`
}

func (e *ChatEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*ChatEmpty) CRC() uint32 {
	return uint32(0x9ba2d800)
}

func (*ChatEmpty) ImplementsChat() {}

func (e *ChatEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *ChatEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type ChatObj struct {
	AdminRights         *ChatAdminRights  `flag:"14"`
	Creator             bool              `flag:"0,encoded_in_bitflags"`
	Date                int32             `validate:"required"`
	Deactivated         bool              `flag:"5,encoded_in_bitflags"`
	DefaultBannedRights *ChatBannedRights `flag:"18"`
	__flagsPosition     struct{}          // flags param position `validate:"required"`
	Id                  int32             `validate:"required"`
	Kicked              bool              `flag:"1,encoded_in_bitflags"`
	Left                bool              `flag:"2,encoded_in_bitflags"`
	MigratedTo          InputChannel      `flag:"6"`
	ParticipantsCount   int32             `validate:"required"`
	Photo               ChatPhoto         `validate:"required"`
	Title               string            `validate:"required"`
	Version             int32             `validate:"required"`
}

func (e *ChatObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantsCount == 0 {
		return fmt.Errorf("field 'ParticipantsCount' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*ChatObj) CRC() uint32 {
	return uint32(0x3bda1bde)
}

func (*ChatObj) ImplementsChat() {}

func (e *ChatObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Creator) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Kicked) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Left) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Deactivated) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.MigratedTo) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.AdminRights) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.DefaultBannedRights) {
		flag |= 1 << 18
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.AdminRights) {
		buf.PutRawBytes(e.AdminRights.Encode())
	}
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.DefaultBannedRights) {
		buf.PutRawBytes(e.DefaultBannedRights.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.MigratedTo) {
		buf.PutRawBytes(e.MigratedTo.Encode())
	}
	buf.PutInt(e.ParticipantsCount)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.Title)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *ChatObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Creator != false {
		flag |= 1 << 0
	}
	if e.Kicked != false {
		flag |= 1 << 1
	}
	if e.Left != false {
		flag |= 1 << 2
	}
	if e.Deactivated != false {
		flag |= 1 << 5
	}
	if e.MigratedTo.Validate() == nil {
		flag |= 1 << 6
	}
	if e.AdminRights.Validate() == nil {
		flag |= 1 << 14
	}
	if e.DefaultBannedRights.Validate() == nil {
		flag |= 1 << 18
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.AdminRights.Validate() == nil {
		buf.PutRawBytes(e.AdminRights.Encode())
	}
	buf.PutInt(e.Date)
	if e.DefaultBannedRights.Validate() == nil {
		buf.PutRawBytes(e.DefaultBannedRights.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if e.MigratedTo.Validate() == nil {
		buf.PutRawBytes(e.MigratedTo.Encode())
	}
	buf.PutInt(e.ParticipantsCount)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.Title)
	buf.PutInt(e.Version)
	return buf.Result()
}

type ChatFull interface {
	serialize.TL
	ImplementsChatFull()
	Validate() error
}

type ChannelFull struct {
	About                string              `validate:"required"`
	AdminsCount          int32               `flag:"1"`
	AvailableMinId       int32               `flag:"9"`
	BannedCount          int32               `flag:"2"`
	BotInfo              []*BotInfo          `validate:"required"`
	CanSetLocation       bool                `flag:"16,encoded_in_bitflags"`
	CanSetStickers       bool                `flag:"7,encoded_in_bitflags"`
	CanSetUsername       bool                `flag:"6,encoded_in_bitflags"`
	CanViewParticipants  bool                `flag:"3,encoded_in_bitflags"`
	CanViewStats         bool                `flag:"20,encoded_in_bitflags"`
	ChatPhoto            Photo               `validate:"required"`
	ExportedInvite       ExportedChatInvite  `validate:"required"`
	__flagsPosition      struct{}            // flags param position `validate:"required"`
	FolderId             int32               `flag:"11"`
	HasScheduled         bool                `flag:"19,encoded_in_bitflags"`
	HiddenPrehistory     bool                `flag:"10,encoded_in_bitflags"`
	Id                   int32               `validate:"required"`
	KickedCount          int32               `flag:"2"`
	LinkedChatId         int32               `flag:"14"`
	Location             ChannelLocation     `flag:"15"`
	MigratedFromChatId   int32               `flag:"4"`
	MigratedFromMaxId    int32               `flag:"4"`
	NotifySettings       *PeerNotifySettings `validate:"required"`
	OnlineCount          int32               `flag:"13"`
	ParticipantsCount    int32               `flag:"0"`
	PinnedMsgId          int32               `flag:"5"`
	Pts                  int32               `validate:"required"`
	ReadInboxMaxId       int32               `validate:"required"`
	ReadOutboxMaxId      int32               `validate:"required"`
	SlowmodeNextSendDate int32               `flag:"18"`
	SlowmodeSeconds      int32               `flag:"17"`
	StatsDc              int32               `flag:"12"`
	Stickerset           *StickerSet         `flag:"8"`
	UnreadCount          int32               `validate:"required"`
}

func (e *ChannelFull) Validate() error {
	if e.About == "" {
		return fmt.Errorf("field 'About' is not set")
	} // builtin_check

	if len(e.BotInfo) == 0 {
		return fmt.Errorf("field 'BotInfo' is not set")
	} // slice_len_check
	for _, item := range e.BotInfo {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'BotInfo': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.ChatPhoto.Validate(); err != nil {
		return fmt.Errorf("field 'ChatPhoto': %w", err)
	} // type_iter_check

	if err := e.ExportedInvite.Validate(); err != nil {
		return fmt.Errorf("field 'ExportedInvite': %w", err)
	} // type_iter_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.NotifySettings.Validate(); err != nil {
		return fmt.Errorf("field 'NotifySettings': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.ReadInboxMaxId == 0 {
		return fmt.Errorf("field 'ReadInboxMaxId' is not set")
	} // builtin_check

	return nil
}

func (*ChannelFull) CRC() uint32 {
	return uint32(0xf0e6672a)
}

func (*ChannelFull) ImplementsChatFull() {}

func (e *ChannelFull) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ParticipantsCount) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.AdminsCount) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.BannedCount) || !zero.IsZeroVal(e.KickedCount) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.CanViewParticipants) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.MigratedFromChatId) || !zero.IsZeroVal(e.MigratedFromMaxId) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.PinnedMsgId) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.CanSetUsername) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.CanSetStickers) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.Stickerset) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.AvailableMinId) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.HiddenPrehistory) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.StatsDc) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.OnlineCount) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.LinkedChatId) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.Location) {
		flag |= 1 << 15
	}
	if !zero.IsZeroVal(e.CanSetLocation) {
		flag |= 1 << 16
	}
	if !zero.IsZeroVal(e.SlowmodeSeconds) {
		flag |= 1 << 17
	}
	if !zero.IsZeroVal(e.SlowmodeNextSendDate) {
		flag |= 1 << 18
	}
	if !zero.IsZeroVal(e.HasScheduled) {
		flag |= 1 << 19
	}
	if !zero.IsZeroVal(e.CanViewStats) {
		flag |= 1 << 20
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.About)
	if !zero.IsZeroVal(e.AdminsCount) {
		buf.PutInt(e.AdminsCount)
	}
	if !zero.IsZeroVal(e.AvailableMinId) {
		buf.PutInt(e.AvailableMinId)
	}
	if !zero.IsZeroVal(e.BannedCount) {
		buf.PutInt(e.BannedCount)
	}
	buf.PutVector(e.BotInfo)
	buf.PutRawBytes(e.ChatPhoto.Encode())
	buf.PutRawBytes(e.ExportedInvite.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.KickedCount) {
		buf.PutInt(e.KickedCount)
	}
	if !zero.IsZeroVal(e.LinkedChatId) {
		buf.PutInt(e.LinkedChatId)
	}
	if !zero.IsZeroVal(e.Location) {
		buf.PutRawBytes(e.Location.Encode())
	}
	if !zero.IsZeroVal(e.MigratedFromChatId) {
		buf.PutInt(e.MigratedFromChatId)
	}
	if !zero.IsZeroVal(e.MigratedFromMaxId) {
		buf.PutInt(e.MigratedFromMaxId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	if !zero.IsZeroVal(e.OnlineCount) {
		buf.PutInt(e.OnlineCount)
	}
	if !zero.IsZeroVal(e.ParticipantsCount) {
		buf.PutInt(e.ParticipantsCount)
	}
	if !zero.IsZeroVal(e.PinnedMsgId) {
		buf.PutInt(e.PinnedMsgId)
	}
	buf.PutInt(e.Pts)
	buf.PutInt(e.ReadInboxMaxId)
	buf.PutInt(e.ReadOutboxMaxId)
	if !zero.IsZeroVal(e.SlowmodeNextSendDate) {
		buf.PutInt(e.SlowmodeNextSendDate)
	}
	if !zero.IsZeroVal(e.SlowmodeSeconds) {
		buf.PutInt(e.SlowmodeSeconds)
	}
	if !zero.IsZeroVal(e.StatsDc) {
		buf.PutInt(e.StatsDc)
	}
	if !zero.IsZeroVal(e.Stickerset) {
		buf.PutRawBytes(e.Stickerset.Encode())
	}
	buf.PutInt(e.UnreadCount)
	return buf.Result()
}

func (e *ChannelFull) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ParticipantsCount != 0 {
		flag |= 1 << 0
	}
	if e.AdminsCount != 0 {
		flag |= 1 << 1
	}
	if e.BannedCount != 0 || e.KickedCount != 0 {
		flag |= 1 << 2
	}
	if e.CanViewParticipants != false {
		flag |= 1 << 3
	}
	if e.MigratedFromChatId != 0 || e.MigratedFromMaxId != 0 {
		flag |= 1 << 4
	}
	if e.PinnedMsgId != 0 {
		flag |= 1 << 5
	}
	if e.CanSetUsername != false {
		flag |= 1 << 6
	}
	if e.CanSetStickers != false {
		flag |= 1 << 7
	}
	if e.Stickerset.Validate() == nil {
		flag |= 1 << 8
	}
	if e.AvailableMinId != 0 {
		flag |= 1 << 9
	}
	if e.HiddenPrehistory != false {
		flag |= 1 << 10
	}
	if e.FolderId != 0 {
		flag |= 1 << 11
	}
	if e.StatsDc != 0 {
		flag |= 1 << 12
	}
	if e.OnlineCount != 0 {
		flag |= 1 << 13
	}
	if e.LinkedChatId != 0 {
		flag |= 1 << 14
	}
	if e.Location.Validate() == nil {
		flag |= 1 << 15
	}
	if e.CanSetLocation != false {
		flag |= 1 << 16
	}
	if e.SlowmodeSeconds != 0 {
		flag |= 1 << 17
	}
	if e.SlowmodeNextSendDate != 0 {
		flag |= 1 << 18
	}
	if e.HasScheduled != false {
		flag |= 1 << 19
	}
	if e.CanViewStats != false {
		flag |= 1 << 20
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.About)
	if e.AdminsCount != 0 {
		buf.PutInt(e.AdminsCount)
	}
	if e.AvailableMinId != 0 {
		buf.PutInt(e.AvailableMinId)
	}
	if e.BannedCount != 0 {
		buf.PutInt(e.BannedCount)
	}
	buf.PutVector(e.BotInfo)
	buf.PutRawBytes(e.ChatPhoto.Encode())
	buf.PutRawBytes(e.ExportedInvite.Encode())
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.Id)
	if e.KickedCount != 0 {
		buf.PutInt(e.KickedCount)
	}
	if e.LinkedChatId != 0 {
		buf.PutInt(e.LinkedChatId)
	}
	if e.Location.Validate() == nil {
		buf.PutRawBytes(e.Location.Encode())
	}
	if e.MigratedFromChatId != 0 {
		buf.PutInt(e.MigratedFromChatId)
	}
	if e.MigratedFromMaxId != 0 {
		buf.PutInt(e.MigratedFromMaxId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	if e.OnlineCount != 0 {
		buf.PutInt(e.OnlineCount)
	}
	if e.ParticipantsCount != 0 {
		buf.PutInt(e.ParticipantsCount)
	}
	if e.PinnedMsgId != 0 {
		buf.PutInt(e.PinnedMsgId)
	}
	buf.PutInt(e.Pts)
	buf.PutInt(e.ReadInboxMaxId)
	buf.PutInt(e.ReadOutboxMaxId)
	if e.SlowmodeNextSendDate != 0 {
		buf.PutInt(e.SlowmodeNextSendDate)
	}
	if e.SlowmodeSeconds != 0 {
		buf.PutInt(e.SlowmodeSeconds)
	}
	if e.StatsDc != 0 {
		buf.PutInt(e.StatsDc)
	}
	if e.Stickerset.Validate() == nil {
		buf.PutRawBytes(e.Stickerset.Encode())
	}
	buf.PutInt(e.UnreadCount)
	return buf.Result()
}

type ChatFullObj struct {
	About           string              `validate:"required"`
	BotInfo         []*BotInfo          `flag:"3"`
	CanSetUsername  bool                `flag:"7,encoded_in_bitflags"`
	ChatPhoto       Photo               `flag:"2"`
	ExportedInvite  ExportedChatInvite  `validate:"required"`
	__flagsPosition struct{}            // flags param position `validate:"required"`
	FolderId        int32               `flag:"11"`
	HasScheduled    bool                `flag:"8,encoded_in_bitflags"`
	Id              int32               `validate:"required"`
	NotifySettings  *PeerNotifySettings `validate:"required"`
	Participants    ChatParticipants    `validate:"required"`
	PinnedMsgId     int32               `flag:"6"`
}

func (e *ChatFullObj) Validate() error {
	if e.About == "" {
		return fmt.Errorf("field 'About' is not set")
	} // builtin_check

	if err := e.ExportedInvite.Validate(); err != nil {
		return fmt.Errorf("field 'ExportedInvite': %w", err)
	} // type_iter_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.NotifySettings.Validate(); err != nil {
		return fmt.Errorf("field 'NotifySettings': %w", err)
	} // type_iter_check

	if err := e.Participants.Validate(); err != nil {
		return fmt.Errorf("field 'Participants': %w", err)
	} // type_iter_check

	return nil
}

func (*ChatFullObj) CRC() uint32 {
	return uint32(0x1b7c9db3)
}

func (*ChatFullObj) ImplementsChatFull() {}

func (e *ChatFullObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ChatPhoto) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.BotInfo) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.PinnedMsgId) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.CanSetUsername) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.HasScheduled) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 11
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.About)
	if !zero.IsZeroVal(e.BotInfo) {
		buf.PutVector(e.BotInfo)
	}
	if !zero.IsZeroVal(e.ChatPhoto) {
		buf.PutRawBytes(e.ChatPhoto.Encode())
	}
	buf.PutRawBytes(e.ExportedInvite.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.Id)
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Participants.Encode())
	if !zero.IsZeroVal(e.PinnedMsgId) {
		buf.PutInt(e.PinnedMsgId)
	}
	return buf.Result()
}

func (e *ChatFullObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ChatPhoto.Validate() == nil {
		flag |= 1 << 2
	}
	if len(e.BotInfo) > 0 {
		flag |= 1 << 3
	}
	if e.PinnedMsgId != 0 {
		flag |= 1 << 6
	}
	if e.CanSetUsername != false {
		flag |= 1 << 7
	}
	if e.HasScheduled != false {
		flag |= 1 << 8
	}
	if e.FolderId != 0 {
		flag |= 1 << 11
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.About)
	if len(e.BotInfo) > 0 {
		buf.PutVector(e.BotInfo)
	}
	if e.ChatPhoto.Validate() == nil {
		buf.PutRawBytes(e.ChatPhoto.Encode())
	}
	buf.PutRawBytes(e.ExportedInvite.Encode())
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.Id)
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Participants.Encode())
	if e.PinnedMsgId != 0 {
		buf.PutInt(e.PinnedMsgId)
	}
	return buf.Result()
}

type ChatInvite interface {
	serialize.TL
	ImplementsChatInvite()
	Validate() error
}

type ChatInviteAlready struct {
	Chat Chat `validate:"required"`
}

func (e *ChatInviteAlready) Validate() error {
	if err := e.Chat.Validate(); err != nil {
		return fmt.Errorf("field 'Chat': %w", err)
	} // type_iter_check

	return nil
}

func (*ChatInviteAlready) CRC() uint32 {
	return uint32(0x5a686d7c)
}

func (*ChatInviteAlready) ImplementsChatInvite() {}

func (e *ChatInviteAlready) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	return buf.Result()
}

func (e *ChatInviteAlready) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	return buf.Result()
}

type ChatInviteObj struct {
	Broadcast         bool     `flag:"1,encoded_in_bitflags"`
	Channel           bool     `flag:"0,encoded_in_bitflags"`
	__flagsPosition   struct{} // flags param position `validate:"required"`
	Megagroup         bool     `flag:"3,encoded_in_bitflags"`
	Participants      []User   `flag:"4"`
	ParticipantsCount int32    `validate:"required"`
	Photo             Photo    `validate:"required"`
	Public            bool     `flag:"2,encoded_in_bitflags"`
	Title             string   `validate:"required"`
}

func (e *ChatInviteObj) Validate() error {

	if e.ParticipantsCount == 0 {
		return fmt.Errorf("field 'ParticipantsCount' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*ChatInviteObj) CRC() uint32 {
	return uint32(0xdfc2f58e)
}

func (*ChatInviteObj) ImplementsChatInvite() {}

func (e *ChatInviteObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Channel) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Broadcast) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Public) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Megagroup) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Participants) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Participants) {
		buf.PutVector(e.Participants)
	}
	buf.PutInt(e.ParticipantsCount)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *ChatInviteObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Channel != false {
		flag |= 1 << 0
	}
	if e.Broadcast != false {
		flag |= 1 << 1
	}
	if e.Public != false {
		flag |= 1 << 2
	}
	if e.Megagroup != false {
		flag |= 1 << 3
	}
	if len(e.Participants) > 0 {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if len(e.Participants) > 0 {
		buf.PutVector(e.Participants)
	}
	buf.PutInt(e.ParticipantsCount)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutString(e.Title)
	return buf.Result()
}

type ChatInvitePeek struct {
	Chat    Chat  `validate:"required"`
	Expires int32 `validate:"required"`
}

func (e *ChatInvitePeek) Validate() error {
	if err := e.Chat.Validate(); err != nil {
		return fmt.Errorf("field 'Chat': %w", err)
	} // type_iter_check

	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	return nil
}

func (*ChatInvitePeek) CRC() uint32 {
	return uint32(0x61695cb0)
}

func (*ChatInvitePeek) ImplementsChatInvite() {}

func (e *ChatInvitePeek) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	buf.PutInt(e.Expires)
	return buf.Result()
}

func (e *ChatInvitePeek) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	buf.PutInt(e.Expires)
	return buf.Result()
}

type ChatParticipant interface {
	serialize.TL
	ImplementsChatParticipant()
	Validate() error
}

type ChatParticipantCreator struct {
	UserId int32 `validate:"required"`
}

func (e *ChatParticipantCreator) Validate() error {
	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChatParticipantCreator) CRC() uint32 {
	return uint32(0xda13538a)
}

func (*ChatParticipantCreator) ImplementsChatParticipant() {}

func (e *ChatParticipantCreator) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChatParticipantCreator) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChatParticipantObj struct {
	Date      int32 `validate:"required"`
	InviterId int32 `validate:"required"`
	UserId    int32 `validate:"required"`
}

func (e *ChatParticipantObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.InviterId == 0 {
		return fmt.Errorf("field 'InviterId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChatParticipantObj) CRC() uint32 {
	return uint32(0xc8d7493e)
}

func (*ChatParticipantObj) ImplementsChatParticipant() {}

func (e *ChatParticipantObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChatParticipantObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChatParticipantAdmin struct {
	Date      int32 `validate:"required"`
	InviterId int32 `validate:"required"`
	UserId    int32 `validate:"required"`
}

func (e *ChatParticipantAdmin) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.InviterId == 0 {
		return fmt.Errorf("field 'InviterId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*ChatParticipantAdmin) CRC() uint32 {
	return uint32(0xe2d6e436)
}

func (*ChatParticipantAdmin) ImplementsChatParticipant() {}

func (e *ChatParticipantAdmin) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *ChatParticipantAdmin) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type ChatParticipants interface {
	serialize.TL
	ImplementsChatParticipants()
	Validate() error
}

type ChatParticipantsObj struct {
	ChatId       int32             `validate:"required"`
	Participants []ChatParticipant `validate:"required"`
	Version      int32             `validate:"required"`
}

func (e *ChatParticipantsObj) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if len(e.Participants) == 0 {
		return fmt.Errorf("field 'Participants' is not set")
	} // slice_len_check
	for _, item := range e.Participants {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Participants': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*ChatParticipantsObj) CRC() uint32 {
	return uint32(0x3f460fed)
}

func (*ChatParticipantsObj) ImplementsChatParticipants() {}

func (e *ChatParticipantsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutVector(e.Participants)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *ChatParticipantsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutVector(e.Participants)
	buf.PutInt(e.Version)
	return buf.Result()
}

type ChatParticipantsForbidden struct {
	ChatId          int32           `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	SelfParticipant ChatParticipant `flag:"0"`
}

func (e *ChatParticipantsForbidden) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	return nil
}

func (*ChatParticipantsForbidden) CRC() uint32 {
	return uint32(0xfc900c2b)
}

func (*ChatParticipantsForbidden) ImplementsChatParticipants() {}

func (e *ChatParticipantsForbidden) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SelfParticipant) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.SelfParticipant) {
		buf.PutRawBytes(e.SelfParticipant.Encode())
	}
	return buf.Result()
}

func (e *ChatParticipantsForbidden) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SelfParticipant.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutUint(flag)
	if e.SelfParticipant.Validate() == nil {
		buf.PutRawBytes(e.SelfParticipant.Encode())
	}
	return buf.Result()
}

type ChatPhoto interface {
	serialize.TL
	ImplementsChatPhoto()
	Validate() error
}

type ChatPhotoEmpty struct{}

func (e *ChatPhotoEmpty) Validate() error {
	return nil
}

func (*ChatPhotoEmpty) CRC() uint32 {
	return uint32(0x37c1011c)
}

func (*ChatPhotoEmpty) ImplementsChatPhoto() {}

func (e *ChatPhotoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChatPhotoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ChatPhotoObj struct {
	DcId            int32         `validate:"required"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	HasVideo        bool          `flag:"0,encoded_in_bitflags"`
	PhotoBig        *FileLocation `validate:"required"`
	PhotoSmall      *FileLocation `validate:"required"`
}

func (e *ChatPhotoObj) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if err := e.PhotoBig.Validate(); err != nil {
		return fmt.Errorf("field 'PhotoBig': %w", err)
	} // type_iter_check

	if err := e.PhotoSmall.Validate(); err != nil {
		return fmt.Errorf("field 'PhotoSmall': %w", err)
	} // type_iter_check

	return nil
}

func (*ChatPhotoObj) CRC() uint32 {
	return uint32(0xd20b9f3c)
}

func (*ChatPhotoObj) ImplementsChatPhoto() {}

func (e *ChatPhotoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.HasVideo) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.PhotoBig.Encode())
	buf.PutRawBytes(e.PhotoSmall.Encode())
	return buf.Result()
}

func (e *ChatPhotoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.HasVideo != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.PhotoBig.Encode())
	buf.PutRawBytes(e.PhotoSmall.Encode())
	return buf.Result()
}

type Dialog interface {
	serialize.TL
	ImplementsDialog()
	Validate() error
}

type DialogObj struct {
	Draft               DraftMessage        `flag:"1"`
	__flagsPosition     struct{}            // flags param position `validate:"required"`
	FolderId            int32               `flag:"4"`
	NotifySettings      *PeerNotifySettings `validate:"required"`
	Peer                Peer                `validate:"required"`
	Pinned              bool                `flag:"2,encoded_in_bitflags"`
	Pts                 int32               `flag:"0"`
	ReadInboxMaxId      int32               `validate:"required"`
	ReadOutboxMaxId     int32               `validate:"required"`
	TopMessage          int32               `validate:"required"`
	UnreadCount         int32               `validate:"required"`
	UnreadMark          bool                `flag:"3,encoded_in_bitflags"`
	UnreadMentionsCount int32               `validate:"required"`
}

func (e *DialogObj) Validate() error {

	if err := e.NotifySettings.Validate(); err != nil {
		return fmt.Errorf("field 'NotifySettings': %w", err)
	} // type_iter_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.ReadInboxMaxId == 0 {
		return fmt.Errorf("field 'ReadInboxMaxId' is not set")
	} // builtin_check

	if e.ReadOutboxMaxId == 0 {
		return fmt.Errorf("field 'ReadOutboxMaxId' is not set")
	} // builtin_check

	if e.TopMessage == 0 {
		return fmt.Errorf("field 'TopMessage' is not set")
	} // builtin_check

	if e.UnreadCount == 0 {
		return fmt.Errorf("field 'UnreadCount' is not set")
	} // builtin_check

	if e.UnreadMentionsCount == 0 {
		return fmt.Errorf("field 'UnreadMentionsCount' is not set")
	} // builtin_check

	return nil
}

func (*DialogObj) CRC() uint32 {
	return uint32(0x2c171f72)
}

func (*DialogObj) ImplementsDialog() {}

func (e *DialogObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Pts) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Draft) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Pinned) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.UnreadMark) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Draft) {
		buf.PutRawBytes(e.Draft.Encode())
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.Pts) {
		buf.PutInt(e.Pts)
	}
	buf.PutInt(e.ReadInboxMaxId)
	buf.PutInt(e.ReadOutboxMaxId)
	buf.PutInt(e.TopMessage)
	buf.PutInt(e.UnreadCount)
	buf.PutInt(e.UnreadMentionsCount)
	return buf.Result()
}

func (e *DialogObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Pts != 0 {
		flag |= 1 << 0
	}
	if e.Draft.Validate() == nil {
		flag |= 1 << 1
	}
	if e.Pinned != false {
		flag |= 1 << 2
	}
	if e.UnreadMark != false {
		flag |= 1 << 3
	}
	if e.FolderId != 0 {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Draft.Validate() == nil {
		buf.PutRawBytes(e.Draft.Encode())
	}
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	if e.Pts != 0 {
		buf.PutInt(e.Pts)
	}
	buf.PutInt(e.ReadInboxMaxId)
	buf.PutInt(e.ReadOutboxMaxId)
	buf.PutInt(e.TopMessage)
	buf.PutInt(e.UnreadCount)
	buf.PutInt(e.UnreadMentionsCount)
	return buf.Result()
}

type DialogFolder struct {
	__flagsPosition            struct{} // flags param position `validate:"required"`
	Folder                     *Folder  `validate:"required"`
	Peer                       Peer     `validate:"required"`
	Pinned                     bool     `flag:"2,encoded_in_bitflags"`
	TopMessage                 int32    `validate:"required"`
	UnreadMutedMessagesCount   int32    `validate:"required"`
	UnreadMutedPeersCount      int32    `validate:"required"`
	UnreadUnmutedMessagesCount int32    `validate:"required"`
	UnreadUnmutedPeersCount    int32    `validate:"required"`
}

func (e *DialogFolder) Validate() error {

	if err := e.Folder.Validate(); err != nil {
		return fmt.Errorf("field 'Folder': %w", err)
	} // type_iter_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.TopMessage == 0 {
		return fmt.Errorf("field 'TopMessage' is not set")
	} // builtin_check

	if e.UnreadMutedMessagesCount == 0 {
		return fmt.Errorf("field 'UnreadMutedMessagesCount' is not set")
	} // builtin_check

	if e.UnreadMutedPeersCount == 0 {
		return fmt.Errorf("field 'UnreadMutedPeersCount' is not set")
	} // builtin_check

	if e.UnreadUnmutedMessagesCount == 0 {
		return fmt.Errorf("field 'UnreadUnmutedMessagesCount' is not set")
	} // builtin_check

	if e.UnreadUnmutedPeersCount == 0 {
		return fmt.Errorf("field 'UnreadUnmutedPeersCount' is not set")
	} // builtin_check

	return nil
}

func (*DialogFolder) CRC() uint32 {
	return uint32(0x71bd134c)
}

func (*DialogFolder) ImplementsDialog() {}

func (e *DialogFolder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Pinned) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Folder.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.TopMessage)
	buf.PutInt(e.UnreadMutedMessagesCount)
	buf.PutInt(e.UnreadMutedPeersCount)
	buf.PutInt(e.UnreadUnmutedMessagesCount)
	buf.PutInt(e.UnreadUnmutedPeersCount)
	return buf.Result()
}

func (e *DialogFolder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Pinned != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Folder.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.TopMessage)
	buf.PutInt(e.UnreadMutedMessagesCount)
	buf.PutInt(e.UnreadMutedPeersCount)
	buf.PutInt(e.UnreadUnmutedMessagesCount)
	buf.PutInt(e.UnreadUnmutedPeersCount)
	return buf.Result()
}

type DialogPeer interface {
	serialize.TL
	ImplementsDialogPeer()
	Validate() error
}

type DialogPeerObj struct {
	Peer Peer `validate:"required"`
}

func (e *DialogPeerObj) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*DialogPeerObj) CRC() uint32 {
	return uint32(0xe56dbf05)
}

func (*DialogPeerObj) ImplementsDialogPeer() {}

func (e *DialogPeerObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *DialogPeerObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type DialogPeerFolder struct {
	FolderId int32 `validate:"required"`
}

func (e *DialogPeerFolder) Validate() error {
	if e.FolderId == 0 {
		return fmt.Errorf("field 'FolderId' is not set")
	} // builtin_check

	return nil
}

func (*DialogPeerFolder) CRC() uint32 {
	return uint32(0x514519e2)
}

func (*DialogPeerFolder) ImplementsDialogPeer() {}

func (e *DialogPeerFolder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

func (e *DialogPeerFolder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

type Document interface {
	serialize.TL
	ImplementsDocument()
	Validate() error
}

type DocumentObj struct {
	AccessHash      int64               `validate:"required"`
	Attributes      []DocumentAttribute `validate:"required"`
	Date            int32               `validate:"required"`
	DcId            int32               `validate:"required"`
	FileReference   []byte              `validate:"required"`
	__flagsPosition struct{}            // flags param position `validate:"required"`
	Id              int64               `validate:"required"`
	MimeType        string              `validate:"required"`
	Size            int32               `validate:"required"`
	Thumbs          []PhotoSize         `flag:"0"`
	VideoThumbs     []*VideoSize        `flag:"1"`
}

func (e *DocumentObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.Attributes) == 0 {
		return fmt.Errorf("field 'Attributes' is not set")
	} // slice_len_check
	for _, item := range e.Attributes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Attributes': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	return nil
}

func (*DocumentObj) CRC() uint32 {
	return uint32(0x1e87342b)
}

func (*DocumentObj) ImplementsDocument() {}

func (e *DocumentObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Thumbs) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.VideoThumbs) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutVector(e.Attributes)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileReference)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	if !zero.IsZeroVal(e.Thumbs) {
		buf.PutVector(e.Thumbs)
	}
	if !zero.IsZeroVal(e.VideoThumbs) {
		buf.PutVector(e.VideoThumbs)
	}
	return buf.Result()
}

func (e *DocumentObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Thumbs) > 0 {
		flag |= 1 << 0
	}
	if len(e.VideoThumbs) > 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutVector(e.Attributes)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileReference)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	if len(e.Thumbs) > 0 {
		buf.PutVector(e.Thumbs)
	}
	if len(e.VideoThumbs) > 0 {
		buf.PutVector(e.VideoThumbs)
	}
	return buf.Result()
}

type DocumentEmpty struct {
	Id int64 `validate:"required"`
}

func (e *DocumentEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*DocumentEmpty) CRC() uint32 {
	return uint32(0x36f8c871)
}

func (*DocumentEmpty) ImplementsDocument() {}

func (e *DocumentEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *DocumentEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

type DocumentAttribute interface {
	serialize.TL
	ImplementsDocumentAttribute()
	Validate() error
}

type DocumentAttributeAnimated struct{}

func (e *DocumentAttributeAnimated) Validate() error {
	return nil
}

func (*DocumentAttributeAnimated) CRC() uint32 {
	return uint32(0x11b58939)
}

func (*DocumentAttributeAnimated) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeAnimated) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *DocumentAttributeAnimated) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type DocumentAttributeHasStickers struct{}

func (e *DocumentAttributeHasStickers) Validate() error {
	return nil
}

func (*DocumentAttributeHasStickers) CRC() uint32 {
	return uint32(0x9801d2f7)
}

func (*DocumentAttributeHasStickers) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeHasStickers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *DocumentAttributeHasStickers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type DocumentAttributeFilename struct {
	FileName string `validate:"required"`
}

func (e *DocumentAttributeFilename) Validate() error {
	if e.FileName == "" {
		return fmt.Errorf("field 'FileName' is not set")
	} // builtin_check

	return nil
}

func (*DocumentAttributeFilename) CRC() uint32 {
	return uint32(0x15590068)
}

func (*DocumentAttributeFilename) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeFilename) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FileName)
	return buf.Result()
}

func (e *DocumentAttributeFilename) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FileName)
	return buf.Result()
}

type DocumentAttributeImageSize struct {
	H int32 `validate:"required"`
	W int32 `validate:"required"`
}

func (e *DocumentAttributeImageSize) Validate() error {
	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (*DocumentAttributeImageSize) CRC() uint32 {
	return uint32(0x6c37c15c)
}

func (*DocumentAttributeImageSize) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeImageSize) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *DocumentAttributeImageSize) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

type DocumentAttributeAudio struct {
	Duration        int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Performer       string   `flag:"1"`
	Title           string   `flag:"0"`
	Voice           bool     `flag:"10,encoded_in_bitflags"`
	Waveform        []byte   `flag:"2"`
}

func (e *DocumentAttributeAudio) Validate() error {
	if e.Duration == 0 {
		return fmt.Errorf("field 'Duration' is not set")
	} // builtin_check

	return nil
}

func (*DocumentAttributeAudio) CRC() uint32 {
	return uint32(0x9852f9c6)
}

func (*DocumentAttributeAudio) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeAudio) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Performer) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Waveform) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Voice) {
		flag |= 1 << 10
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Duration)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Performer) {
		buf.PutString(e.Performer)
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	if !zero.IsZeroVal(e.Waveform) {
		buf.PutMessage(e.Waveform)
	}
	return buf.Result()
}

func (e *DocumentAttributeAudio) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Title != "" {
		flag |= 1 << 0
	}
	if e.Performer != "" {
		flag |= 1 << 1
	}
	if len(e.Waveform) > 0 {
		flag |= 1 << 2
	}
	if e.Voice != false {
		flag |= 1 << 10
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Duration)
	buf.PutUint(flag)
	if e.Performer != "" {
		buf.PutString(e.Performer)
	}
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	if len(e.Waveform) > 0 {
		buf.PutMessage(e.Waveform)
	}
	return buf.Result()
}

type DocumentAttributeSticker struct {
	Alt             string          `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Mask            bool            `flag:"1,encoded_in_bitflags"`
	MaskCoords      *MaskCoords     `flag:"0"`
	Stickerset      InputStickerSet `validate:"required"`
}

func (e *DocumentAttributeSticker) Validate() error {
	if e.Alt == "" {
		return fmt.Errorf("field 'Alt' is not set")
	} // builtin_check

	if err := e.Stickerset.Validate(); err != nil {
		return fmt.Errorf("field 'Stickerset': %w", err)
	} // type_iter_check

	return nil
}

func (*DocumentAttributeSticker) CRC() uint32 {
	return uint32(0x6319d612)
}

func (*DocumentAttributeSticker) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeSticker) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.MaskCoords) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Mask) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Alt)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.MaskCoords) {
		buf.PutRawBytes(e.MaskCoords.Encode())
	}
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

func (e *DocumentAttributeSticker) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.MaskCoords.Validate() == nil {
		flag |= 1 << 0
	}
	if e.Mask != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Alt)
	buf.PutUint(flag)
	if e.MaskCoords.Validate() == nil {
		buf.PutRawBytes(e.MaskCoords.Encode())
	}
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

type DocumentAttributeVideo struct {
	Duration          int32    `validate:"required"`
	__flagsPosition   struct{} // flags param position `validate:"required"`
	H                 int32    `validate:"required"`
	RoundMessage      bool     `flag:"0,encoded_in_bitflags"`
	SupportsStreaming bool     `flag:"1,encoded_in_bitflags"`
	W                 int32    `validate:"required"`
}

func (e *DocumentAttributeVideo) Validate() error {
	if e.Duration == 0 {
		return fmt.Errorf("field 'Duration' is not set")
	} // builtin_check

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (*DocumentAttributeVideo) CRC() uint32 {
	return uint32(0xef02ce6)
}

func (*DocumentAttributeVideo) ImplementsDocumentAttribute() {}

func (e *DocumentAttributeVideo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.RoundMessage) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SupportsStreaming) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Duration)
	buf.PutUint(flag)
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *DocumentAttributeVideo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.RoundMessage != false {
		flag |= 1 << 0
	}
	if e.SupportsStreaming != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Duration)
	buf.PutUint(flag)
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

type DraftMessage interface {
	serialize.TL
	ImplementsDraftMessage()
	Validate() error
}

type DraftMessageEmpty struct {
	Date            int32    `flag:"0"`
	__flagsPosition struct{} // flags param position `validate:"required"`
}

func (e *DraftMessageEmpty) Validate() error {

	return nil
}

func (*DraftMessageEmpty) CRC() uint32 {
	return uint32(0x1b0c841a)
}

func (*DraftMessageEmpty) ImplementsDraftMessage() {}

func (e *DraftMessageEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Date) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Date) {
		buf.PutInt(e.Date)
	}
	buf.PutUint(flag)
	return buf.Result()
}

func (e *DraftMessageEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Date != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Date != 0 {
		buf.PutInt(e.Date)
	}
	buf.PutUint(flag)
	return buf.Result()
}

type DraftMessageObj struct {
	Date            int32           `validate:"required"`
	Entities        []MessageEntity `flag:"3"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	NoWebpage       bool            `flag:"1,encoded_in_bitflags"`
	ReplyToMsgId    int32           `flag:"0"`
}

func (e *DraftMessageObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*DraftMessageObj) CRC() uint32 {
	return uint32(0xfd8e711f)
}

func (*DraftMessageObj) ImplementsDraftMessage() {}

func (e *DraftMessageObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	return buf.Result()
}

func (e *DraftMessageObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyToMsgId != 0 {
		flag |= 1 << 0
	}
	if e.NoWebpage != false {
		flag |= 1 << 1
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if e.ReplyToMsgId != 0 {
		buf.PutInt(e.ReplyToMsgId)
	}
	return buf.Result()
}

type EmojiKeyword interface {
	serialize.TL
	ImplementsEmojiKeyword()
	Validate() error
}

type EmojiKeywordObj struct {
	Emoticons []string `validate:"required"`
	Keyword   string   `validate:"required"`
}

func (e *EmojiKeywordObj) Validate() error {
	if len(e.Emoticons) == 0 {
		return fmt.Errorf("field 'Emoticons' is not set")
	} // slice_len_check
	for _, item := range e.Emoticons {
		if item == "" {
			return fmt.Errorf("field 'Emoticons' is not set")
		} // builtin_check
	} // subitem_check

	if e.Keyword == "" {
		return fmt.Errorf("field 'Keyword' is not set")
	} // builtin_check

	return nil
}

func (*EmojiKeywordObj) CRC() uint32 {
	return uint32(0xd5b3b9f9)
}

func (*EmojiKeywordObj) ImplementsEmojiKeyword() {}

func (e *EmojiKeywordObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Emoticons)
	buf.PutString(e.Keyword)
	return buf.Result()
}

func (e *EmojiKeywordObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Emoticons)
	buf.PutString(e.Keyword)
	return buf.Result()
}

type EmojiKeywordDeleted struct {
	Emoticons []string `validate:"required"`
	Keyword   string   `validate:"required"`
}

func (e *EmojiKeywordDeleted) Validate() error {
	if len(e.Emoticons) == 0 {
		return fmt.Errorf("field 'Emoticons' is not set")
	} // slice_len_check
	for _, item := range e.Emoticons {
		if item == "" {
			return fmt.Errorf("field 'Emoticons' is not set")
		} // builtin_check
	} // subitem_check

	if e.Keyword == "" {
		return fmt.Errorf("field 'Keyword' is not set")
	} // builtin_check

	return nil
}

func (*EmojiKeywordDeleted) CRC() uint32 {
	return uint32(0x236df622)
}

func (*EmojiKeywordDeleted) ImplementsEmojiKeyword() {}

func (e *EmojiKeywordDeleted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Emoticons)
	buf.PutString(e.Keyword)
	return buf.Result()
}

func (e *EmojiKeywordDeleted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Emoticons)
	buf.PutString(e.Keyword)
	return buf.Result()
}

type EncryptedChat interface {
	serialize.TL
	ImplementsEncryptedChat()
	Validate() error
}

type EncryptedChatRequested struct {
	AccessHash      int64    `validate:"required"`
	AdminId         int32    `validate:"required"`
	Date            int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	FolderId        int32    `flag:"0"`
	GA              []byte   `validate:"required"`
	Id              int32    `validate:"required"`
	ParticipantId   int32    `validate:"required"`
}

func (e *EncryptedChatRequested) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.GA) == 0 {
		return fmt.Errorf("field 'GA' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedChatRequested) CRC() uint32 {
	return uint32(0x62718a82)
}

func (*EncryptedChatRequested) ImplementsEncryptedChat() {}

func (e *EncryptedChatRequested) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutMessage(e.GA)
	buf.PutInt(e.Id)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

func (e *EncryptedChatRequested) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FolderId != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutMessage(e.GA)
	buf.PutInt(e.Id)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

type EncryptedChatDiscarded struct {
	Id int32 `validate:"required"`
}

func (e *EncryptedChatDiscarded) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedChatDiscarded) CRC() uint32 {
	return uint32(0x13d6dd27)
}

func (*EncryptedChatDiscarded) ImplementsEncryptedChat() {}

func (e *EncryptedChatDiscarded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *EncryptedChatDiscarded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type EncryptedChatObj struct {
	AccessHash     int64  `validate:"required"`
	AdminId        int32  `validate:"required"`
	Date           int32  `validate:"required"`
	GAOrB          []byte `validate:"required"`
	Id             int32  `validate:"required"`
	KeyFingerprint int64  `validate:"required"`
	ParticipantId  int32  `validate:"required"`
}

func (e *EncryptedChatObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.GAOrB) == 0 {
		return fmt.Errorf("field 'GAOrB' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.KeyFingerprint == 0 {
		return fmt.Errorf("field 'KeyFingerprint' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedChatObj) CRC() uint32 {
	return uint32(0xfa56ce36)
}

func (*EncryptedChatObj) ImplementsEncryptedChat() {}

func (e *EncryptedChatObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutMessage(e.GAOrB)
	buf.PutInt(e.Id)
	buf.PutLong(e.KeyFingerprint)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

func (e *EncryptedChatObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutMessage(e.GAOrB)
	buf.PutInt(e.Id)
	buf.PutLong(e.KeyFingerprint)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

type EncryptedChatWaiting struct {
	AccessHash    int64 `validate:"required"`
	AdminId       int32 `validate:"required"`
	Date          int32 `validate:"required"`
	Id            int32 `validate:"required"`
	ParticipantId int32 `validate:"required"`
}

func (e *EncryptedChatWaiting) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedChatWaiting) CRC() uint32 {
	return uint32(0x3bf703dc)
}

func (*EncryptedChatWaiting) ImplementsEncryptedChat() {}

func (e *EncryptedChatWaiting) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutInt(e.Id)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

func (e *EncryptedChatWaiting) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutInt(e.Id)
	buf.PutInt(e.ParticipantId)
	return buf.Result()
}

type EncryptedChatEmpty struct {
	Id int32 `validate:"required"`
}

func (e *EncryptedChatEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedChatEmpty) CRC() uint32 {
	return uint32(0xab7ec0a0)
}

func (*EncryptedChatEmpty) ImplementsEncryptedChat() {}

func (e *EncryptedChatEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *EncryptedChatEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type EncryptedFile interface {
	serialize.TL
	ImplementsEncryptedFile()
	Validate() error
}

type EncryptedFileObj struct {
	AccessHash     int64 `validate:"required"`
	DcId           int32 `validate:"required"`
	Id             int64 `validate:"required"`
	KeyFingerprint int32 `validate:"required"`
	Size           int32 `validate:"required"`
}

func (e *EncryptedFileObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.KeyFingerprint == 0 {
		return fmt.Errorf("field 'KeyFingerprint' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedFileObj) CRC() uint32 {
	return uint32(0x4a70994c)
}

func (*EncryptedFileObj) ImplementsEncryptedFile() {}

func (e *EncryptedFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.DcId)
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutInt(e.Size)
	return buf.Result()
}

func (e *EncryptedFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.DcId)
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutInt(e.Size)
	return buf.Result()
}

type EncryptedFileEmpty struct{}

func (e *EncryptedFileEmpty) Validate() error {
	return nil
}

func (*EncryptedFileEmpty) CRC() uint32 {
	return uint32(0xc21f497e)
}

func (*EncryptedFileEmpty) ImplementsEncryptedFile() {}

func (e *EncryptedFileEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *EncryptedFileEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type EncryptedMessage interface {
	serialize.TL
	ImplementsEncryptedMessage()
	Validate() error
}

type EncryptedMessageService struct {
	Bytes    []byte `validate:"required"`
	ChatId   int32  `validate:"required"`
	Date     int32  `validate:"required"`
	RandomId int64  `validate:"required"`
}

func (e *EncryptedMessageService) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.RandomId == 0 {
		return fmt.Errorf("field 'RandomId' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedMessageService) CRC() uint32 {
	return uint32(0x23734b06)
}

func (*EncryptedMessageService) ImplementsEncryptedMessage() {}

func (e *EncryptedMessageService) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

func (e *EncryptedMessageService) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

type EncryptedMessageObj struct {
	Bytes    []byte        `validate:"required"`
	ChatId   int32         `validate:"required"`
	Date     int32         `validate:"required"`
	File     EncryptedFile `validate:"required"`
	RandomId int64         `validate:"required"`
}

func (e *EncryptedMessageObj) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if err := e.File.Validate(); err != nil {
		return fmt.Errorf("field 'File': %w", err)
	} // type_iter_check

	if e.RandomId == 0 {
		return fmt.Errorf("field 'RandomId' is not set")
	} // builtin_check

	return nil
}

func (*EncryptedMessageObj) CRC() uint32 {
	return uint32(0xed18c118)
}

func (*EncryptedMessageObj) ImplementsEncryptedMessage() {}

func (e *EncryptedMessageObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.File.Encode())
	buf.PutLong(e.RandomId)
	return buf.Result()
}

func (e *EncryptedMessageObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.File.Encode())
	buf.PutLong(e.RandomId)
	return buf.Result()
}

type ExportedChatInvite interface {
	serialize.TL
	ImplementsExportedChatInvite()
	Validate() error
}

type ChatInviteExported struct {
	Link string `validate:"required"`
}

func (e *ChatInviteExported) Validate() error {
	if e.Link == "" {
		return fmt.Errorf("field 'Link' is not set")
	} // builtin_check

	return nil
}

func (*ChatInviteExported) CRC() uint32 {
	return uint32(0xfc2e05bc)
}

func (*ChatInviteExported) ImplementsExportedChatInvite() {}

func (e *ChatInviteExported) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Link)
	return buf.Result()
}

func (e *ChatInviteExported) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Link)
	return buf.Result()
}

type ChatInviteEmpty struct{}

func (e *ChatInviteEmpty) Validate() error {
	return nil
}

func (*ChatInviteEmpty) CRC() uint32 {
	return uint32(0x69df3769)
}

func (*ChatInviteEmpty) ImplementsExportedChatInvite() {}

func (e *ChatInviteEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChatInviteEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type GeoPoint interface {
	serialize.TL
	ImplementsGeoPoint()
	Validate() error
}

type GeoPointEmpty struct{}

func (e *GeoPointEmpty) Validate() error {
	return nil
}

func (*GeoPointEmpty) CRC() uint32 {
	return uint32(0x1117dd5f)
}

func (*GeoPointEmpty) ImplementsGeoPoint() {}

func (e *GeoPointEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *GeoPointEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type GeoPointObj struct {
	AccessHash int64   `validate:"required"`
	Lat        float64 `validate:"required"`
	Long       float64 `validate:"required"`
}

func (e *GeoPointObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Lat == 0 {
		return fmt.Errorf("field 'Lat' is not set")
	} // builtin_check

	if e.Long == 0 {
		return fmt.Errorf("field 'Long' is not set")
	} // builtin_check

	return nil
}

func (*GeoPointObj) CRC() uint32 {
	return uint32(0x296f104)
}

func (*GeoPointObj) ImplementsGeoPoint() {}

func (e *GeoPointObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutDouble(e.Lat)
	buf.PutDouble(e.Long)
	return buf.Result()
}

func (e *GeoPointObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutDouble(e.Lat)
	buf.PutDouble(e.Long)
	return buf.Result()
}

type InputBotInlineMessage interface {
	serialize.TL
	ImplementsInputBotInlineMessage()
	Validate() error
}

type InputBotInlineMessageGame struct {
	__flagsPosition struct{}    // flags param position `validate:"required"`
	ReplyMarkup     ReplyMarkup `flag:"2"`
}

func (e *InputBotInlineMessageGame) Validate() error {

	return nil
}

func (*InputBotInlineMessageGame) CRC() uint32 {
	return uint32(0x4b425864)
}

func (*InputBotInlineMessageGame) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageGame) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *InputBotInlineMessageGame) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type InputBotInlineMessageMediaContact struct {
	FirstName       string      `validate:"required"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	LastName        string      `validate:"required"`
	PhoneNumber     string      `validate:"required"`
	ReplyMarkup     ReplyMarkup `flag:"2"`
	Vcard           string      `validate:"required"`
}

func (e *InputBotInlineMessageMediaContact) Validate() error {
	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.PhoneNumber == "" {
		return fmt.Errorf("field 'PhoneNumber' is not set")
	} // builtin_check

	if e.Vcard == "" {
		return fmt.Errorf("field 'Vcard' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineMessageMediaContact) CRC() uint32 {
	return uint32(0xa6edbffd)
}

func (*InputBotInlineMessageMediaContact) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageMediaContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutUint(flag)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Vcard)
	return buf.Result()
}

func (e *InputBotInlineMessageMediaContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutUint(flag)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Vcard)
	return buf.Result()
}

type InputBotInlineMessageMediaGeo struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	GeoPoint        InputGeoPoint `validate:"required"`
	Period          int32         `validate:"required"`
	ReplyMarkup     ReplyMarkup   `flag:"2"`
}

func (e *InputBotInlineMessageMediaGeo) Validate() error {

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	if e.Period == 0 {
		return fmt.Errorf("field 'Period' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineMessageMediaGeo) CRC() uint32 {
	return uint32(0xc1b15d65)
}

func (*InputBotInlineMessageMediaGeo) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageMediaGeo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutInt(e.Period)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *InputBotInlineMessageMediaGeo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutInt(e.Period)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type InputBotInlineMessageText struct {
	Entities        []MessageEntity `flag:"1"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	NoWebpage       bool            `flag:"0,encoded_in_bitflags"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
}

func (e *InputBotInlineMessageText) Validate() error {

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineMessageText) CRC() uint32 {
	return uint32(0x3dcd7a87)
}

func (*InputBotInlineMessageText) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageText) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NoWebpage) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *InputBotInlineMessageText) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NoWebpage != false {
		flag |= 1 << 0
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 1
	}
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type InputBotInlineMessageMediaVenue struct {
	Address         string        `validate:"required"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	GeoPoint        InputGeoPoint `validate:"required"`
	Provider        string        `validate:"required"`
	ReplyMarkup     ReplyMarkup   `flag:"2"`
	Title           string        `validate:"required"`
	VenueId         string        `validate:"required"`
	VenueType       string        `validate:"required"`
}

func (e *InputBotInlineMessageMediaVenue) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	if e.Provider == "" {
		return fmt.Errorf("field 'Provider' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.VenueId == "" {
		return fmt.Errorf("field 'VenueId' is not set")
	} // builtin_check

	if e.VenueType == "" {
		return fmt.Errorf("field 'VenueType' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineMessageMediaVenue) CRC() uint32 {
	return uint32(0x417bbf11)
}

func (*InputBotInlineMessageMediaVenue) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageMediaVenue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutString(e.Provider)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

func (e *InputBotInlineMessageMediaVenue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutString(e.Provider)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

type InputBotInlineMessageMediaAuto struct {
	Entities        []MessageEntity `flag:"1"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	ReplyMarkup     ReplyMarkup     `flag:"2"`
}

func (e *InputBotInlineMessageMediaAuto) Validate() error {

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineMessageMediaAuto) CRC() uint32 {
	return uint32(0x3380c786)
}

func (*InputBotInlineMessageMediaAuto) ImplementsInputBotInlineMessage() {}

func (e *InputBotInlineMessageMediaAuto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

func (e *InputBotInlineMessageMediaAuto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Entities) > 0 {
		flag |= 1 << 1
	}
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	return buf.Result()
}

type InputBotInlineResult interface {
	serialize.TL
	ImplementsInputBotInlineResult()
	Validate() error
}

type InputBotInlineResultDocument struct {
	Description     string                `flag:"2"`
	Document        InputDocument         `validate:"required"`
	__flagsPosition struct{}              // flags param position `validate:"required"`
	Id              string                `validate:"required"`
	SendMessage     InputBotInlineMessage `validate:"required"`
	Title           string                `flag:"1"`
	Type            string                `validate:"required"`
}

func (e *InputBotInlineResultDocument) Validate() error {
	if err := e.Document.Validate(); err != nil {
		return fmt.Errorf("field 'Document': %w", err)
	} // type_iter_check

	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineResultDocument) CRC() uint32 {
	return uint32(0xfff8fdc4)
}

func (*InputBotInlineResultDocument) ImplementsInputBotInlineResult() {}

func (e *InputBotInlineResultDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	buf.PutRawBytes(e.Document.Encode())
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *InputBotInlineResultDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Title != "" {
		flag |= 1 << 1
	}
	if e.Description != "" {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	buf.PutRawBytes(e.Document.Encode())
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	return buf.Result()
}

type InputBotInlineResultPhoto struct {
	Id          string                `validate:"required"`
	Photo       InputPhoto            `validate:"required"`
	SendMessage InputBotInlineMessage `validate:"required"`
	Type        string                `validate:"required"`
}

func (e *InputBotInlineResultPhoto) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineResultPhoto) CRC() uint32 {
	return uint32(0xa8d864a7)
}

func (*InputBotInlineResultPhoto) ImplementsInputBotInlineResult() {}

func (e *InputBotInlineResultPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutRawBytes(e.SendMessage.Encode())
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *InputBotInlineResultPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutRawBytes(e.SendMessage.Encode())
	buf.PutString(e.Type)
	return buf.Result()
}

type InputBotInlineResultObj struct {
	Content         *InputWebDocument     `flag:"5"`
	Description     string                `flag:"2"`
	__flagsPosition struct{}              // flags param position `validate:"required"`
	Id              string                `validate:"required"`
	SendMessage     InputBotInlineMessage `validate:"required"`
	Thumb           *InputWebDocument     `flag:"4"`
	Title           string                `flag:"1"`
	Type            string                `validate:"required"`
	Url             string                `flag:"3"`
}

func (e *InputBotInlineResultObj) Validate() error {

	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineResultObj) CRC() uint32 {
	return uint32(0x88bf9319)
}

func (*InputBotInlineResultObj) ImplementsInputBotInlineResult() {}

func (e *InputBotInlineResultObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Thumb) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Content) {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Content) {
		buf.PutRawBytes(e.Content.Encode())
	}
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

func (e *InputBotInlineResultObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Title != "" {
		flag |= 1 << 1
	}
	if e.Description != "" {
		flag |= 1 << 2
	}
	if e.Url != "" {
		flag |= 1 << 3
	}
	if e.Thumb.Validate() == nil {
		flag |= 1 << 4
	}
	if e.Content.Validate() == nil {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Content.Validate() == nil {
		buf.PutRawBytes(e.Content.Encode())
	}
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	buf.PutUint(flag)
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	if e.Thumb.Validate() == nil {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	buf.PutString(e.Type)
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	return buf.Result()
}

type InputBotInlineResultGame struct {
	Id          string                `validate:"required"`
	SendMessage InputBotInlineMessage `validate:"required"`
	ShortName   string                `validate:"required"`
}

func (e *InputBotInlineResultGame) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.SendMessage.Validate(); err != nil {
		return fmt.Errorf("field 'SendMessage': %w", err)
	} // type_iter_check

	if e.ShortName == "" {
		return fmt.Errorf("field 'ShortName' is not set")
	} // builtin_check

	return nil
}

func (*InputBotInlineResultGame) CRC() uint32 {
	return uint32(0x4fa417f2)
}

func (*InputBotInlineResultGame) ImplementsInputBotInlineResult() {}

func (e *InputBotInlineResultGame) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	buf.PutString(e.ShortName)
	return buf.Result()
}

func (e *InputBotInlineResultGame) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutRawBytes(e.SendMessage.Encode())
	buf.PutString(e.ShortName)
	return buf.Result()
}

type InputChannel interface {
	serialize.TL
	ImplementsInputChannel()
	Validate() error
}

type InputChannelObj struct {
	AccessHash int64 `validate:"required"`
	ChannelId  int32 `validate:"required"`
}

func (e *InputChannelObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*InputChannelObj) CRC() uint32 {
	return uint32(0xafeb712e)
}

func (*InputChannelObj) ImplementsInputChannel() {}

func (e *InputChannelObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *InputChannelObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type InputChannelFromMessage struct {
	ChannelId int32     `validate:"required"`
	MsgId     int32     `validate:"required"`
	Peer      InputPeer `validate:"required"`
}

func (e *InputChannelFromMessage) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*InputChannelFromMessage) CRC() uint32 {
	return uint32(0x2a286531)
}

func (*InputChannelFromMessage) ImplementsInputChannel() {}

func (e *InputChannelFromMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *InputChannelFromMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type InputChannelEmpty struct{}

func (e *InputChannelEmpty) Validate() error {
	return nil
}

func (*InputChannelEmpty) CRC() uint32 {
	return uint32(0xee8c1e86)
}

func (*InputChannelEmpty) ImplementsInputChannel() {}

func (e *InputChannelEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputChannelEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputChatPhoto interface {
	serialize.TL
	ImplementsInputChatPhoto()
	Validate() error
}

type InputChatPhotoObj struct {
	Id InputPhoto `validate:"required"`
}

func (e *InputChatPhotoObj) Validate() error {
	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputChatPhotoObj) CRC() uint32 {
	return uint32(0x8953ad37)
}

func (*InputChatPhotoObj) ImplementsInputChatPhoto() {}

func (e *InputChatPhotoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (e *InputChatPhotoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

type InputChatUploadedPhoto struct {
	File            InputFile `flag:"0"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Video           InputFile `flag:"1"`
	VideoStartTs    float64   `flag:"2"`
}

func (e *InputChatUploadedPhoto) Validate() error {

	return nil
}

func (*InputChatUploadedPhoto) CRC() uint32 {
	return uint32(0xc642724e)
}

func (*InputChatUploadedPhoto) ImplementsInputChatPhoto() {}

func (e *InputChatUploadedPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.File) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.VideoStartTs) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.File) {
		buf.PutRawBytes(e.File.Encode())
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Video) {
		buf.PutRawBytes(e.Video.Encode())
	}
	if !zero.IsZeroVal(e.VideoStartTs) {
		buf.PutDouble(e.VideoStartTs)
	}
	return buf.Result()
}

func (e *InputChatUploadedPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.File.Validate() == nil {
		flag |= 1 << 0
	}
	if e.Video.Validate() == nil {
		flag |= 1 << 1
	}
	if e.VideoStartTs != 0 {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.File.Validate() == nil {
		buf.PutRawBytes(e.File.Encode())
	}
	buf.PutUint(flag)
	if e.Video.Validate() == nil {
		buf.PutRawBytes(e.Video.Encode())
	}
	if e.VideoStartTs != 0 {
		buf.PutDouble(e.VideoStartTs)
	}
	return buf.Result()
}

type InputChatPhotoEmpty struct{}

func (e *InputChatPhotoEmpty) Validate() error {
	return nil
}

func (*InputChatPhotoEmpty) CRC() uint32 {
	return uint32(0x1ca48f57)
}

func (*InputChatPhotoEmpty) ImplementsInputChatPhoto() {}

func (e *InputChatPhotoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputChatPhotoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputCheckPasswordSRP interface {
	serialize.TL
	ImplementsInputCheckPasswordSRP()
	Validate() error
}

type InputCheckPasswordSRPObj struct {
	A     []byte `validate:"required"`
	M1    []byte `validate:"required"`
	SrpId int64  `validate:"required"`
}

func (e *InputCheckPasswordSRPObj) Validate() error {
	if len(e.A) == 0 {
		return fmt.Errorf("field 'A' is not set")
	} // byte_slice_check

	if len(e.M1) == 0 {
		return fmt.Errorf("field 'M1' is not set")
	} // byte_slice_check

	if e.SrpId == 0 {
		return fmt.Errorf("field 'SrpId' is not set")
	} // builtin_check

	return nil
}

func (*InputCheckPasswordSRPObj) CRC() uint32 {
	return uint32(0xd27ff082)
}

func (*InputCheckPasswordSRPObj) ImplementsInputCheckPasswordSRP() {}

func (e *InputCheckPasswordSRPObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.A)
	buf.PutMessage(e.M1)
	buf.PutLong(e.SrpId)
	return buf.Result()
}

func (e *InputCheckPasswordSRPObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.A)
	buf.PutMessage(e.M1)
	buf.PutLong(e.SrpId)
	return buf.Result()
}

type InputCheckPasswordEmpty struct{}

func (e *InputCheckPasswordEmpty) Validate() error {
	return nil
}

func (*InputCheckPasswordEmpty) CRC() uint32 {
	return uint32(0x9880f658)
}

func (*InputCheckPasswordEmpty) ImplementsInputCheckPasswordSRP() {}

func (e *InputCheckPasswordEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputCheckPasswordEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputDialogPeer interface {
	serialize.TL
	ImplementsInputDialogPeer()
	Validate() error
}

type InputDialogPeerObj struct {
	Peer InputPeer `validate:"required"`
}

func (e *InputDialogPeerObj) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*InputDialogPeerObj) CRC() uint32 {
	return uint32(0xfcaafeb7)
}

func (*InputDialogPeerObj) ImplementsInputDialogPeer() {}

func (e *InputDialogPeerObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *InputDialogPeerObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type InputDialogPeerFolder struct {
	FolderId int32 `validate:"required"`
}

func (e *InputDialogPeerFolder) Validate() error {
	if e.FolderId == 0 {
		return fmt.Errorf("field 'FolderId' is not set")
	} // builtin_check

	return nil
}

func (*InputDialogPeerFolder) CRC() uint32 {
	return uint32(0x64600527)
}

func (*InputDialogPeerFolder) ImplementsInputDialogPeer() {}

func (e *InputDialogPeerFolder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

func (e *InputDialogPeerFolder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.FolderId)
	return buf.Result()
}

type InputDocument interface {
	serialize.TL
	ImplementsInputDocument()
	Validate() error
}

type InputDocumentEmpty struct{}

func (e *InputDocumentEmpty) Validate() error {
	return nil
}

func (*InputDocumentEmpty) CRC() uint32 {
	return uint32(0x72f0eaae)
}

func (*InputDocumentEmpty) ImplementsInputDocument() {}

func (e *InputDocumentEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputDocumentEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputDocumentObj struct {
	AccessHash    int64  `validate:"required"`
	FileReference []byte `validate:"required"`
	Id            int64  `validate:"required"`
}

func (e *InputDocumentObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputDocumentObj) CRC() uint32 {
	return uint32(0x1abfb575)
}

func (*InputDocumentObj) ImplementsInputDocument() {}

func (e *InputDocumentObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputDocumentObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputEncryptedFile interface {
	serialize.TL
	ImplementsInputEncryptedFile()
	Validate() error
}

type InputEncryptedFileBigUploaded struct {
	Id             int64 `validate:"required"`
	KeyFingerprint int32 `validate:"required"`
	Parts          int32 `validate:"required"`
}

func (e *InputEncryptedFileBigUploaded) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.KeyFingerprint == 0 {
		return fmt.Errorf("field 'KeyFingerprint' is not set")
	} // builtin_check

	if e.Parts == 0 {
		return fmt.Errorf("field 'Parts' is not set")
	} // builtin_check

	return nil
}

func (*InputEncryptedFileBigUploaded) CRC() uint32 {
	return uint32(0x2dc173c8)
}

func (*InputEncryptedFileBigUploaded) ImplementsInputEncryptedFile() {}

func (e *InputEncryptedFileBigUploaded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutInt(e.Parts)
	return buf.Result()
}

func (e *InputEncryptedFileBigUploaded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutInt(e.Parts)
	return buf.Result()
}

type InputEncryptedFileObj struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputEncryptedFileObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputEncryptedFileObj) CRC() uint32 {
	return uint32(0x5a17b5e5)
}

func (*InputEncryptedFileObj) ImplementsInputEncryptedFile() {}

func (e *InputEncryptedFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputEncryptedFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputEncryptedFileUploaded struct {
	Id             int64  `validate:"required"`
	KeyFingerprint int32  `validate:"required"`
	Md5Checksum    string `validate:"required"`
	Parts          int32  `validate:"required"`
}

func (e *InputEncryptedFileUploaded) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.KeyFingerprint == 0 {
		return fmt.Errorf("field 'KeyFingerprint' is not set")
	} // builtin_check

	if e.Md5Checksum == "" {
		return fmt.Errorf("field 'Md5Checksum' is not set")
	} // builtin_check

	if e.Parts == 0 {
		return fmt.Errorf("field 'Parts' is not set")
	} // builtin_check

	return nil
}

func (*InputEncryptedFileUploaded) CRC() uint32 {
	return uint32(0x64bd0306)
}

func (*InputEncryptedFileUploaded) ImplementsInputEncryptedFile() {}

func (e *InputEncryptedFileUploaded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutString(e.Md5Checksum)
	buf.PutInt(e.Parts)
	return buf.Result()
}

func (e *InputEncryptedFileUploaded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutInt(e.KeyFingerprint)
	buf.PutString(e.Md5Checksum)
	buf.PutInt(e.Parts)
	return buf.Result()
}

type InputEncryptedFileEmpty struct{}

func (e *InputEncryptedFileEmpty) Validate() error {
	return nil
}

func (*InputEncryptedFileEmpty) CRC() uint32 {
	return uint32(0x1837c364)
}

func (*InputEncryptedFileEmpty) ImplementsInputEncryptedFile() {}

func (e *InputEncryptedFileEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputEncryptedFileEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputFile interface {
	serialize.TL
	ImplementsInputFile()
	Validate() error
}

type InputFileObj struct {
	Id          int64  `validate:"required"`
	Md5Checksum string `validate:"required"`
	Name        string `validate:"required"`
	Parts       int32  `validate:"required"`
}

func (e *InputFileObj) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Md5Checksum == "" {
		return fmt.Errorf("field 'Md5Checksum' is not set")
	} // builtin_check

	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	if e.Parts == 0 {
		return fmt.Errorf("field 'Parts' is not set")
	} // builtin_check

	return nil
}

func (*InputFileObj) CRC() uint32 {
	return uint32(0xf52ff27f)
}

func (*InputFileObj) ImplementsInputFile() {}

func (e *InputFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Md5Checksum)
	buf.PutString(e.Name)
	buf.PutInt(e.Parts)
	return buf.Result()
}

func (e *InputFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Md5Checksum)
	buf.PutString(e.Name)
	buf.PutInt(e.Parts)
	return buf.Result()
}

type InputFileBig struct {
	Id    int64  `validate:"required"`
	Name  string `validate:"required"`
	Parts int32  `validate:"required"`
}

func (e *InputFileBig) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	if e.Parts == 0 {
		return fmt.Errorf("field 'Parts' is not set")
	} // builtin_check

	return nil
}

func (*InputFileBig) CRC() uint32 {
	return uint32(0xfa4f0bb5)
}

func (*InputFileBig) ImplementsInputFile() {}

func (e *InputFileBig) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Name)
	buf.PutInt(e.Parts)
	return buf.Result()
}

func (e *InputFileBig) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Name)
	buf.PutInt(e.Parts)
	return buf.Result()
}

type InputFileLocation interface {
	serialize.TL
	ImplementsInputFileLocation()
	Validate() error
}

type InputEncryptedFileLocation struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputEncryptedFileLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputEncryptedFileLocation) CRC() uint32 {
	return uint32(0xf5235d55)
}

func (*InputEncryptedFileLocation) ImplementsInputFileLocation() {}

func (e *InputEncryptedFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputEncryptedFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputPeerPhotoFileLocation struct {
	Big             bool      `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	LocalId         int32     `validate:"required"`
	Peer            InputPeer `validate:"required"`
	VolumeId        int64     `validate:"required"`
}

func (e *InputPeerPhotoFileLocation) Validate() error {

	if e.LocalId == 0 {
		return fmt.Errorf("field 'LocalId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.VolumeId == 0 {
		return fmt.Errorf("field 'VolumeId' is not set")
	} // builtin_check

	return nil
}

func (*InputPeerPhotoFileLocation) CRC() uint32 {
	return uint32(0x27d69997)
}

func (*InputPeerPhotoFileLocation) ImplementsInputFileLocation() {}

func (e *InputPeerPhotoFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Big) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.LocalId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

func (e *InputPeerPhotoFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Big != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.LocalId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

type InputFileLocationObj struct {
	FileReference []byte `validate:"required"`
	LocalId       int32  `validate:"required"`
	Secret        int64  `validate:"required"`
	VolumeId      int64  `validate:"required"`
}

func (e *InputFileLocationObj) Validate() error {
	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.LocalId == 0 {
		return fmt.Errorf("field 'LocalId' is not set")
	} // builtin_check

	if e.Secret == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // builtin_check

	if e.VolumeId == 0 {
		return fmt.Errorf("field 'VolumeId' is not set")
	} // builtin_check

	return nil
}

func (*InputFileLocationObj) CRC() uint32 {
	return uint32(0xdfdaabe1)
}

func (*InputFileLocationObj) ImplementsInputFileLocation() {}

func (e *InputFileLocationObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileReference)
	buf.PutInt(e.LocalId)
	buf.PutLong(e.Secret)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

func (e *InputFileLocationObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileReference)
	buf.PutInt(e.LocalId)
	buf.PutLong(e.Secret)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

type InputStickerSetThumb struct {
	LocalId    int32           `validate:"required"`
	Stickerset InputStickerSet `validate:"required"`
	VolumeId   int64           `validate:"required"`
}

func (e *InputStickerSetThumb) Validate() error {
	if e.LocalId == 0 {
		return fmt.Errorf("field 'LocalId' is not set")
	} // builtin_check

	if err := e.Stickerset.Validate(); err != nil {
		return fmt.Errorf("field 'Stickerset': %w", err)
	} // type_iter_check

	if e.VolumeId == 0 {
		return fmt.Errorf("field 'VolumeId' is not set")
	} // builtin_check

	return nil
}

func (*InputStickerSetThumb) CRC() uint32 {
	return uint32(0xdbaeae9)
}

func (*InputStickerSetThumb) ImplementsInputFileLocation() {}

func (e *InputStickerSetThumb) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.LocalId)
	buf.PutRawBytes(e.Stickerset.Encode())
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

func (e *InputStickerSetThumb) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.LocalId)
	buf.PutRawBytes(e.Stickerset.Encode())
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

type InputPhotoFileLocation struct {
	AccessHash    int64  `validate:"required"`
	FileReference []byte `validate:"required"`
	Id            int64  `validate:"required"`
	ThumbSize     string `validate:"required"`
}

func (e *InputPhotoFileLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ThumbSize == "" {
		return fmt.Errorf("field 'ThumbSize' is not set")
	} // builtin_check

	return nil
}

func (*InputPhotoFileLocation) CRC() uint32 {
	return uint32(0x40181ffe)
}

func (*InputPhotoFileLocation) ImplementsInputFileLocation() {}

func (e *InputPhotoFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutString(e.ThumbSize)
	return buf.Result()
}

func (e *InputPhotoFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutString(e.ThumbSize)
	return buf.Result()
}

type InputPhotoLegacyFileLocation struct {
	AccessHash    int64  `validate:"required"`
	FileReference []byte `validate:"required"`
	Id            int64  `validate:"required"`
	LocalId       int32  `validate:"required"`
	Secret        int64  `validate:"required"`
	VolumeId      int64  `validate:"required"`
}

func (e *InputPhotoLegacyFileLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.LocalId == 0 {
		return fmt.Errorf("field 'LocalId' is not set")
	} // builtin_check

	if e.Secret == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // builtin_check

	if e.VolumeId == 0 {
		return fmt.Errorf("field 'VolumeId' is not set")
	} // builtin_check

	return nil
}

func (*InputPhotoLegacyFileLocation) CRC() uint32 {
	return uint32(0xd83466f3)
}

func (*InputPhotoLegacyFileLocation) ImplementsInputFileLocation() {}

func (e *InputPhotoLegacyFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutInt(e.LocalId)
	buf.PutLong(e.Secret)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

func (e *InputPhotoLegacyFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutInt(e.LocalId)
	buf.PutLong(e.Secret)
	buf.PutLong(e.VolumeId)
	return buf.Result()
}

type InputSecureFileLocation struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputSecureFileLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputSecureFileLocation) CRC() uint32 {
	return uint32(0xcbc7ee28)
}

func (*InputSecureFileLocation) ImplementsInputFileLocation() {}

func (e *InputSecureFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputSecureFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputTakeoutFileLocation struct{}

func (e *InputTakeoutFileLocation) Validate() error {
	return nil
}

func (*InputTakeoutFileLocation) CRC() uint32 {
	return uint32(0x29be5899)
}

func (*InputTakeoutFileLocation) ImplementsInputFileLocation() {}

func (e *InputTakeoutFileLocation) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputTakeoutFileLocation) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputDocumentFileLocation struct {
	AccessHash    int64  `validate:"required"`
	FileReference []byte `validate:"required"`
	Id            int64  `validate:"required"`
	ThumbSize     string `validate:"required"`
}

func (e *InputDocumentFileLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ThumbSize == "" {
		return fmt.Errorf("field 'ThumbSize' is not set")
	} // builtin_check

	return nil
}

func (*InputDocumentFileLocation) CRC() uint32 {
	return uint32(0xbad07584)
}

func (*InputDocumentFileLocation) ImplementsInputFileLocation() {}

func (e *InputDocumentFileLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutString(e.ThumbSize)
	return buf.Result()
}

func (e *InputDocumentFileLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	buf.PutString(e.ThumbSize)
	return buf.Result()
}

type InputGame interface {
	serialize.TL
	ImplementsInputGame()
	Validate() error
}

type InputGameShortName struct {
	BotId     InputUser `validate:"required"`
	ShortName string    `validate:"required"`
}

func (e *InputGameShortName) Validate() error {
	if err := e.BotId.Validate(); err != nil {
		return fmt.Errorf("field 'BotId': %w", err)
	} // type_iter_check

	if e.ShortName == "" {
		return fmt.Errorf("field 'ShortName' is not set")
	} // builtin_check

	return nil
}

func (*InputGameShortName) CRC() uint32 {
	return uint32(0xc331e80a)
}

func (*InputGameShortName) ImplementsInputGame() {}

func (e *InputGameShortName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.BotId.Encode())
	buf.PutString(e.ShortName)
	return buf.Result()
}

func (e *InputGameShortName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.BotId.Encode())
	buf.PutString(e.ShortName)
	return buf.Result()
}

type InputGameID struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputGameID) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputGameID) CRC() uint32 {
	return uint32(0x32c3e77)
}

func (*InputGameID) ImplementsInputGame() {}

func (e *InputGameID) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputGameID) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputGeoPoint interface {
	serialize.TL
	ImplementsInputGeoPoint()
	Validate() error
}

type InputGeoPointEmpty struct{}

func (e *InputGeoPointEmpty) Validate() error {
	return nil
}

func (*InputGeoPointEmpty) CRC() uint32 {
	return uint32(0xe4c123d6)
}

func (*InputGeoPointEmpty) ImplementsInputGeoPoint() {}

func (e *InputGeoPointEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputGeoPointEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputGeoPointObj struct {
	Lat  float64 `validate:"required"`
	Long float64 `validate:"required"`
}

func (e *InputGeoPointObj) Validate() error {
	if e.Lat == 0 {
		return fmt.Errorf("field 'Lat' is not set")
	} // builtin_check

	if e.Long == 0 {
		return fmt.Errorf("field 'Long' is not set")
	} // builtin_check

	return nil
}

func (*InputGeoPointObj) CRC() uint32 {
	return uint32(0xf3b7acc9)
}

func (*InputGeoPointObj) ImplementsInputGeoPoint() {}

func (e *InputGeoPointObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Lat)
	buf.PutDouble(e.Long)
	return buf.Result()
}

func (e *InputGeoPointObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Lat)
	buf.PutDouble(e.Long)
	return buf.Result()
}

type InputMedia interface {
	serialize.TL
	ImplementsInputMedia()
	Validate() error
}

type InputMediaDice struct {
	Emoticon string `validate:"required"`
}

func (e *InputMediaDice) Validate() error {
	if e.Emoticon == "" {
		return fmt.Errorf("field 'Emoticon' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaDice) CRC() uint32 {
	return uint32(0xe66fbf7b)
}

func (*InputMediaDice) ImplementsInputMedia() {}

func (e *InputMediaDice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	return buf.Result()
}

func (e *InputMediaDice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	return buf.Result()
}

type InputMediaInvoice struct {
	Description     string            `validate:"required"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	Invoice         *Invoice          `validate:"required"`
	Payload         []byte            `validate:"required"`
	Photo           *InputWebDocument `flag:"0"`
	Provider        string            `validate:"required"`
	ProviderData    *DataJSON         `validate:"required"`
	StartParam      string            `validate:"required"`
	Title           string            `validate:"required"`
}

func (e *InputMediaInvoice) Validate() error {
	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	if err := e.Invoice.Validate(); err != nil {
		return fmt.Errorf("field 'Invoice': %w", err)
	} // type_iter_check

	if len(e.Payload) == 0 {
		return fmt.Errorf("field 'Payload' is not set")
	} // byte_slice_check

	if e.Provider == "" {
		return fmt.Errorf("field 'Provider' is not set")
	} // builtin_check

	if err := e.ProviderData.Validate(); err != nil {
		return fmt.Errorf("field 'ProviderData': %w", err)
	} // type_iter_check

	if e.StartParam == "" {
		return fmt.Errorf("field 'StartParam' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaInvoice) CRC() uint32 {
	return uint32(0xf4e096c3)
}

func (*InputMediaInvoice) ImplementsInputMedia() {}

func (e *InputMediaInvoice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Description)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Invoice.Encode())
	buf.PutMessage(e.Payload)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutString(e.Provider)
	buf.PutRawBytes(e.ProviderData.Encode())
	buf.PutString(e.StartParam)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *InputMediaInvoice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Photo.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Description)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Invoice.Encode())
	buf.PutMessage(e.Payload)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	buf.PutString(e.Provider)
	buf.PutRawBytes(e.ProviderData.Encode())
	buf.PutString(e.StartParam)
	buf.PutString(e.Title)
	return buf.Result()
}

type InputMediaGeoLive struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	GeoPoint        InputGeoPoint `validate:"required"`
	Period          int32         `flag:"1"`
	Stopped         bool          `flag:"0,encoded_in_bitflags"`
}

func (e *InputMediaGeoLive) Validate() error {

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaGeoLive) CRC() uint32 {
	return uint32(0xce4e82fd)
}

func (*InputMediaGeoLive) ImplementsInputMedia() {}

func (e *InputMediaGeoLive) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Stopped) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Period) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	if !zero.IsZeroVal(e.Period) {
		buf.PutInt(e.Period)
	}
	return buf.Result()
}

func (e *InputMediaGeoLive) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Stopped != false {
		flag |= 1 << 0
	}
	if e.Period != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.GeoPoint.Encode())
	if e.Period != 0 {
		buf.PutInt(e.Period)
	}
	return buf.Result()
}

type InputMediaEmpty struct{}

func (e *InputMediaEmpty) Validate() error {
	return nil
}

func (*InputMediaEmpty) CRC() uint32 {
	return uint32(0x9664f57f)
}

func (*InputMediaEmpty) ImplementsInputMedia() {}

func (e *InputMediaEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMediaEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMediaUploadedPhoto struct {
	File            InputFile       `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Stickers        []InputDocument `flag:"0"`
	TtlSeconds      int32           `flag:"1"`
}

func (e *InputMediaUploadedPhoto) Validate() error {
	if err := e.File.Validate(); err != nil {
		return fmt.Errorf("field 'File': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaUploadedPhoto) CRC() uint32 {
	return uint32(0x1e287d04)
}

func (*InputMediaUploadedPhoto) ImplementsInputMedia() {}

func (e *InputMediaUploadedPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Stickers) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.File.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Stickers) {
		buf.PutVector(e.Stickers)
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *InputMediaUploadedPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Stickers) > 0 {
		flag |= 1 << 0
	}
	if e.TtlSeconds != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.File.Encode())
	buf.PutUint(flag)
	if len(e.Stickers) > 0 {
		buf.PutVector(e.Stickers)
	}
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type InputMediaPhoto struct {
	__flagsPosition struct{}   // flags param position `validate:"required"`
	Id              InputPhoto `validate:"required"`
	TtlSeconds      int32      `flag:"0"`
}

func (e *InputMediaPhoto) Validate() error {

	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaPhoto) CRC() uint32 {
	return uint32(0xb3ba0635)
}

func (*InputMediaPhoto) ImplementsInputMedia() {}

func (e *InputMediaPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *InputMediaPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TtlSeconds != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type InputMediaGeoPoint struct {
	GeoPoint InputGeoPoint `validate:"required"`
}

func (e *InputMediaGeoPoint) Validate() error {
	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaGeoPoint) CRC() uint32 {
	return uint32(0xf9c44144)
}

func (*InputMediaGeoPoint) ImplementsInputMedia() {}

func (e *InputMediaGeoPoint) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.GeoPoint.Encode())
	return buf.Result()
}

func (e *InputMediaGeoPoint) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.GeoPoint.Encode())
	return buf.Result()
}

type InputMediaContact struct {
	FirstName   string `validate:"required"`
	LastName    string `validate:"required"`
	PhoneNumber string `validate:"required"`
	Vcard       string `validate:"required"`
}

func (e *InputMediaContact) Validate() error {
	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.PhoneNumber == "" {
		return fmt.Errorf("field 'PhoneNumber' is not set")
	} // builtin_check

	if e.Vcard == "" {
		return fmt.Errorf("field 'Vcard' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaContact) CRC() uint32 {
	return uint32(0xf8ab7dfb)
}

func (*InputMediaContact) ImplementsInputMedia() {}

func (e *InputMediaContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.Vcard)
	return buf.Result()
}

func (e *InputMediaContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	buf.PutString(e.Vcard)
	return buf.Result()
}

type InputMediaUploadedDocument struct {
	Attributes      []DocumentAttribute `validate:"required"`
	File            InputFile           `validate:"required"`
	__flagsPosition struct{}            // flags param position `validate:"required"`
	ForceFile       bool                `flag:"4,encoded_in_bitflags"`
	MimeType        string              `validate:"required"`
	NosoundVideo    bool                `flag:"3,encoded_in_bitflags"`
	Stickers        []InputDocument     `flag:"0"`
	Thumb           InputFile           `flag:"2"`
	TtlSeconds      int32               `flag:"1"`
}

func (e *InputMediaUploadedDocument) Validate() error {
	if len(e.Attributes) == 0 {
		return fmt.Errorf("field 'Attributes' is not set")
	} // slice_len_check
	for _, item := range e.Attributes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Attributes': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.File.Validate(); err != nil {
		return fmt.Errorf("field 'File': %w", err)
	} // type_iter_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaUploadedDocument) CRC() uint32 {
	return uint32(0x5b38c6c1)
}

func (*InputMediaUploadedDocument) ImplementsInputMedia() {}

func (e *InputMediaUploadedDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Stickers) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Thumb) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.NosoundVideo) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.ForceFile) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutRawBytes(e.File.Encode())
	buf.PutUint(flag)
	buf.PutString(e.MimeType)
	if !zero.IsZeroVal(e.Stickers) {
		buf.PutVector(e.Stickers)
	}
	if !zero.IsZeroVal(e.Thumb) {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *InputMediaUploadedDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Stickers) > 0 {
		flag |= 1 << 0
	}
	if e.TtlSeconds != 0 {
		flag |= 1 << 1
	}
	if e.Thumb.Validate() == nil {
		flag |= 1 << 2
	}
	if e.NosoundVideo != false {
		flag |= 1 << 3
	}
	if e.ForceFile != false {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutRawBytes(e.File.Encode())
	buf.PutUint(flag)
	buf.PutString(e.MimeType)
	if len(e.Stickers) > 0 {
		buf.PutVector(e.Stickers)
	}
	if e.Thumb.Validate() == nil {
		buf.PutRawBytes(e.Thumb.Encode())
	}
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type InputMediaDocument struct {
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Id              InputDocument `validate:"required"`
	TtlSeconds      int32         `flag:"0"`
}

func (e *InputMediaDocument) Validate() error {

	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaDocument) CRC() uint32 {
	return uint32(0x23ab23d2)
}

func (*InputMediaDocument) ImplementsInputMedia() {}

func (e *InputMediaDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *InputMediaDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TtlSeconds != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Id.Encode())
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type InputMediaVenue struct {
	Address   string        `validate:"required"`
	GeoPoint  InputGeoPoint `validate:"required"`
	Provider  string        `validate:"required"`
	Title     string        `validate:"required"`
	VenueId   string        `validate:"required"`
	VenueType string        `validate:"required"`
}

func (e *InputMediaVenue) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	if e.Provider == "" {
		return fmt.Errorf("field 'Provider' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.VenueId == "" {
		return fmt.Errorf("field 'VenueId' is not set")
	} // builtin_check

	if e.VenueType == "" {
		return fmt.Errorf("field 'VenueType' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaVenue) CRC() uint32 {
	return uint32(0xc13d1c11)
}

func (*InputMediaVenue) ImplementsInputMedia() {}

func (e *InputMediaVenue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutString(e.Provider)
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

func (e *InputMediaVenue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutString(e.Provider)
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

type InputMediaPhotoExternal struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	TtlSeconds      int32    `flag:"0"`
	Url             string   `validate:"required"`
}

func (e *InputMediaPhotoExternal) Validate() error {

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaPhotoExternal) CRC() uint32 {
	return uint32(0xe5bbfe1a)
}

func (*InputMediaPhotoExternal) ImplementsInputMedia() {}

func (e *InputMediaPhotoExternal) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *InputMediaPhotoExternal) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TtlSeconds != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

type InputMediaDocumentExternal struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	TtlSeconds      int32    `flag:"0"`
	Url             string   `validate:"required"`
}

func (e *InputMediaDocumentExternal) Validate() error {

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*InputMediaDocumentExternal) CRC() uint32 {
	return uint32(0xfb52dc99)
}

func (*InputMediaDocumentExternal) ImplementsInputMedia() {}

func (e *InputMediaDocumentExternal) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *InputMediaDocumentExternal) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TtlSeconds != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

type InputMediaGame struct {
	Id InputGame `validate:"required"`
}

func (e *InputMediaGame) Validate() error {
	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaGame) CRC() uint32 {
	return uint32(0xd33f43f3)
}

func (*InputMediaGame) ImplementsInputMedia() {}

func (e *InputMediaGame) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (e *InputMediaGame) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

type InputMediaPoll struct {
	CorrectAnswers   [][]byte        `flag:"0"`
	__flagsPosition  struct{}        // flags param position `validate:"required"`
	Poll             *Poll           `validate:"required"`
	Solution         string          `flag:"1"`
	SolutionEntities []MessageEntity `flag:"1"`
}

func (e *InputMediaPoll) Validate() error {

	if err := e.Poll.Validate(); err != nil {
		return fmt.Errorf("field 'Poll': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMediaPoll) CRC() uint32 {
	return uint32(0xf94e5f1)
}

func (*InputMediaPoll) ImplementsInputMedia() {}

func (e *InputMediaPoll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.CorrectAnswers) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Solution) || !zero.IsZeroVal(e.SolutionEntities) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.CorrectAnswers) {
		buf.PutVector(e.CorrectAnswers)
	}
	buf.PutUint(flag)
	buf.PutRawBytes(e.Poll.Encode())
	if !zero.IsZeroVal(e.Solution) {
		buf.PutString(e.Solution)
	}
	if !zero.IsZeroVal(e.SolutionEntities) {
		buf.PutVector(e.SolutionEntities)
	}
	return buf.Result()
}

func (e *InputMediaPoll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.CorrectAnswers) > 0 {
		flag |= 1 << 0
	}
	if e.Solution != "" || len(e.SolutionEntities) > 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.CorrectAnswers) > 0 {
		buf.PutVector(e.CorrectAnswers)
	}
	buf.PutUint(flag)
	buf.PutRawBytes(e.Poll.Encode())
	if e.Solution != "" {
		buf.PutString(e.Solution)
	}
	if len(e.SolutionEntities) > 0 {
		buf.PutVector(e.SolutionEntities)
	}
	return buf.Result()
}

type InputMessage interface {
	serialize.TL
	ImplementsInputMessage()
	Validate() error
}

type InputMessagePinned struct{}

func (e *InputMessagePinned) Validate() error {
	return nil
}

func (*InputMessagePinned) CRC() uint32 {
	return uint32(0x86872538)
}

func (*InputMessagePinned) ImplementsInputMessage() {}

func (e *InputMessagePinned) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagePinned) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessageReplyTo struct {
	Id int32 `validate:"required"`
}

func (e *InputMessageReplyTo) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputMessageReplyTo) CRC() uint32 {
	return uint32(0xbad88395)
}

func (*InputMessageReplyTo) ImplementsInputMessage() {}

func (e *InputMessageReplyTo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *InputMessageReplyTo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type InputMessageID struct {
	Id int32 `validate:"required"`
}

func (e *InputMessageID) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputMessageID) CRC() uint32 {
	return uint32(0xa676a322)
}

func (*InputMessageID) ImplementsInputMessage() {}

func (e *InputMessageID) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *InputMessageID) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type InputNotifyPeer interface {
	serialize.TL
	ImplementsInputNotifyPeer()
	Validate() error
}

type InputNotifyUsers struct{}

func (e *InputNotifyUsers) Validate() error {
	return nil
}

func (*InputNotifyUsers) CRC() uint32 {
	return uint32(0x193b4417)
}

func (*InputNotifyUsers) ImplementsInputNotifyPeer() {}

func (e *InputNotifyUsers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputNotifyUsers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputNotifyBroadcasts struct{}

func (e *InputNotifyBroadcasts) Validate() error {
	return nil
}

func (*InputNotifyBroadcasts) CRC() uint32 {
	return uint32(0xb1db7c7e)
}

func (*InputNotifyBroadcasts) ImplementsInputNotifyPeer() {}

func (e *InputNotifyBroadcasts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputNotifyBroadcasts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputNotifyPeerObj struct {
	Peer InputPeer `validate:"required"`
}

func (e *InputNotifyPeerObj) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*InputNotifyPeerObj) CRC() uint32 {
	return uint32(0xb8bc5b0c)
}

func (*InputNotifyPeerObj) ImplementsInputNotifyPeer() {}

func (e *InputNotifyPeerObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *InputNotifyPeerObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type InputNotifyChats struct{}

func (e *InputNotifyChats) Validate() error {
	return nil
}

func (*InputNotifyChats) CRC() uint32 {
	return uint32(0x4a95e84e)
}

func (*InputNotifyChats) ImplementsInputNotifyPeer() {}

func (e *InputNotifyChats) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputNotifyChats) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPaymentCredentials interface {
	serialize.TL
	ImplementsInputPaymentCredentials()
	Validate() error
}

type InputPaymentCredentialsAndroidPay struct {
	GoogleTransactionId string    `validate:"required"`
	PaymentToken        *DataJSON `validate:"required"`
}

func (e *InputPaymentCredentialsAndroidPay) Validate() error {
	if e.GoogleTransactionId == "" {
		return fmt.Errorf("field 'GoogleTransactionId' is not set")
	} // builtin_check

	if err := e.PaymentToken.Validate(); err != nil {
		return fmt.Errorf("field 'PaymentToken': %w", err)
	} // type_iter_check

	return nil
}

func (*InputPaymentCredentialsAndroidPay) CRC() uint32 {
	return uint32(0xca05d50e)
}

func (*InputPaymentCredentialsAndroidPay) ImplementsInputPaymentCredentials() {}

func (e *InputPaymentCredentialsAndroidPay) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.GoogleTransactionId)
	buf.PutRawBytes(e.PaymentToken.Encode())
	return buf.Result()
}

func (e *InputPaymentCredentialsAndroidPay) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.GoogleTransactionId)
	buf.PutRawBytes(e.PaymentToken.Encode())
	return buf.Result()
}

type InputPaymentCredentialsObj struct {
	Data            *DataJSON `validate:"required"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Save            bool      `flag:"0,encoded_in_bitflags"`
}

func (e *InputPaymentCredentialsObj) Validate() error {
	if err := e.Data.Validate(); err != nil {
		return fmt.Errorf("field 'Data': %w", err)
	} // type_iter_check

	return nil
}

func (*InputPaymentCredentialsObj) CRC() uint32 {
	return uint32(0x3417d728)
}

func (*InputPaymentCredentialsObj) ImplementsInputPaymentCredentials() {}

func (e *InputPaymentCredentialsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Save) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *InputPaymentCredentialsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Save != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutUint(flag)
	return buf.Result()
}

type InputPaymentCredentialsSaved struct {
	Id          string `validate:"required"`
	TmpPassword []byte `validate:"required"`
}

func (e *InputPaymentCredentialsSaved) Validate() error {
	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if len(e.TmpPassword) == 0 {
		return fmt.Errorf("field 'TmpPassword' is not set")
	} // byte_slice_check

	return nil
}

func (*InputPaymentCredentialsSaved) CRC() uint32 {
	return uint32(0xc10eb2cf)
}

func (*InputPaymentCredentialsSaved) ImplementsInputPaymentCredentials() {}

func (e *InputPaymentCredentialsSaved) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutMessage(e.TmpPassword)
	return buf.Result()
}

func (e *InputPaymentCredentialsSaved) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Id)
	buf.PutMessage(e.TmpPassword)
	return buf.Result()
}

type InputPaymentCredentialsApplePay struct {
	PaymentData *DataJSON `validate:"required"`
}

func (e *InputPaymentCredentialsApplePay) Validate() error {
	if err := e.PaymentData.Validate(); err != nil {
		return fmt.Errorf("field 'PaymentData': %w", err)
	} // type_iter_check

	return nil
}

func (*InputPaymentCredentialsApplePay) CRC() uint32 {
	return uint32(0xaa1c39f)
}

func (*InputPaymentCredentialsApplePay) ImplementsInputPaymentCredentials() {}

func (e *InputPaymentCredentialsApplePay) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PaymentData.Encode())
	return buf.Result()
}

func (e *InputPaymentCredentialsApplePay) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PaymentData.Encode())
	return buf.Result()
}

type InputPeer interface {
	serialize.TL
	ImplementsInputPeer()
	Validate() error
}

type InputPeerEmpty struct{}

func (e *InputPeerEmpty) Validate() error {
	return nil
}

func (*InputPeerEmpty) CRC() uint32 {
	return uint32(0x7f3b18ea)
}

func (*InputPeerEmpty) ImplementsInputPeer() {}

func (e *InputPeerEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPeerEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPeerUser struct {
	AccessHash int64 `validate:"required"`
	UserId     int32 `validate:"required"`
}

func (e *InputPeerUser) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*InputPeerUser) CRC() uint32 {
	return uint32(0x7b8e7de6)
}

func (*InputPeerUser) ImplementsInputPeer() {}

func (e *InputPeerUser) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *InputPeerUser) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type InputPeerChannel struct {
	AccessHash int64 `validate:"required"`
	ChannelId  int32 `validate:"required"`
}

func (e *InputPeerChannel) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*InputPeerChannel) CRC() uint32 {
	return uint32(0x20adaef8)
}

func (*InputPeerChannel) ImplementsInputPeer() {}

func (e *InputPeerChannel) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *InputPeerChannel) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type InputPeerSelf struct{}

func (e *InputPeerSelf) Validate() error {
	return nil
}

func (*InputPeerSelf) CRC() uint32 {
	return uint32(0x7da07ec9)
}

func (*InputPeerSelf) ImplementsInputPeer() {}

func (e *InputPeerSelf) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPeerSelf) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPeerUserFromMessage struct {
	MsgId  int32     `validate:"required"`
	Peer   InputPeer `validate:"required"`
	UserId int32     `validate:"required"`
}

func (e *InputPeerUserFromMessage) Validate() error {
	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*InputPeerUserFromMessage) CRC() uint32 {
	return uint32(0x17bae2e6)
}

func (*InputPeerUserFromMessage) ImplementsInputPeer() {}

func (e *InputPeerUserFromMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *InputPeerUserFromMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type InputPeerChannelFromMessage struct {
	ChannelId int32     `validate:"required"`
	MsgId     int32     `validate:"required"`
	Peer      InputPeer `validate:"required"`
}

func (e *InputPeerChannelFromMessage) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*InputPeerChannelFromMessage) CRC() uint32 {
	return uint32(0x9c95f7bb)
}

func (*InputPeerChannelFromMessage) ImplementsInputPeer() {}

func (e *InputPeerChannelFromMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *InputPeerChannelFromMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type InputPeerChat struct {
	ChatId int32 `validate:"required"`
}

func (e *InputPeerChat) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	return nil
}

func (*InputPeerChat) CRC() uint32 {
	return uint32(0x179be863)
}

func (*InputPeerChat) ImplementsInputPeer() {}

func (e *InputPeerChat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (e *InputPeerChat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

type InputPhoto interface {
	serialize.TL
	ImplementsInputPhoto()
	Validate() error
}

type InputPhotoEmpty struct{}

func (e *InputPhotoEmpty) Validate() error {
	return nil
}

func (*InputPhotoEmpty) CRC() uint32 {
	return uint32(0x1cd7bf0d)
}

func (*InputPhotoEmpty) ImplementsInputPhoto() {}

func (e *InputPhotoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPhotoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPhotoObj struct {
	AccessHash    int64  `validate:"required"`
	FileReference []byte `validate:"required"`
	Id            int64  `validate:"required"`
}

func (e *InputPhotoObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputPhotoObj) CRC() uint32 {
	return uint32(0x3bb3b94a)
}

func (*InputPhotoObj) ImplementsInputPhoto() {}

func (e *InputPhotoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputPhotoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutMessage(e.FileReference)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputPrivacyRule interface {
	serialize.TL
	ImplementsInputPrivacyRule()
	Validate() error
}

type InputPrivacyValueDisallowAll struct{}

func (e *InputPrivacyValueDisallowAll) Validate() error {
	return nil
}

func (*InputPrivacyValueDisallowAll) CRC() uint32 {
	return uint32(0xd66b66c9)
}

func (*InputPrivacyValueDisallowAll) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueDisallowAll) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPrivacyValueDisallowAll) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPrivacyValueDisallowChatParticipants struct {
	Chats []int32 `validate:"required"`
}

func (e *InputPrivacyValueDisallowChatParticipants) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if item == 0 {
			return fmt.Errorf("field 'Chats' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*InputPrivacyValueDisallowChatParticipants) CRC() uint32 {
	return uint32(0xd82363af)
}

func (*InputPrivacyValueDisallowChatParticipants) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueDisallowChatParticipants) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

func (e *InputPrivacyValueDisallowChatParticipants) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

type InputPrivacyValueDisallowContacts struct{}

func (e *InputPrivacyValueDisallowContacts) Validate() error {
	return nil
}

func (*InputPrivacyValueDisallowContacts) CRC() uint32 {
	return uint32(0xba52007)
}

func (*InputPrivacyValueDisallowContacts) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueDisallowContacts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPrivacyValueDisallowContacts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPrivacyValueAllowAll struct{}

func (e *InputPrivacyValueAllowAll) Validate() error {
	return nil
}

func (*InputPrivacyValueAllowAll) CRC() uint32 {
	return uint32(0x184b35ce)
}

func (*InputPrivacyValueAllowAll) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueAllowAll) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPrivacyValueAllowAll) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputPrivacyValueAllowUsers struct {
	Users []InputUser `validate:"required"`
}

func (e *InputPrivacyValueAllowUsers) Validate() error {
	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*InputPrivacyValueAllowUsers) CRC() uint32 {
	return uint32(0x131cc67f)
}

func (*InputPrivacyValueAllowUsers) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueAllowUsers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *InputPrivacyValueAllowUsers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

type InputPrivacyValueDisallowUsers struct {
	Users []InputUser `validate:"required"`
}

func (e *InputPrivacyValueDisallowUsers) Validate() error {
	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*InputPrivacyValueDisallowUsers) CRC() uint32 {
	return uint32(0x90110467)
}

func (*InputPrivacyValueDisallowUsers) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueDisallowUsers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *InputPrivacyValueDisallowUsers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

type InputPrivacyValueAllowChatParticipants struct {
	Chats []int32 `validate:"required"`
}

func (e *InputPrivacyValueAllowChatParticipants) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if item == 0 {
			return fmt.Errorf("field 'Chats' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*InputPrivacyValueAllowChatParticipants) CRC() uint32 {
	return uint32(0x4c81c1ba)
}

func (*InputPrivacyValueAllowChatParticipants) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueAllowChatParticipants) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

func (e *InputPrivacyValueAllowChatParticipants) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

type InputPrivacyValueAllowContacts struct{}

func (e *InputPrivacyValueAllowContacts) Validate() error {
	return nil
}

func (*InputPrivacyValueAllowContacts) CRC() uint32 {
	return uint32(0xd09e07b)
}

func (*InputPrivacyValueAllowContacts) ImplementsInputPrivacyRule() {}

func (e *InputPrivacyValueAllowContacts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputPrivacyValueAllowContacts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputSecureFile interface {
	serialize.TL
	ImplementsInputSecureFile()
	Validate() error
}

type InputSecureFileUploaded struct {
	FileHash    []byte `validate:"required"`
	Id          int64  `validate:"required"`
	Md5Checksum string `validate:"required"`
	Parts       int32  `validate:"required"`
	Secret      []byte `validate:"required"`
}

func (e *InputSecureFileUploaded) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Md5Checksum == "" {
		return fmt.Errorf("field 'Md5Checksum' is not set")
	} // builtin_check

	if e.Parts == 0 {
		return fmt.Errorf("field 'Parts' is not set")
	} // builtin_check

	if len(e.Secret) == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // byte_slice_check

	return nil
}

func (*InputSecureFileUploaded) CRC() uint32 {
	return uint32(0x3334b0f0)
}

func (*InputSecureFileUploaded) ImplementsInputSecureFile() {}

func (e *InputSecureFileUploaded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutLong(e.Id)
	buf.PutString(e.Md5Checksum)
	buf.PutInt(e.Parts)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

func (e *InputSecureFileUploaded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutLong(e.Id)
	buf.PutString(e.Md5Checksum)
	buf.PutInt(e.Parts)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

type InputSecureFileObj struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputSecureFileObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputSecureFileObj) CRC() uint32 {
	return uint32(0x5367e5be)
}

func (*InputSecureFileObj) ImplementsInputSecureFile() {}

func (e *InputSecureFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputSecureFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputStickerSet interface {
	serialize.TL
	ImplementsInputStickerSet()
	Validate() error
}

type InputStickerSetAnimatedEmoji struct{}

func (e *InputStickerSetAnimatedEmoji) Validate() error {
	return nil
}

func (*InputStickerSetAnimatedEmoji) CRC() uint32 {
	return uint32(0x28703c8)
}

func (*InputStickerSetAnimatedEmoji) ImplementsInputStickerSet() {}

func (e *InputStickerSetAnimatedEmoji) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputStickerSetAnimatedEmoji) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputStickerSetID struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputStickerSetID) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputStickerSetID) CRC() uint32 {
	return uint32(0x9de7a269)
}

func (*InputStickerSetID) ImplementsInputStickerSet() {}

func (e *InputStickerSetID) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputStickerSetID) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputStickerSetEmpty struct{}

func (e *InputStickerSetEmpty) Validate() error {
	return nil
}

func (*InputStickerSetEmpty) CRC() uint32 {
	return uint32(0xffb62b95)
}

func (*InputStickerSetEmpty) ImplementsInputStickerSet() {}

func (e *InputStickerSetEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputStickerSetEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputStickerSetDice struct {
	Emoticon string `validate:"required"`
}

func (e *InputStickerSetDice) Validate() error {
	if e.Emoticon == "" {
		return fmt.Errorf("field 'Emoticon' is not set")
	} // builtin_check

	return nil
}

func (*InputStickerSetDice) CRC() uint32 {
	return uint32(0xe67f520e)
}

func (*InputStickerSetDice) ImplementsInputStickerSet() {}

func (e *InputStickerSetDice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	return buf.Result()
}

func (e *InputStickerSetDice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	return buf.Result()
}

type InputStickerSetShortName struct {
	ShortName string `validate:"required"`
}

func (e *InputStickerSetShortName) Validate() error {
	if e.ShortName == "" {
		return fmt.Errorf("field 'ShortName' is not set")
	} // builtin_check

	return nil
}

func (*InputStickerSetShortName) CRC() uint32 {
	return uint32(0x861cc8a0)
}

func (*InputStickerSetShortName) ImplementsInputStickerSet() {}

func (e *InputStickerSetShortName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.ShortName)
	return buf.Result()
}

func (e *InputStickerSetShortName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.ShortName)
	return buf.Result()
}

type InputStickeredMedia interface {
	serialize.TL
	ImplementsInputStickeredMedia()
	Validate() error
}

type InputStickeredMediaDocument struct {
	Id InputDocument `validate:"required"`
}

func (e *InputStickeredMediaDocument) Validate() error {
	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputStickeredMediaDocument) CRC() uint32 {
	return uint32(0x438865b)
}

func (*InputStickeredMediaDocument) ImplementsInputStickeredMedia() {}

func (e *InputStickeredMediaDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (e *InputStickeredMediaDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

type InputStickeredMediaPhoto struct {
	Id InputPhoto `validate:"required"`
}

func (e *InputStickeredMediaPhoto) Validate() error {
	if err := e.Id.Validate(); err != nil {
		return fmt.Errorf("field 'Id': %w", err)
	} // type_iter_check

	return nil
}

func (*InputStickeredMediaPhoto) CRC() uint32 {
	return uint32(0x4a992157)
}

func (*InputStickeredMediaPhoto) ImplementsInputStickeredMedia() {}

func (e *InputStickeredMediaPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

func (e *InputStickeredMediaPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Id.Encode())
	return buf.Result()
}

type InputTheme interface {
	serialize.TL
	ImplementsInputTheme()
	Validate() error
}

type InputThemeObj struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputThemeObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputThemeObj) CRC() uint32 {
	return uint32(0x3c5693e9)
}

func (*InputThemeObj) ImplementsInputTheme() {}

func (e *InputThemeObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputThemeObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputThemeSlug struct {
	Slug string `validate:"required"`
}

func (e *InputThemeSlug) Validate() error {
	if e.Slug == "" {
		return fmt.Errorf("field 'Slug' is not set")
	} // builtin_check

	return nil
}

func (*InputThemeSlug) CRC() uint32 {
	return uint32(0xf5890df1)
}

func (*InputThemeSlug) ImplementsInputTheme() {}

func (e *InputThemeSlug) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Slug)
	return buf.Result()
}

func (e *InputThemeSlug) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Slug)
	return buf.Result()
}

type InputUser interface {
	serialize.TL
	ImplementsInputUser()
	Validate() error
}

type InputUserFromMessage struct {
	MsgId  int32     `validate:"required"`
	Peer   InputPeer `validate:"required"`
	UserId int32     `validate:"required"`
}

func (e *InputUserFromMessage) Validate() error {
	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*InputUserFromMessage) CRC() uint32 {
	return uint32(0x2d117597)
}

func (*InputUserFromMessage) ImplementsInputUser() {}

func (e *InputUserFromMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *InputUserFromMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type InputUserObj struct {
	AccessHash int64 `validate:"required"`
	UserId     int32 `validate:"required"`
}

func (e *InputUserObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*InputUserObj) CRC() uint32 {
	return uint32(0xd8292816)
}

func (*InputUserObj) ImplementsInputUser() {}

func (e *InputUserObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *InputUserObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type InputUserSelf struct{}

func (e *InputUserSelf) Validate() error {
	return nil
}

func (*InputUserSelf) CRC() uint32 {
	return uint32(0xf7c1b13f)
}

func (*InputUserSelf) ImplementsInputUser() {}

func (e *InputUserSelf) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputUserSelf) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputUserEmpty struct{}

func (e *InputUserEmpty) Validate() error {
	return nil
}

func (*InputUserEmpty) CRC() uint32 {
	return uint32(0xb98886cf)
}

func (*InputUserEmpty) ImplementsInputUser() {}

func (e *InputUserEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputUserEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputWallPaper interface {
	serialize.TL
	ImplementsInputWallPaper()
	Validate() error
}

type InputWallPaperNoFile struct{}

func (e *InputWallPaperNoFile) Validate() error {
	return nil
}

func (*InputWallPaperNoFile) CRC() uint32 {
	return uint32(0x8427bbac)
}

func (*InputWallPaperNoFile) ImplementsInputWallPaper() {}

func (e *InputWallPaperNoFile) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputWallPaperNoFile) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputWallPaperSlug struct {
	Slug string `validate:"required"`
}

func (e *InputWallPaperSlug) Validate() error {
	if e.Slug == "" {
		return fmt.Errorf("field 'Slug' is not set")
	} // builtin_check

	return nil
}

func (*InputWallPaperSlug) CRC() uint32 {
	return uint32(0x72091c80)
}

func (*InputWallPaperSlug) ImplementsInputWallPaper() {}

func (e *InputWallPaperSlug) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Slug)
	return buf.Result()
}

func (e *InputWallPaperSlug) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Slug)
	return buf.Result()
}

type InputWallPaperObj struct {
	AccessHash int64 `validate:"required"`
	Id         int64 `validate:"required"`
}

func (e *InputWallPaperObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*InputWallPaperObj) CRC() uint32 {
	return uint32(0xe630b979)
}

func (*InputWallPaperObj) ImplementsInputWallPaper() {}

func (e *InputWallPaperObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *InputWallPaperObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutLong(e.Id)
	return buf.Result()
}

type InputWebFileLocation interface {
	serialize.TL
	ImplementsInputWebFileLocation()
	Validate() error
}

type InputWebFileLocationObj struct {
	AccessHash int64  `validate:"required"`
	Url        string `validate:"required"`
}

func (e *InputWebFileLocationObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*InputWebFileLocationObj) CRC() uint32 {
	return uint32(0xc239d686)
}

func (*InputWebFileLocationObj) ImplementsInputWebFileLocation() {}

func (e *InputWebFileLocationObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *InputWebFileLocationObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutString(e.Url)
	return buf.Result()
}

type InputWebFileGeoPointLocation struct {
	AccessHash int64         `validate:"required"`
	GeoPoint   InputGeoPoint `validate:"required"`
	H          int32         `validate:"required"`
	Scale      int32         `validate:"required"`
	W          int32         `validate:"required"`
	Zoom       int32         `validate:"required"`
}

func (e *InputWebFileGeoPointLocation) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if err := e.GeoPoint.Validate(); err != nil {
		return fmt.Errorf("field 'GeoPoint': %w", err)
	} // type_iter_check

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if e.Scale == 0 {
		return fmt.Errorf("field 'Scale' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	if e.Zoom == 0 {
		return fmt.Errorf("field 'Zoom' is not set")
	} // builtin_check

	return nil
}

func (*InputWebFileGeoPointLocation) CRC() uint32 {
	return uint32(0x9f2221c9)
}

func (*InputWebFileGeoPointLocation) ImplementsInputWebFileLocation() {}

func (e *InputWebFileGeoPointLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutInt(e.H)
	buf.PutInt(e.Scale)
	buf.PutInt(e.W)
	buf.PutInt(e.Zoom)
	return buf.Result()
}

func (e *InputWebFileGeoPointLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutRawBytes(e.GeoPoint.Encode())
	buf.PutInt(e.H)
	buf.PutInt(e.Scale)
	buf.PutInt(e.W)
	buf.PutInt(e.Zoom)
	return buf.Result()
}

type IpPort interface {
	serialize.TL
	ImplementsIpPort()
	Validate() error
}

type IpPortObj struct {
	Ipv4 int32 `validate:"required"`
	Port int32 `validate:"required"`
}

func (e *IpPortObj) Validate() error {
	if e.Ipv4 == 0 {
		return fmt.Errorf("field 'Ipv4' is not set")
	} // builtin_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	return nil
}

func (*IpPortObj) CRC() uint32 {
	return uint32(0xd433ad73)
}

func (*IpPortObj) ImplementsIpPort() {}

func (e *IpPortObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Ipv4)
	buf.PutInt(e.Port)
	return buf.Result()
}

func (e *IpPortObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Ipv4)
	buf.PutInt(e.Port)
	return buf.Result()
}

type IpPortSecret struct {
	Ipv4   int32  `validate:"required"`
	Port   int32  `validate:"required"`
	Secret []byte `validate:"required"`
}

func (e *IpPortSecret) Validate() error {
	if e.Ipv4 == 0 {
		return fmt.Errorf("field 'Ipv4' is not set")
	} // builtin_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	if len(e.Secret) == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // byte_slice_check

	return nil
}

func (*IpPortSecret) CRC() uint32 {
	return uint32(0x37982646)
}

func (*IpPortSecret) ImplementsIpPort() {}

func (e *IpPortSecret) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Ipv4)
	buf.PutInt(e.Port)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

func (e *IpPortSecret) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Ipv4)
	buf.PutInt(e.Port)
	buf.PutMessage(e.Secret)
	return buf.Result()
}

type JSONValue interface {
	serialize.TL
	ImplementsJSONValue()
	Validate() error
}

type JsonString struct {
	Value string `validate:"required"`
}

func (e *JsonString) Validate() error {
	if e.Value == "" {
		return fmt.Errorf("field 'Value' is not set")
	} // builtin_check

	return nil
}

func (*JsonString) CRC() uint32 {
	return uint32(0xb71e767a)
}

func (*JsonString) ImplementsJSONValue() {}

func (e *JsonString) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Value)
	return buf.Result()
}

func (e *JsonString) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Value)
	return buf.Result()
}

type JsonBool struct {
	Value bool `validate:"required"`
}

func (e *JsonBool) Validate() error {
	if e.Value == false {
		return fmt.Errorf("field 'Value' is not set")
	} // builtin_check

	return nil
}

func (*JsonBool) CRC() uint32 {
	return uint32(0xc7345e6a)
}

func (*JsonBool) ImplementsJSONValue() {}

func (e *JsonBool) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Value)
	return buf.Result()
}

func (e *JsonBool) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Value)
	return buf.Result()
}

type JsonObject struct {
	Value []*JSONObjectValue `validate:"required"`
}

func (e *JsonObject) Validate() error {
	if len(e.Value) == 0 {
		return fmt.Errorf("field 'Value' is not set")
	} // slice_len_check
	for _, item := range e.Value {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Value': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*JsonObject) CRC() uint32 {
	return uint32(0x99c1d49d)
}

func (*JsonObject) ImplementsJSONValue() {}

func (e *JsonObject) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Value)
	return buf.Result()
}

func (e *JsonObject) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Value)
	return buf.Result()
}

type JsonArray struct {
	Value []JSONValue `validate:"required"`
}

func (e *JsonArray) Validate() error {
	if len(e.Value) == 0 {
		return fmt.Errorf("field 'Value' is not set")
	} // slice_len_check
	for _, item := range e.Value {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Value': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*JsonArray) CRC() uint32 {
	return uint32(0xf7444763)
}

func (*JsonArray) ImplementsJSONValue() {}

func (e *JsonArray) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Value)
	return buf.Result()
}

func (e *JsonArray) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Value)
	return buf.Result()
}

type JsonNull struct{}

func (e *JsonNull) Validate() error {
	return nil
}

func (*JsonNull) CRC() uint32 {
	return uint32(0x3f6d7b68)
}

func (*JsonNull) ImplementsJSONValue() {}

func (e *JsonNull) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *JsonNull) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type JsonNumber struct {
	Value float64 `validate:"required"`
}

func (e *JsonNumber) Validate() error {
	if e.Value == 0 {
		return fmt.Errorf("field 'Value' is not set")
	} // builtin_check

	return nil
}

func (*JsonNumber) CRC() uint32 {
	return uint32(0x2be0dfa4)
}

func (*JsonNumber) ImplementsJSONValue() {}

func (e *JsonNumber) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Value)
	return buf.Result()
}

func (e *JsonNumber) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutDouble(e.Value)
	return buf.Result()
}

type KeyboardButton interface {
	serialize.TL
	ImplementsKeyboardButton()
	Validate() error
}

type KeyboardButtonRequestGeoLocation struct {
	Text string `validate:"required"`
}

func (e *KeyboardButtonRequestGeoLocation) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonRequestGeoLocation) CRC() uint32 {
	return uint32(0xfc796b3f)
}

func (*KeyboardButtonRequestGeoLocation) ImplementsKeyboardButton() {}

func (e *KeyboardButtonRequestGeoLocation) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonRequestGeoLocation) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonUrlAuth struct {
	ButtonId        int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	FwdText         string   `flag:"0"`
	Text            string   `validate:"required"`
	Url             string   `validate:"required"`
}

func (e *KeyboardButtonUrlAuth) Validate() error {
	if e.ButtonId == 0 {
		return fmt.Errorf("field 'ButtonId' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonUrlAuth) CRC() uint32 {
	return uint32(0x10b78d29)
}

func (*KeyboardButtonUrlAuth) ImplementsKeyboardButton() {}

func (e *KeyboardButtonUrlAuth) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FwdText) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ButtonId)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FwdText) {
		buf.PutString(e.FwdText)
	}
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *KeyboardButtonUrlAuth) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FwdText != "" {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ButtonId)
	buf.PutUint(flag)
	if e.FwdText != "" {
		buf.PutString(e.FwdText)
	}
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

type KeyboardButtonBuy struct {
	Text string `validate:"required"`
}

func (e *KeyboardButtonBuy) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonBuy) CRC() uint32 {
	return uint32(0xafd93fbb)
}

func (*KeyboardButtonBuy) ImplementsKeyboardButton() {}

func (e *KeyboardButtonBuy) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonBuy) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type InputKeyboardButtonUrlAuth struct {
	Bot                InputUser `validate:"required"`
	__flagsPosition    struct{}  // flags param position `validate:"required"`
	FwdText            string    `flag:"1"`
	RequestWriteAccess bool      `flag:"0,encoded_in_bitflags"`
	Text               string    `validate:"required"`
	Url                string    `validate:"required"`
}

func (e *InputKeyboardButtonUrlAuth) Validate() error {
	if err := e.Bot.Validate(); err != nil {
		return fmt.Errorf("field 'Bot': %w", err)
	} // type_iter_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*InputKeyboardButtonUrlAuth) CRC() uint32 {
	return uint32(0xd02e7fd4)
}

func (*InputKeyboardButtonUrlAuth) ImplementsKeyboardButton() {}

func (e *InputKeyboardButtonUrlAuth) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.RequestWriteAccess) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FwdText) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FwdText) {
		buf.PutString(e.FwdText)
	}
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *InputKeyboardButtonUrlAuth) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.RequestWriteAccess != false {
		flag |= 1 << 0
	}
	if e.FwdText != "" {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutUint(flag)
	if e.FwdText != "" {
		buf.PutString(e.FwdText)
	}
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

type KeyboardButtonGame struct {
	Text string `validate:"required"`
}

func (e *KeyboardButtonGame) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonGame) CRC() uint32 {
	return uint32(0x50f41ccf)
}

func (*KeyboardButtonGame) ImplementsKeyboardButton() {}

func (e *KeyboardButtonGame) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonGame) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonRequestPoll struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Quiz            bool     `flag:"0"`
	Text            string   `validate:"required"`
}

func (e *KeyboardButtonRequestPoll) Validate() error {

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonRequestPoll) CRC() uint32 {
	return uint32(0xbbc7515d)
}

func (*KeyboardButtonRequestPoll) ImplementsKeyboardButton() {}

func (e *KeyboardButtonRequestPoll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Quiz) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Quiz) {
		buf.PutBool(e.Quiz)
	}
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonRequestPoll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Quiz != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Quiz != false {
		buf.PutBool(e.Quiz)
	}
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonObj struct {
	Text string `validate:"required"`
}

func (e *KeyboardButtonObj) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonObj) CRC() uint32 {
	return uint32(0xa2fa4880)
}

func (*KeyboardButtonObj) ImplementsKeyboardButton() {}

func (e *KeyboardButtonObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonUrl struct {
	Text string `validate:"required"`
	Url  string `validate:"required"`
}

func (e *KeyboardButtonUrl) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonUrl) CRC() uint32 {
	return uint32(0x258aff05)
}

func (*KeyboardButtonUrl) ImplementsKeyboardButton() {}

func (e *KeyboardButtonUrl) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *KeyboardButtonUrl) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	buf.PutString(e.Url)
	return buf.Result()
}

type KeyboardButtonCallback struct {
	Data []byte `validate:"required"`
	Text string `validate:"required"`
}

func (e *KeyboardButtonCallback) Validate() error {
	if len(e.Data) == 0 {
		return fmt.Errorf("field 'Data' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonCallback) CRC() uint32 {
	return uint32(0x683a5e46)
}

func (*KeyboardButtonCallback) ImplementsKeyboardButton() {}

func (e *KeyboardButtonCallback) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonCallback) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonRequestPhone struct {
	Text string `validate:"required"`
}

func (e *KeyboardButtonRequestPhone) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonRequestPhone) CRC() uint32 {
	return uint32(0xb16a6c29)
}

func (*KeyboardButtonRequestPhone) ImplementsKeyboardButton() {}

func (e *KeyboardButtonRequestPhone) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonRequestPhone) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type KeyboardButtonSwitchInline struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Query           string   `validate:"required"`
	SamePeer        bool     `flag:"0,encoded_in_bitflags"`
	Text            string   `validate:"required"`
}

func (e *KeyboardButtonSwitchInline) Validate() error {

	if e.Query == "" {
		return fmt.Errorf("field 'Query' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*KeyboardButtonSwitchInline) CRC() uint32 {
	return uint32(0x568a748)
}

func (*KeyboardButtonSwitchInline) ImplementsKeyboardButton() {}

func (e *KeyboardButtonSwitchInline) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SamePeer) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Query)
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *KeyboardButtonSwitchInline) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SamePeer != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutString(e.Query)
	buf.PutString(e.Text)
	return buf.Result()
}

type LangPackString interface {
	serialize.TL
	ImplementsLangPackString()
	Validate() error
}

type LangPackStringObj struct {
	Key   string `validate:"required"`
	Value string `validate:"required"`
}

func (e *LangPackStringObj) Validate() error {
	if e.Key == "" {
		return fmt.Errorf("field 'Key' is not set")
	} // builtin_check

	if e.Value == "" {
		return fmt.Errorf("field 'Value' is not set")
	} // builtin_check

	return nil
}

func (*LangPackStringObj) CRC() uint32 {
	return uint32(0xcad181f6)
}

func (*LangPackStringObj) ImplementsLangPackString() {}

func (e *LangPackStringObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	buf.PutString(e.Value)
	return buf.Result()
}

func (e *LangPackStringObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	buf.PutString(e.Value)
	return buf.Result()
}

type LangPackStringPluralized struct {
	FewValue        string   `flag:"3"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Key             string   `validate:"required"`
	ManyValue       string   `flag:"4"`
	OneValue        string   `flag:"1"`
	OtherValue      string   `validate:"required"`
	TwoValue        string   `flag:"2"`
	ZeroValue       string   `flag:"0"`
}

func (e *LangPackStringPluralized) Validate() error {

	if e.Key == "" {
		return fmt.Errorf("field 'Key' is not set")
	} // builtin_check

	if e.OtherValue == "" {
		return fmt.Errorf("field 'OtherValue' is not set")
	} // builtin_check

	return nil
}

func (*LangPackStringPluralized) CRC() uint32 {
	return uint32(0x6c47ac9f)
}

func (*LangPackStringPluralized) ImplementsLangPackString() {}

func (e *LangPackStringPluralized) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ZeroValue) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.OneValue) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.TwoValue) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.FewValue) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.ManyValue) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.FewValue) {
		buf.PutString(e.FewValue)
	}
	buf.PutUint(flag)
	buf.PutString(e.Key)
	if !zero.IsZeroVal(e.ManyValue) {
		buf.PutString(e.ManyValue)
	}
	if !zero.IsZeroVal(e.OneValue) {
		buf.PutString(e.OneValue)
	}
	buf.PutString(e.OtherValue)
	if !zero.IsZeroVal(e.TwoValue) {
		buf.PutString(e.TwoValue)
	}
	if !zero.IsZeroVal(e.ZeroValue) {
		buf.PutString(e.ZeroValue)
	}
	return buf.Result()
}

func (e *LangPackStringPluralized) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ZeroValue != "" {
		flag |= 1 << 0
	}
	if e.OneValue != "" {
		flag |= 1 << 1
	}
	if e.TwoValue != "" {
		flag |= 1 << 2
	}
	if e.FewValue != "" {
		flag |= 1 << 3
	}
	if e.ManyValue != "" {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.FewValue != "" {
		buf.PutString(e.FewValue)
	}
	buf.PutUint(flag)
	buf.PutString(e.Key)
	if e.ManyValue != "" {
		buf.PutString(e.ManyValue)
	}
	if e.OneValue != "" {
		buf.PutString(e.OneValue)
	}
	buf.PutString(e.OtherValue)
	if e.TwoValue != "" {
		buf.PutString(e.TwoValue)
	}
	if e.ZeroValue != "" {
		buf.PutString(e.ZeroValue)
	}
	return buf.Result()
}

type LangPackStringDeleted struct {
	Key string `validate:"required"`
}

func (e *LangPackStringDeleted) Validate() error {
	if e.Key == "" {
		return fmt.Errorf("field 'Key' is not set")
	} // builtin_check

	return nil
}

func (*LangPackStringDeleted) CRC() uint32 {
	return uint32(0x2979eeb2)
}

func (*LangPackStringDeleted) ImplementsLangPackString() {}

func (e *LangPackStringDeleted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	return buf.Result()
}

func (e *LangPackStringDeleted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Key)
	return buf.Result()
}

type Message interface {
	serialize.TL
	ImplementsMessage()
	Validate() error
}

type MessageService struct {
	Action          MessageAction `validate:"required"`
	Date            int32         `validate:"required"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	FromId          int32         `flag:"8"`
	Id              int32         `validate:"required"`
	Legacy          bool          `flag:"19,encoded_in_bitflags"`
	MediaUnread     bool          `flag:"5,encoded_in_bitflags"`
	Mentioned       bool          `flag:"4,encoded_in_bitflags"`
	Out             bool          `flag:"1,encoded_in_bitflags"`
	Post            bool          `flag:"14,encoded_in_bitflags"`
	ReplyToMsgId    int32         `flag:"3"`
	Silent          bool          `flag:"13,encoded_in_bitflags"`
	ToId            Peer          `validate:"required"`
}

func (e *MessageService) Validate() error {
	if err := e.Action.Validate(); err != nil {
		return fmt.Errorf("field 'Action': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if err := e.ToId.Validate(); err != nil {
		return fmt.Errorf("field 'ToId': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageService) CRC() uint32 {
	return uint32(0x9e19a1f6)
}

func (*MessageService) ImplementsMessage() {}

func (e *MessageService) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Out) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Mentioned) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.MediaUnread) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.FromId) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.Post) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.Legacy) {
		flag |= 1 << 19
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FromId) {
		buf.PutInt(e.FromId)
	}
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutRawBytes(e.ToId.Encode())
	return buf.Result()
}

func (e *MessageService) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Out != false {
		flag |= 1 << 1
	}
	if e.ReplyToMsgId != 0 {
		flag |= 1 << 3
	}
	if e.Mentioned != false {
		flag |= 1 << 4
	}
	if e.MediaUnread != false {
		flag |= 1 << 5
	}
	if e.FromId != 0 {
		flag |= 1 << 8
	}
	if e.Silent != false {
		flag |= 1 << 13
	}
	if e.Post != false {
		flag |= 1 << 14
	}
	if e.Legacy != false {
		flag |= 1 << 19
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.FromId != 0 {
		buf.PutInt(e.FromId)
	}
	buf.PutInt(e.Id)
	if e.ReplyToMsgId != 0 {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutRawBytes(e.ToId.Encode())
	return buf.Result()
}

type MessageObj struct {
	Date              int32                `validate:"required"`
	EditDate          int32                `flag:"15"`
	EditHide          bool                 `flag:"21,encoded_in_bitflags"`
	Entities          []MessageEntity      `flag:"7"`
	__flagsPosition   struct{}             // flags param position `validate:"required"`
	FromId            int32                `flag:"8"`
	FromScheduled     bool                 `flag:"18,encoded_in_bitflags"`
	FwdFrom           *MessageFwdHeader    `flag:"2"`
	GroupedId         int64                `flag:"17"`
	Id                int32                `validate:"required"`
	Legacy            bool                 `flag:"19,encoded_in_bitflags"`
	Media             MessageMedia         `flag:"9"`
	MediaUnread       bool                 `flag:"5,encoded_in_bitflags"`
	Mentioned         bool                 `flag:"4,encoded_in_bitflags"`
	Message           string               `validate:"required"`
	Out               bool                 `flag:"1,encoded_in_bitflags"`
	Post              bool                 `flag:"14,encoded_in_bitflags"`
	PostAuthor        string               `flag:"16"`
	ReplyMarkup       ReplyMarkup          `flag:"6"`
	ReplyToMsgId      int32                `flag:"3"`
	RestrictionReason []*RestrictionReason `flag:"22"`
	Silent            bool                 `flag:"13,encoded_in_bitflags"`
	ToId              Peer                 `validate:"required"`
	ViaBotId          int32                `flag:"11"`
	Views             int32                `flag:"10"`
}

func (e *MessageObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	if err := e.ToId.Validate(); err != nil {
		return fmt.Errorf("field 'ToId': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageObj) CRC() uint32 {
	return uint32(0x452c0e65)
}

func (*MessageObj) ImplementsMessage() {}

func (e *MessageObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Out) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.FwdFrom) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Mentioned) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.MediaUnread) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.FromId) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Media) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.Views) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.ViaBotId) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.Post) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.EditDate) {
		flag |= 1 << 15
	}
	if !zero.IsZeroVal(e.PostAuthor) {
		flag |= 1 << 16
	}
	if !zero.IsZeroVal(e.GroupedId) {
		flag |= 1 << 17
	}
	if !zero.IsZeroVal(e.FromScheduled) {
		flag |= 1 << 18
	}
	if !zero.IsZeroVal(e.Legacy) {
		flag |= 1 << 19
	}
	if !zero.IsZeroVal(e.EditHide) {
		flag |= 1 << 21
	}
	if !zero.IsZeroVal(e.RestrictionReason) {
		flag |= 1 << 22
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.EditDate) {
		buf.PutInt(e.EditDate)
	}
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FromId) {
		buf.PutInt(e.FromId)
	}
	if !zero.IsZeroVal(e.FwdFrom) {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	if !zero.IsZeroVal(e.GroupedId) {
		buf.PutLong(e.GroupedId)
	}
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Media) {
		buf.PutRawBytes(e.Media.Encode())
	}
	buf.PutString(e.Message)
	if !zero.IsZeroVal(e.PostAuthor) {
		buf.PutString(e.PostAuthor)
	}
	if !zero.IsZeroVal(e.ReplyMarkup) {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	if !zero.IsZeroVal(e.RestrictionReason) {
		buf.PutVector(e.RestrictionReason)
	}
	buf.PutRawBytes(e.ToId.Encode())
	if !zero.IsZeroVal(e.ViaBotId) {
		buf.PutInt(e.ViaBotId)
	}
	if !zero.IsZeroVal(e.Views) {
		buf.PutInt(e.Views)
	}
	return buf.Result()
}

func (e *MessageObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Out != false {
		flag |= 1 << 1
	}
	if e.FwdFrom.Validate() == nil {
		flag |= 1 << 2
	}
	if e.ReplyToMsgId != 0 {
		flag |= 1 << 3
	}
	if e.Mentioned != false {
		flag |= 1 << 4
	}
	if e.MediaUnread != false {
		flag |= 1 << 5
	}
	if e.ReplyMarkup.Validate() == nil {
		flag |= 1 << 6
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 7
	}
	if e.FromId != 0 {
		flag |= 1 << 8
	}
	if e.Media.Validate() == nil {
		flag |= 1 << 9
	}
	if e.Views != 0 {
		flag |= 1 << 10
	}
	if e.ViaBotId != 0 {
		flag |= 1 << 11
	}
	if e.Silent != false {
		flag |= 1 << 13
	}
	if e.Post != false {
		flag |= 1 << 14
	}
	if e.EditDate != 0 {
		flag |= 1 << 15
	}
	if e.PostAuthor != "" {
		flag |= 1 << 16
	}
	if e.GroupedId != 0 {
		flag |= 1 << 17
	}
	if e.FromScheduled != false {
		flag |= 1 << 18
	}
	if e.Legacy != false {
		flag |= 1 << 19
	}
	if e.EditHide != false {
		flag |= 1 << 21
	}
	if len(e.RestrictionReason) > 0 {
		flag |= 1 << 22
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if e.EditDate != 0 {
		buf.PutInt(e.EditDate)
	}
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	if e.FromId != 0 {
		buf.PutInt(e.FromId)
	}
	if e.FwdFrom.Validate() == nil {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	if e.GroupedId != 0 {
		buf.PutLong(e.GroupedId)
	}
	buf.PutInt(e.Id)
	if e.Media.Validate() == nil {
		buf.PutRawBytes(e.Media.Encode())
	}
	buf.PutString(e.Message)
	if e.PostAuthor != "" {
		buf.PutString(e.PostAuthor)
	}
	if e.ReplyMarkup.Validate() == nil {
		buf.PutRawBytes(e.ReplyMarkup.Encode())
	}
	if e.ReplyToMsgId != 0 {
		buf.PutInt(e.ReplyToMsgId)
	}
	if len(e.RestrictionReason) > 0 {
		buf.PutVector(e.RestrictionReason)
	}
	buf.PutRawBytes(e.ToId.Encode())
	if e.ViaBotId != 0 {
		buf.PutInt(e.ViaBotId)
	}
	if e.Views != 0 {
		buf.PutInt(e.Views)
	}
	return buf.Result()
}

type MessageEmpty struct {
	Id int32 `validate:"required"`
}

func (e *MessageEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*MessageEmpty) CRC() uint32 {
	return uint32(0x83e5de54)
}

func (*MessageEmpty) ImplementsMessage() {}

func (e *MessageEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *MessageEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type MessageAction interface {
	serialize.TL
	ImplementsMessageAction()
	Validate() error
}

type MessageActionEmpty struct{}

func (e *MessageActionEmpty) Validate() error {
	return nil
}

func (*MessageActionEmpty) CRC() uint32 {
	return uint32(0xb6aef7b0)
}

func (*MessageActionEmpty) ImplementsMessageAction() {}

func (e *MessageActionEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageActionChatDeleteUser struct {
	UserId int32 `validate:"required"`
}

func (e *MessageActionChatDeleteUser) Validate() error {
	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChatDeleteUser) CRC() uint32 {
	return uint32(0xb2ae9b0c)
}

func (*MessageActionChatDeleteUser) ImplementsMessageAction() {}

func (e *MessageActionChatDeleteUser) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *MessageActionChatDeleteUser) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type MessageActionChatJoinedByLink struct {
	InviterId int32 `validate:"required"`
}

func (e *MessageActionChatJoinedByLink) Validate() error {
	if e.InviterId == 0 {
		return fmt.Errorf("field 'InviterId' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChatJoinedByLink) CRC() uint32 {
	return uint32(0xf89cf5e8)
}

func (*MessageActionChatJoinedByLink) ImplementsMessageAction() {}

func (e *MessageActionChatJoinedByLink) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.InviterId)
	return buf.Result()
}

func (e *MessageActionChatJoinedByLink) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.InviterId)
	return buf.Result()
}

type MessageActionChannelCreate struct {
	Title string `validate:"required"`
}

func (e *MessageActionChannelCreate) Validate() error {
	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChannelCreate) CRC() uint32 {
	return uint32(0x95d2ac92)
}

func (*MessageActionChannelCreate) ImplementsMessageAction() {}

func (e *MessageActionChannelCreate) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *MessageActionChannelCreate) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	return buf.Result()
}

type MessageActionChatMigrateTo struct {
	ChannelId int32 `validate:"required"`
}

func (e *MessageActionChatMigrateTo) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChatMigrateTo) CRC() uint32 {
	return uint32(0x51bdb021)
}

func (*MessageActionChatMigrateTo) ImplementsMessageAction() {}

func (e *MessageActionChatMigrateTo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *MessageActionChatMigrateTo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type MessageActionChannelMigrateFrom struct {
	ChatId int32  `validate:"required"`
	Title  string `validate:"required"`
}

func (e *MessageActionChannelMigrateFrom) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChannelMigrateFrom) CRC() uint32 {
	return uint32(0xb055eaee)
}

func (*MessageActionChannelMigrateFrom) ImplementsMessageAction() {}

func (e *MessageActionChannelMigrateFrom) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *MessageActionChannelMigrateFrom) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutString(e.Title)
	return buf.Result()
}

type MessageActionPinMessage struct{}

func (e *MessageActionPinMessage) Validate() error {
	return nil
}

func (*MessageActionPinMessage) CRC() uint32 {
	return uint32(0x94bd38ed)
}

func (*MessageActionPinMessage) ImplementsMessageAction() {}

func (e *MessageActionPinMessage) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionPinMessage) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageActionHistoryClear struct{}

func (e *MessageActionHistoryClear) Validate() error {
	return nil
}

func (*MessageActionHistoryClear) CRC() uint32 {
	return uint32(0x9fbab604)
}

func (*MessageActionHistoryClear) ImplementsMessageAction() {}

func (e *MessageActionHistoryClear) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionHistoryClear) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageActionGameScore struct {
	GameId int64 `validate:"required"`
	Score  int32 `validate:"required"`
}

func (e *MessageActionGameScore) Validate() error {
	if e.GameId == 0 {
		return fmt.Errorf("field 'GameId' is not set")
	} // builtin_check

	if e.Score == 0 {
		return fmt.Errorf("field 'Score' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionGameScore) CRC() uint32 {
	return uint32(0x92a72876)
}

func (*MessageActionGameScore) ImplementsMessageAction() {}

func (e *MessageActionGameScore) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.GameId)
	buf.PutInt(e.Score)
	return buf.Result()
}

func (e *MessageActionGameScore) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.GameId)
	buf.PutInt(e.Score)
	return buf.Result()
}

type MessageActionPaymentSentMe struct {
	Charge           *PaymentCharge        `validate:"required"`
	Currency         string                `validate:"required"`
	__flagsPosition  struct{}              // flags param position `validate:"required"`
	Info             *PaymentRequestedInfo `flag:"0"`
	Payload          []byte                `validate:"required"`
	ShippingOptionId string                `flag:"1"`
	TotalAmount      int64                 `validate:"required"`
}

func (e *MessageActionPaymentSentMe) Validate() error {
	if err := e.Charge.Validate(); err != nil {
		return fmt.Errorf("field 'Charge': %w", err)
	} // type_iter_check

	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if len(e.Payload) == 0 {
		return fmt.Errorf("field 'Payload' is not set")
	} // byte_slice_check

	if e.TotalAmount == 0 {
		return fmt.Errorf("field 'TotalAmount' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionPaymentSentMe) CRC() uint32 {
	return uint32(0x8f31b327)
}

func (*MessageActionPaymentSentMe) ImplementsMessageAction() {}

func (e *MessageActionPaymentSentMe) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Info) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingOptionId) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Charge.Encode())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Info) {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutMessage(e.Payload)
	if !zero.IsZeroVal(e.ShippingOptionId) {
		buf.PutString(e.ShippingOptionId)
	}
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

func (e *MessageActionPaymentSentMe) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Info.Validate() == nil {
		flag |= 1 << 0
	}
	if e.ShippingOptionId != "" {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Charge.Encode())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	if e.Info.Validate() == nil {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutMessage(e.Payload)
	if e.ShippingOptionId != "" {
		buf.PutString(e.ShippingOptionId)
	}
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

type MessageActionPaymentSent struct {
	Currency    string `validate:"required"`
	TotalAmount int64  `validate:"required"`
}

func (e *MessageActionPaymentSent) Validate() error {
	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if e.TotalAmount == 0 {
		return fmt.Errorf("field 'TotalAmount' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionPaymentSent) CRC() uint32 {
	return uint32(0x40699cd0)
}

func (*MessageActionPaymentSent) ImplementsMessageAction() {}

func (e *MessageActionPaymentSent) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

func (e *MessageActionPaymentSent) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

type MessageActionChatAddUser struct {
	Users []int32 `validate:"required"`
}

func (e *MessageActionChatAddUser) Validate() error {
	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if item == 0 {
			return fmt.Errorf("field 'Users' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*MessageActionChatAddUser) CRC() uint32 {
	return uint32(0x488a7337)
}

func (*MessageActionChatAddUser) ImplementsMessageAction() {}

func (e *MessageActionChatAddUser) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessageActionChatAddUser) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessageActionChatDeletePhoto struct{}

func (e *MessageActionChatDeletePhoto) Validate() error {
	return nil
}

func (*MessageActionChatDeletePhoto) CRC() uint32 {
	return uint32(0x95e3fbef)
}

func (*MessageActionChatDeletePhoto) ImplementsMessageAction() {}

func (e *MessageActionChatDeletePhoto) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionChatDeletePhoto) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageActionPhoneCall struct {
	CallId          int64                  `validate:"required"`
	Duration        int32                  `flag:"1"`
	__flagsPosition struct{}               // flags param position `validate:"required"`
	Reason          PhoneCallDiscardReason `flag:"0"`
	Video           bool                   `flag:"2,encoded_in_bitflags"`
}

func (e *MessageActionPhoneCall) Validate() error {
	if e.CallId == 0 {
		return fmt.Errorf("field 'CallId' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionPhoneCall) CRC() uint32 {
	return uint32(0x80e11a7f)
}

func (*MessageActionPhoneCall) ImplementsMessageAction() {}

func (e *MessageActionPhoneCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Reason) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Duration) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.CallId)
	if !zero.IsZeroVal(e.Duration) {
		buf.PutInt(e.Duration)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Reason) {
		buf.PutRawBytes(e.Reason.Encode())
	}
	return buf.Result()
}

func (e *MessageActionPhoneCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Reason != 0 {
		flag |= 1 << 0
	}
	if e.Duration != 0 {
		flag |= 1 << 1
	}
	if e.Video != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.CallId)
	if e.Duration != 0 {
		buf.PutInt(e.Duration)
	}
	buf.PutUint(flag)
	if e.Reason != 0 {
		buf.PutRawBytes(e.Reason.Encode())
	}
	return buf.Result()
}

type MessageActionChatEditPhoto struct {
	Photo Photo `validate:"required"`
}

func (e *MessageActionChatEditPhoto) Validate() error {
	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageActionChatEditPhoto) CRC() uint32 {
	return uint32(0x7fcb13a8)
}

func (*MessageActionChatEditPhoto) ImplementsMessageAction() {}

func (e *MessageActionChatEditPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Photo.Encode())
	return buf.Result()
}

func (e *MessageActionChatEditPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Photo.Encode())
	return buf.Result()
}

type MessageActionChatCreate struct {
	Title string  `validate:"required"`
	Users []int32 `validate:"required"`
}

func (e *MessageActionChatCreate) Validate() error {
	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if item == 0 {
			return fmt.Errorf("field 'Users' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*MessageActionChatCreate) CRC() uint32 {
	return uint32(0xa6638b9a)
}

func (*MessageActionChatCreate) ImplementsMessageAction() {}

func (e *MessageActionChatCreate) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessageActionChatCreate) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessageActionScreenshotTaken struct{}

func (e *MessageActionScreenshotTaken) Validate() error {
	return nil
}

func (*MessageActionScreenshotTaken) CRC() uint32 {
	return uint32(0x4792929b)
}

func (*MessageActionScreenshotTaken) ImplementsMessageAction() {}

func (e *MessageActionScreenshotTaken) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionScreenshotTaken) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageActionCustomAction struct {
	Message string `validate:"required"`
}

func (e *MessageActionCustomAction) Validate() error {
	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionCustomAction) CRC() uint32 {
	return uint32(0xfae69f56)
}

func (*MessageActionCustomAction) ImplementsMessageAction() {}

func (e *MessageActionCustomAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Message)
	return buf.Result()
}

func (e *MessageActionCustomAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Message)
	return buf.Result()
}

type MessageActionBotAllowed struct {
	Domain string `validate:"required"`
}

func (e *MessageActionBotAllowed) Validate() error {
	if e.Domain == "" {
		return fmt.Errorf("field 'Domain' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionBotAllowed) CRC() uint32 {
	return uint32(0xabe9affe)
}

func (*MessageActionBotAllowed) ImplementsMessageAction() {}

func (e *MessageActionBotAllowed) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Domain)
	return buf.Result()
}

func (e *MessageActionBotAllowed) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Domain)
	return buf.Result()
}

type MessageActionChatEditTitle struct {
	Title string `validate:"required"`
}

func (e *MessageActionChatEditTitle) Validate() error {
	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	return nil
}

func (*MessageActionChatEditTitle) CRC() uint32 {
	return uint32(0xb5a1ce5a)
}

func (*MessageActionChatEditTitle) ImplementsMessageAction() {}

func (e *MessageActionChatEditTitle) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	return buf.Result()
}

func (e *MessageActionChatEditTitle) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Title)
	return buf.Result()
}

type MessageActionSecureValuesSent struct {
	Types []SecureValueType `validate:"required"`
}

func (e *MessageActionSecureValuesSent) Validate() error {
	if len(e.Types) == 0 {
		return fmt.Errorf("field 'Types' is not set")
	} // slice_len_check
	for _, item := range e.Types {
		if item == 0 {
			return fmt.Errorf("field 'Types' is not set")
		} // enum_check
	} // subitem_check

	return nil
}

func (*MessageActionSecureValuesSent) CRC() uint32 {
	return uint32(0xd95c6154)
}

func (*MessageActionSecureValuesSent) ImplementsMessageAction() {}

func (e *MessageActionSecureValuesSent) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

func (e *MessageActionSecureValuesSent) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

type MessageActionSecureValuesSentMe struct {
	Credentials *SecureCredentialsEncrypted `validate:"required"`
	Values      []*SecureValue              `validate:"required"`
}

func (e *MessageActionSecureValuesSentMe) Validate() error {
	if err := e.Credentials.Validate(); err != nil {
		return fmt.Errorf("field 'Credentials': %w", err)
	} // type_iter_check

	if len(e.Values) == 0 {
		return fmt.Errorf("field 'Values' is not set")
	} // slice_len_check
	for _, item := range e.Values {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Values': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessageActionSecureValuesSentMe) CRC() uint32 {
	return uint32(0x1b287353)
}

func (*MessageActionSecureValuesSentMe) ImplementsMessageAction() {}

func (e *MessageActionSecureValuesSentMe) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Credentials.Encode())
	buf.PutVector(e.Values)
	return buf.Result()
}

func (e *MessageActionSecureValuesSentMe) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Credentials.Encode())
	buf.PutVector(e.Values)
	return buf.Result()
}

type MessageActionContactSignUp struct{}

func (e *MessageActionContactSignUp) Validate() error {
	return nil
}

func (*MessageActionContactSignUp) CRC() uint32 {
	return uint32(0xf3f25f76)
}

func (*MessageActionContactSignUp) ImplementsMessageAction() {}

func (e *MessageActionContactSignUp) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageActionContactSignUp) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageEntity interface {
	serialize.TL
	ImplementsMessageEntity()
	Validate() error
}

type MessageEntityMention struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityMention) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityMention) CRC() uint32 {
	return uint32(0xfa04579d)
}

func (*MessageEntityMention) ImplementsMessageEntity() {}

func (e *MessageEntityMention) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityMention) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityItalic struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityItalic) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityItalic) CRC() uint32 {
	return uint32(0x826f8b60)
}

func (*MessageEntityItalic) ImplementsMessageEntity() {}

func (e *MessageEntityItalic) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityItalic) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityPre struct {
	Language string `validate:"required"`
	Length   int32  `validate:"required"`
	Offset   int32  `validate:"required"`
}

func (e *MessageEntityPre) Validate() error {
	if e.Language == "" {
		return fmt.Errorf("field 'Language' is not set")
	} // builtin_check

	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityPre) CRC() uint32 {
	return uint32(0x73924be0)
}

func (*MessageEntityPre) ImplementsMessageEntity() {}

func (e *MessageEntityPre) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Language)
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityPre) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Language)
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityTextUrl struct {
	Length int32  `validate:"required"`
	Offset int32  `validate:"required"`
	Url    string `validate:"required"`
}

func (e *MessageEntityTextUrl) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityTextUrl) CRC() uint32 {
	return uint32(0x76a6d327)
}

func (*MessageEntityTextUrl) ImplementsMessageEntity() {}

func (e *MessageEntityTextUrl) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *MessageEntityTextUrl) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutString(e.Url)
	return buf.Result()
}

type InputMessageEntityMentionName struct {
	Length int32     `validate:"required"`
	Offset int32     `validate:"required"`
	UserId InputUser `validate:"required"`
}

func (e *InputMessageEntityMentionName) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	if err := e.UserId.Validate(); err != nil {
		return fmt.Errorf("field 'UserId': %w", err)
	} // type_iter_check

	return nil
}

func (*InputMessageEntityMentionName) CRC() uint32 {
	return uint32(0x208e68c9)
}

func (*InputMessageEntityMentionName) ImplementsMessageEntity() {}

func (e *InputMessageEntityMentionName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

func (e *InputMessageEntityMentionName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutRawBytes(e.UserId.Encode())
	return buf.Result()
}

type MessageEntityPhone struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityPhone) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityPhone) CRC() uint32 {
	return uint32(0x9b69e34b)
}

func (*MessageEntityPhone) ImplementsMessageEntity() {}

func (e *MessageEntityPhone) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityPhone) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityCashtag struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityCashtag) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityCashtag) CRC() uint32 {
	return uint32(0x4c4e743f)
}

func (*MessageEntityCashtag) ImplementsMessageEntity() {}

func (e *MessageEntityCashtag) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityCashtag) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityEmail struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityEmail) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityEmail) CRC() uint32 {
	return uint32(0x64e475c2)
}

func (*MessageEntityEmail) ImplementsMessageEntity() {}

func (e *MessageEntityEmail) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityEmail) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityUnderline struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityUnderline) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityUnderline) CRC() uint32 {
	return uint32(0x9c4e7e8b)
}

func (*MessageEntityUnderline) ImplementsMessageEntity() {}

func (e *MessageEntityUnderline) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityUnderline) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityStrike struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityStrike) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityStrike) CRC() uint32 {
	return uint32(0xbf0693d4)
}

func (*MessageEntityStrike) ImplementsMessageEntity() {}

func (e *MessageEntityStrike) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityStrike) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityBlockquote struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityBlockquote) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityBlockquote) CRC() uint32 {
	return uint32(0x20df5d0)
}

func (*MessageEntityBlockquote) ImplementsMessageEntity() {}

func (e *MessageEntityBlockquote) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityBlockquote) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityMentionName struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *MessageEntityMentionName) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityMentionName) CRC() uint32 {
	return uint32(0x352dca58)
}

func (*MessageEntityMentionName) ImplementsMessageEntity() {}

func (e *MessageEntityMentionName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *MessageEntityMentionName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type MessageEntityHashtag struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityHashtag) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityHashtag) CRC() uint32 {
	return uint32(0x6f635b0d)
}

func (*MessageEntityHashtag) ImplementsMessageEntity() {}

func (e *MessageEntityHashtag) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityHashtag) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityBankCard struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityBankCard) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityBankCard) CRC() uint32 {
	return uint32(0x761e6af4)
}

func (*MessageEntityBankCard) ImplementsMessageEntity() {}

func (e *MessageEntityBankCard) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityBankCard) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityBold struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityBold) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityBold) CRC() uint32 {
	return uint32(0xbd610bc9)
}

func (*MessageEntityBold) ImplementsMessageEntity() {}

func (e *MessageEntityBold) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityBold) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityUrl struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityUrl) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityUrl) CRC() uint32 {
	return uint32(0x6ed02538)
}

func (*MessageEntityUrl) ImplementsMessageEntity() {}

func (e *MessageEntityUrl) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityUrl) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityBotCommand struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityBotCommand) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityBotCommand) CRC() uint32 {
	return uint32(0x6cef8ac7)
}

func (*MessageEntityBotCommand) ImplementsMessageEntity() {}

func (e *MessageEntityBotCommand) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityBotCommand) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityCode struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityCode) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityCode) CRC() uint32 {
	return uint32(0x28a20571)
}

func (*MessageEntityCode) ImplementsMessageEntity() {}

func (e *MessageEntityCode) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityCode) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageEntityUnknown struct {
	Length int32 `validate:"required"`
	Offset int32 `validate:"required"`
}

func (e *MessageEntityUnknown) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	if e.Offset == 0 {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	return nil
}

func (*MessageEntityUnknown) CRC() uint32 {
	return uint32(0xbb92ba95)
}

func (*MessageEntityUnknown) ImplementsMessageEntity() {}

func (e *MessageEntityUnknown) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

func (e *MessageEntityUnknown) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	buf.PutInt(e.Offset)
	return buf.Result()
}

type MessageMedia interface {
	serialize.TL
	ImplementsMessageMedia()
	Validate() error
}

type MessageMediaGeo struct {
	Geo GeoPoint `validate:"required"`
}

func (e *MessageMediaGeo) Validate() error {
	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageMediaGeo) CRC() uint32 {
	return uint32(0x56e0d474)
}

func (*MessageMediaGeo) ImplementsMessageMedia() {}

func (e *MessageMediaGeo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Geo.Encode())
	return buf.Result()
}

func (e *MessageMediaGeo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Geo.Encode())
	return buf.Result()
}

type MessageMediaGeoLive struct {
	Geo    GeoPoint `validate:"required"`
	Period int32    `validate:"required"`
}

func (e *MessageMediaGeoLive) Validate() error {
	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	if e.Period == 0 {
		return fmt.Errorf("field 'Period' is not set")
	} // builtin_check

	return nil
}

func (*MessageMediaGeoLive) CRC() uint32 {
	return uint32(0x7c3c2609)
}

func (*MessageMediaGeoLive) ImplementsMessageMedia() {}

func (e *MessageMediaGeoLive) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.Period)
	return buf.Result()
}

func (e *MessageMediaGeoLive) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.Period)
	return buf.Result()
}

type MessageMediaDice struct {
	Emoticon string `validate:"required"`
	Value    int32  `validate:"required"`
}

func (e *MessageMediaDice) Validate() error {
	if e.Emoticon == "" {
		return fmt.Errorf("field 'Emoticon' is not set")
	} // builtin_check

	if e.Value == 0 {
		return fmt.Errorf("field 'Value' is not set")
	} // builtin_check

	return nil
}

func (*MessageMediaDice) CRC() uint32 {
	return uint32(0x3f7ee58b)
}

func (*MessageMediaDice) ImplementsMessageMedia() {}

func (e *MessageMediaDice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	buf.PutInt(e.Value)
	return buf.Result()
}

func (e *MessageMediaDice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Emoticon)
	buf.PutInt(e.Value)
	return buf.Result()
}

type MessageMediaPhoto struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Photo           Photo    `flag:"0"`
	TtlSeconds      int32    `flag:"2"`
}

func (e *MessageMediaPhoto) Validate() error {

	return nil
}

func (*MessageMediaPhoto) CRC() uint32 {
	return uint32(0x695150d7)
}

func (*MessageMediaPhoto) ImplementsMessageMedia() {}

func (e *MessageMediaPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *MessageMediaPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Photo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.TtlSeconds != 0 {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type MessageMediaEmpty struct{}

func (e *MessageMediaEmpty) Validate() error {
	return nil
}

func (*MessageMediaEmpty) CRC() uint32 {
	return uint32(0x3ded6320)
}

func (*MessageMediaEmpty) ImplementsMessageMedia() {}

func (e *MessageMediaEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageMediaEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageMediaVenue struct {
	Address   string   `validate:"required"`
	Geo       GeoPoint `validate:"required"`
	Provider  string   `validate:"required"`
	Title     string   `validate:"required"`
	VenueId   string   `validate:"required"`
	VenueType string   `validate:"required"`
}

func (e *MessageMediaVenue) Validate() error {
	if e.Address == "" {
		return fmt.Errorf("field 'Address' is not set")
	} // builtin_check

	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	if e.Provider == "" {
		return fmt.Errorf("field 'Provider' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.VenueId == "" {
		return fmt.Errorf("field 'VenueId' is not set")
	} // builtin_check

	if e.VenueType == "" {
		return fmt.Errorf("field 'VenueType' is not set")
	} // builtin_check

	return nil
}

func (*MessageMediaVenue) CRC() uint32 {
	return uint32(0x2ec0533f)
}

func (*MessageMediaVenue) ImplementsMessageMedia() {}

func (e *MessageMediaVenue) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutString(e.Provider)
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

func (e *MessageMediaVenue) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Address)
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutString(e.Provider)
	buf.PutString(e.Title)
	buf.PutString(e.VenueId)
	buf.PutString(e.VenueType)
	return buf.Result()
}

type MessageMediaGame struct {
	Game *Game `validate:"required"`
}

func (e *MessageMediaGame) Validate() error {
	if err := e.Game.Validate(); err != nil {
		return fmt.Errorf("field 'Game': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageMediaGame) CRC() uint32 {
	return uint32(0xfdb19008)
}

func (*MessageMediaGame) ImplementsMessageMedia() {}

func (e *MessageMediaGame) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Game.Encode())
	return buf.Result()
}

func (e *MessageMediaGame) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Game.Encode())
	return buf.Result()
}

type MessageMediaInvoice struct {
	Currency                 string      `validate:"required"`
	Description              string      `validate:"required"`
	__flagsPosition          struct{}    // flags param position `validate:"required"`
	Photo                    WebDocument `flag:"0"`
	ReceiptMsgId             int32       `flag:"2"`
	ShippingAddressRequested bool        `flag:"1,encoded_in_bitflags"`
	StartParam               string      `validate:"required"`
	Test                     bool        `flag:"3,encoded_in_bitflags"`
	Title                    string      `validate:"required"`
	TotalAmount              int64       `validate:"required"`
}

func (e *MessageMediaInvoice) Validate() error {
	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if e.Description == "" {
		return fmt.Errorf("field 'Description' is not set")
	} // builtin_check

	if e.StartParam == "" {
		return fmt.Errorf("field 'StartParam' is not set")
	} // builtin_check

	if e.Title == "" {
		return fmt.Errorf("field 'Title' is not set")
	} // builtin_check

	if e.TotalAmount == 0 {
		return fmt.Errorf("field 'TotalAmount' is not set")
	} // builtin_check

	return nil
}

func (*MessageMediaInvoice) CRC() uint32 {
	return uint32(0x84551347)
}

func (*MessageMediaInvoice) ImplementsMessageMedia() {}

func (e *MessageMediaInvoice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingAddressRequested) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.ReceiptMsgId) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Test) {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutString(e.Description)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if !zero.IsZeroVal(e.ReceiptMsgId) {
		buf.PutInt(e.ReceiptMsgId)
	}
	buf.PutString(e.StartParam)
	buf.PutString(e.Title)
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

func (e *MessageMediaInvoice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Photo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.ShippingAddressRequested != false {
		flag |= 1 << 1
	}
	if e.ReceiptMsgId != 0 {
		flag |= 1 << 2
	}
	if e.Test != false {
		flag |= 1 << 3
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutString(e.Description)
	buf.PutUint(flag)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if e.ReceiptMsgId != 0 {
		buf.PutInt(e.ReceiptMsgId)
	}
	buf.PutString(e.StartParam)
	buf.PutString(e.Title)
	buf.PutLong(e.TotalAmount)
	return buf.Result()
}

type MessageMediaUnsupported struct{}

func (e *MessageMediaUnsupported) Validate() error {
	return nil
}

func (*MessageMediaUnsupported) CRC() uint32 {
	return uint32(0x9f84f49e)
}

func (*MessageMediaUnsupported) ImplementsMessageMedia() {}

func (e *MessageMediaUnsupported) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessageMediaUnsupported) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessageMediaDocument struct {
	Document        Document `flag:"0"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	TtlSeconds      int32    `flag:"2"`
}

func (e *MessageMediaDocument) Validate() error {

	return nil
}

func (*MessageMediaDocument) CRC() uint32 {
	return uint32(0x9cb070d7)
}

func (*MessageMediaDocument) ImplementsMessageMedia() {}

func (e *MessageMediaDocument) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.TtlSeconds) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.TtlSeconds) {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

func (e *MessageMediaDocument) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Document.Validate() == nil {
		flag |= 1 << 0
	}
	if e.TtlSeconds != 0 {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutUint(flag)
	if e.TtlSeconds != 0 {
		buf.PutInt(e.TtlSeconds)
	}
	return buf.Result()
}

type MessageMediaContact struct {
	FirstName   string `validate:"required"`
	LastName    string `validate:"required"`
	PhoneNumber string `validate:"required"`
	UserId      int32  `validate:"required"`
	Vcard       string `validate:"required"`
}

func (e *MessageMediaContact) Validate() error {
	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.PhoneNumber == "" {
		return fmt.Errorf("field 'PhoneNumber' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	if e.Vcard == "" {
		return fmt.Errorf("field 'Vcard' is not set")
	} // builtin_check

	return nil
}

func (*MessageMediaContact) CRC() uint32 {
	return uint32(0xcbf24940)
}

func (*MessageMediaContact) ImplementsMessageMedia() {}

func (e *MessageMediaContact) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	buf.PutInt(e.UserId)
	buf.PutString(e.Vcard)
	return buf.Result()
}

func (e *MessageMediaContact) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutString(e.PhoneNumber)
	buf.PutInt(e.UserId)
	buf.PutString(e.Vcard)
	return buf.Result()
}

type MessageMediaWebPage struct {
	Webpage WebPage `validate:"required"`
}

func (e *MessageMediaWebPage) Validate() error {
	if err := e.Webpage.Validate(); err != nil {
		return fmt.Errorf("field 'Webpage': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageMediaWebPage) CRC() uint32 {
	return uint32(0xa32dd600)
}

func (*MessageMediaWebPage) ImplementsMessageMedia() {}

func (e *MessageMediaWebPage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

func (e *MessageMediaWebPage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

type MessageMediaPoll struct {
	Poll    *Poll        `validate:"required"`
	Results *PollResults `validate:"required"`
}

func (e *MessageMediaPoll) Validate() error {
	if err := e.Poll.Validate(); err != nil {
		return fmt.Errorf("field 'Poll': %w", err)
	} // type_iter_check

	if err := e.Results.Validate(); err != nil {
		return fmt.Errorf("field 'Results': %w", err)
	} // type_iter_check

	return nil
}

func (*MessageMediaPoll) CRC() uint32 {
	return uint32(0x4bd6e798)
}

func (*MessageMediaPoll) ImplementsMessageMedia() {}

func (e *MessageMediaPoll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Poll.Encode())
	buf.PutRawBytes(e.Results.Encode())
	return buf.Result()
}

func (e *MessageMediaPoll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Poll.Encode())
	buf.PutRawBytes(e.Results.Encode())
	return buf.Result()
}

type MessageUserVote interface {
	serialize.TL
	ImplementsMessageUserVote()
	Validate() error
}

type MessageUserVoteMultiple struct {
	Date    int32    `validate:"required"`
	Options [][]byte `validate:"required"`
	UserId  int32    `validate:"required"`
}

func (e *MessageUserVoteMultiple) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.Options) == 0 {
		return fmt.Errorf("field 'Options' is not set")
	} // slice_len_check
	for _, item := range e.Options {
		if len(item) == 0 {
			return fmt.Errorf("field 'Options' is not set")
		} // byte_slice_check
	} // subitem_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*MessageUserVoteMultiple) CRC() uint32 {
	return uint32(0xe8fe0de)
}

func (*MessageUserVoteMultiple) ImplementsMessageUserVote() {}

func (e *MessageUserVoteMultiple) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutVector(e.Options)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *MessageUserVoteMultiple) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutVector(e.Options)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type MessageUserVoteInputOption struct {
	Date   int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *MessageUserVoteInputOption) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*MessageUserVoteInputOption) CRC() uint32 {
	return uint32(0x36377430)
}

func (*MessageUserVoteInputOption) ImplementsMessageUserVote() {}

func (e *MessageUserVoteInputOption) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *MessageUserVoteInputOption) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type MessageUserVoteObj struct {
	Date   int32  `validate:"required"`
	Option []byte `validate:"required"`
	UserId int32  `validate:"required"`
}

func (e *MessageUserVoteObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.Option) == 0 {
		return fmt.Errorf("field 'Option' is not set")
	} // byte_slice_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*MessageUserVoteObj) CRC() uint32 {
	return uint32(0xa28e5559)
}

func (*MessageUserVoteObj) ImplementsMessageUserVote() {}

func (e *MessageUserVoteObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutMessage(e.Option)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *MessageUserVoteObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutMessage(e.Option)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type MessagesFilter interface {
	serialize.TL
	ImplementsMessagesFilter()
	Validate() error
}

type InputMessagesFilterChatPhotos struct{}

func (e *InputMessagesFilterChatPhotos) Validate() error {
	return nil
}

func (*InputMessagesFilterChatPhotos) CRC() uint32 {
	return uint32(0x3a20ecb8)
}

func (*InputMessagesFilterChatPhotos) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterChatPhotos) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterChatPhotos) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterMusic struct{}

func (e *InputMessagesFilterMusic) Validate() error {
	return nil
}

func (*InputMessagesFilterMusic) CRC() uint32 {
	return uint32(0x3751b49e)
}

func (*InputMessagesFilterMusic) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterMusic) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterMusic) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterPhoneCalls struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Missed          bool     `flag:"0,encoded_in_bitflags"`
}

func (e *InputMessagesFilterPhoneCalls) Validate() error {

	return nil
}

func (*InputMessagesFilterPhoneCalls) CRC() uint32 {
	return uint32(0x80c99768)
}

func (*InputMessagesFilterPhoneCalls) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterPhoneCalls) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Missed) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *InputMessagesFilterPhoneCalls) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Missed != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type InputMessagesFilterRoundVoice struct{}

func (e *InputMessagesFilterRoundVoice) Validate() error {
	return nil
}

func (*InputMessagesFilterRoundVoice) CRC() uint32 {
	return uint32(0x7a7c17a4)
}

func (*InputMessagesFilterRoundVoice) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterRoundVoice) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterRoundVoice) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterVoice struct{}

func (e *InputMessagesFilterVoice) Validate() error {
	return nil
}

func (*InputMessagesFilterVoice) CRC() uint32 {
	return uint32(0x50f5c392)
}

func (*InputMessagesFilterVoice) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterVoice) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterVoice) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterGif struct{}

func (e *InputMessagesFilterGif) Validate() error {
	return nil
}

func (*InputMessagesFilterGif) CRC() uint32 {
	return uint32(0xffc86587)
}

func (*InputMessagesFilterGif) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterGif) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterGif) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterMyMentions struct{}

func (e *InputMessagesFilterMyMentions) Validate() error {
	return nil
}

func (*InputMessagesFilterMyMentions) CRC() uint32 {
	return uint32(0xc1f8e69a)
}

func (*InputMessagesFilterMyMentions) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterMyMentions) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterMyMentions) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterContacts struct{}

func (e *InputMessagesFilterContacts) Validate() error {
	return nil
}

func (*InputMessagesFilterContacts) CRC() uint32 {
	return uint32(0xe062db83)
}

func (*InputMessagesFilterContacts) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterContacts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterContacts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterUrl struct{}

func (e *InputMessagesFilterUrl) Validate() error {
	return nil
}

func (*InputMessagesFilterUrl) CRC() uint32 {
	return uint32(0x7ef0dd87)
}

func (*InputMessagesFilterUrl) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterUrl) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterUrl) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterDocument struct{}

func (e *InputMessagesFilterDocument) Validate() error {
	return nil
}

func (*InputMessagesFilterDocument) CRC() uint32 {
	return uint32(0x9eddf188)
}

func (*InputMessagesFilterDocument) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterDocument) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterDocument) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterPhotoVideo struct{}

func (e *InputMessagesFilterPhotoVideo) Validate() error {
	return nil
}

func (*InputMessagesFilterPhotoVideo) CRC() uint32 {
	return uint32(0x56e9f0e4)
}

func (*InputMessagesFilterPhotoVideo) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterPhotoVideo) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterPhotoVideo) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterRoundVideo struct{}

func (e *InputMessagesFilterRoundVideo) Validate() error {
	return nil
}

func (*InputMessagesFilterRoundVideo) CRC() uint32 {
	return uint32(0xb549da53)
}

func (*InputMessagesFilterRoundVideo) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterRoundVideo) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterRoundVideo) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterVideo struct{}

func (e *InputMessagesFilterVideo) Validate() error {
	return nil
}

func (*InputMessagesFilterVideo) CRC() uint32 {
	return uint32(0x9fc00e65)
}

func (*InputMessagesFilterVideo) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterVideo) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterVideo) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterEmpty struct{}

func (e *InputMessagesFilterEmpty) Validate() error {
	return nil
}

func (*InputMessagesFilterEmpty) CRC() uint32 {
	return uint32(0x57e2f66c)
}

func (*InputMessagesFilterEmpty) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterGeo struct{}

func (e *InputMessagesFilterGeo) Validate() error {
	return nil
}

func (*InputMessagesFilterGeo) CRC() uint32 {
	return uint32(0xe7026d0d)
}

func (*InputMessagesFilterGeo) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterGeo) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterGeo) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputMessagesFilterPhotos struct{}

func (e *InputMessagesFilterPhotos) Validate() error {
	return nil
}

func (*InputMessagesFilterPhotos) CRC() uint32 {
	return uint32(0x9609a51c)
}

func (*InputMessagesFilterPhotos) ImplementsMessagesFilter() {}

func (e *InputMessagesFilterPhotos) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputMessagesFilterPhotos) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type NotifyPeer interface {
	serialize.TL
	ImplementsNotifyPeer()
	Validate() error
}

type NotifyUsers struct{}

func (e *NotifyUsers) Validate() error {
	return nil
}

func (*NotifyUsers) CRC() uint32 {
	return uint32(0xb4c83b4c)
}

func (*NotifyUsers) ImplementsNotifyPeer() {}

func (e *NotifyUsers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *NotifyUsers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type NotifyBroadcasts struct{}

func (e *NotifyBroadcasts) Validate() error {
	return nil
}

func (*NotifyBroadcasts) CRC() uint32 {
	return uint32(0xd612e8ef)
}

func (*NotifyBroadcasts) ImplementsNotifyPeer() {}

func (e *NotifyBroadcasts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *NotifyBroadcasts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type NotifyPeerObj struct {
	Peer Peer `validate:"required"`
}

func (e *NotifyPeerObj) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*NotifyPeerObj) CRC() uint32 {
	return uint32(0x9fd40bd8)
}

func (*NotifyPeerObj) ImplementsNotifyPeer() {}

func (e *NotifyPeerObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *NotifyPeerObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type NotifyChats struct{}

func (e *NotifyChats) Validate() error {
	return nil
}

func (*NotifyChats) CRC() uint32 {
	return uint32(0xc007cec3)
}

func (*NotifyChats) ImplementsNotifyPeer() {}

func (e *NotifyChats) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *NotifyChats) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PageBlock interface {
	serialize.TL
	ImplementsPageBlock()
	Validate() error
}

type PageBlockEmbed struct {
	AllowScrolling  bool         `flag:"3,encoded_in_bitflags"`
	Caption         *PageCaption `validate:"required"`
	__flagsPosition struct{}     // flags param position `validate:"required"`
	FullWidth       bool         `flag:"0,encoded_in_bitflags"`
	H               int32        `flag:"5"`
	Html            string       `flag:"2"`
	PosterPhotoId   int64        `flag:"4"`
	Url             string       `flag:"1"`
	W               int32        `flag:"5"`
}

func (e *PageBlockEmbed) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockEmbed) CRC() uint32 {
	return uint32(0xa8718dc5)
}

func (*PageBlockEmbed) ImplementsPageBlock() {}

func (e *PageBlockEmbed) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FullWidth) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Html) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.AllowScrolling) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.PosterPhotoId) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.H) || !zero.IsZeroVal(e.W) {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.H) {
		buf.PutInt(e.H)
	}
	if !zero.IsZeroVal(e.Html) {
		buf.PutString(e.Html)
	}
	if !zero.IsZeroVal(e.PosterPhotoId) {
		buf.PutLong(e.PosterPhotoId)
	}
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	if !zero.IsZeroVal(e.W) {
		buf.PutInt(e.W)
	}
	return buf.Result()
}

func (e *PageBlockEmbed) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FullWidth != false {
		flag |= 1 << 0
	}
	if e.Url != "" {
		flag |= 1 << 1
	}
	if e.Html != "" {
		flag |= 1 << 2
	}
	if e.AllowScrolling != false {
		flag |= 1 << 3
	}
	if e.PosterPhotoId != 0 {
		flag |= 1 << 4
	}
	if e.H != 0 || e.W != 0 {
		flag |= 1 << 5
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	if e.H != 0 {
		buf.PutInt(e.H)
	}
	if e.Html != "" {
		buf.PutString(e.Html)
	}
	if e.PosterPhotoId != 0 {
		buf.PutLong(e.PosterPhotoId)
	}
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	if e.W != 0 {
		buf.PutInt(e.W)
	}
	return buf.Result()
}

type PageBlockSlideshow struct {
	Caption *PageCaption `validate:"required"`
	Items   []PageBlock  `validate:"required"`
}

func (e *PageBlockSlideshow) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if len(e.Items) == 0 {
		return fmt.Errorf("field 'Items' is not set")
	} // slice_len_check
	for _, item := range e.Items {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Items': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PageBlockSlideshow) CRC() uint32 {
	return uint32(0x31f9590)
}

func (*PageBlockSlideshow) ImplementsPageBlock() {}

func (e *PageBlockSlideshow) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutVector(e.Items)
	return buf.Result()
}

func (e *PageBlockSlideshow) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutVector(e.Items)
	return buf.Result()
}

type PageBlockChannel struct {
	Channel Chat `validate:"required"`
}

func (e *PageBlockChannel) Validate() error {
	if err := e.Channel.Validate(); err != nil {
		return fmt.Errorf("field 'Channel': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockChannel) CRC() uint32 {
	return uint32(0xef1751b5)
}

func (*PageBlockChannel) ImplementsPageBlock() {}

func (e *PageBlockChannel) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

func (e *PageBlockChannel) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Channel.Encode())
	return buf.Result()
}

type PageBlockKicker struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockKicker) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockKicker) CRC() uint32 {
	return uint32(0x1e148390)
}

func (*PageBlockKicker) ImplementsPageBlock() {}

func (e *PageBlockKicker) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockKicker) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockTable struct {
	Bordered        bool            `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Rows            []*PageTableRow `validate:"required"`
	Striped         bool            `flag:"1,encoded_in_bitflags"`
	Title           RichText        `validate:"required"`
}

func (e *PageBlockTable) Validate() error {

	if len(e.Rows) == 0 {
		return fmt.Errorf("field 'Rows' is not set")
	} // slice_len_check
	for _, item := range e.Rows {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rows': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Title.Validate(); err != nil {
		return fmt.Errorf("field 'Title': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockTable) CRC() uint32 {
	return uint32(0xbf4dea82)
}

func (*PageBlockTable) ImplementsPageBlock() {}

func (e *PageBlockTable) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Bordered) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Striped) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Rows)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

func (e *PageBlockTable) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Bordered != false {
		flag |= 1 << 0
	}
	if e.Striped != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Rows)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

type PageBlockOrderedList struct {
	Items []PageListOrderedItem `validate:"required"`
}

func (e *PageBlockOrderedList) Validate() error {
	if len(e.Items) == 0 {
		return fmt.Errorf("field 'Items' is not set")
	} // slice_len_check
	for _, item := range e.Items {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Items': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PageBlockOrderedList) CRC() uint32 {
	return uint32(0x9a8ae1e1)
}

func (*PageBlockOrderedList) ImplementsPageBlock() {}

func (e *PageBlockOrderedList) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Items)
	return buf.Result()
}

func (e *PageBlockOrderedList) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Items)
	return buf.Result()
}

type PageBlockTitle struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockTitle) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockTitle) CRC() uint32 {
	return uint32(0x70abc3fd)
}

func (*PageBlockTitle) ImplementsPageBlock() {}

func (e *PageBlockTitle) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockTitle) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockCover struct {
	Cover PageBlock `validate:"required"`
}

func (e *PageBlockCover) Validate() error {
	if err := e.Cover.Validate(); err != nil {
		return fmt.Errorf("field 'Cover': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockCover) CRC() uint32 {
	return uint32(0x39f23300)
}

func (*PageBlockCover) ImplementsPageBlock() {}

func (e *PageBlockCover) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Cover.Encode())
	return buf.Result()
}

func (e *PageBlockCover) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Cover.Encode())
	return buf.Result()
}

type PageBlockVideo struct {
	Autoplay        bool         `flag:"0,encoded_in_bitflags"`
	Caption         *PageCaption `validate:"required"`
	__flagsPosition struct{}     // flags param position `validate:"required"`
	Loop            bool         `flag:"1,encoded_in_bitflags"`
	VideoId         int64        `validate:"required"`
}

func (e *PageBlockVideo) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if e.VideoId == 0 {
		return fmt.Errorf("field 'VideoId' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockVideo) CRC() uint32 {
	return uint32(0x7c8fe7b6)
}

func (*PageBlockVideo) ImplementsPageBlock() {}

func (e *PageBlockVideo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Autoplay) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Loop) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.VideoId)
	return buf.Result()
}

func (e *PageBlockVideo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Autoplay != false {
		flag |= 1 << 0
	}
	if e.Loop != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.VideoId)
	return buf.Result()
}

type PageBlockPhoto struct {
	Caption         *PageCaption `validate:"required"`
	__flagsPosition struct{}     // flags param position `validate:"required"`
	PhotoId         int64        `validate:"required"`
	Url             string       `flag:"0"`
	WebpageId       int64        `flag:"0"`
}

func (e *PageBlockPhoto) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if e.PhotoId == 0 {
		return fmt.Errorf("field 'PhotoId' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockPhoto) CRC() uint32 {
	return uint32(0x1759c560)
}

func (*PageBlockPhoto) ImplementsPageBlock() {}

func (e *PageBlockPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Url) || !zero.IsZeroVal(e.WebpageId) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.PhotoId)
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	if !zero.IsZeroVal(e.WebpageId) {
		buf.PutLong(e.WebpageId)
	}
	return buf.Result()
}

func (e *PageBlockPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Url != "" || e.WebpageId != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.PhotoId)
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	if e.WebpageId != 0 {
		buf.PutLong(e.WebpageId)
	}
	return buf.Result()
}

type PageBlockPullquote struct {
	Caption RichText `validate:"required"`
	Text    RichText `validate:"required"`
}

func (e *PageBlockPullquote) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockPullquote) CRC() uint32 {
	return uint32(0x4f4456d3)
}

func (*PageBlockPullquote) ImplementsPageBlock() {}

func (e *PageBlockPullquote) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockPullquote) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockBlockquote struct {
	Caption RichText `validate:"required"`
	Text    RichText `validate:"required"`
}

func (e *PageBlockBlockquote) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockBlockquote) CRC() uint32 {
	return uint32(0x263d7c26)
}

func (*PageBlockBlockquote) ImplementsPageBlock() {}

func (e *PageBlockBlockquote) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockBlockquote) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockList struct {
	Items []PageListItem `validate:"required"`
}

func (e *PageBlockList) Validate() error {
	if len(e.Items) == 0 {
		return fmt.Errorf("field 'Items' is not set")
	} // slice_len_check
	for _, item := range e.Items {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Items': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PageBlockList) CRC() uint32 {
	return uint32(0xe4e88011)
}

func (*PageBlockList) ImplementsPageBlock() {}

func (e *PageBlockList) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Items)
	return buf.Result()
}

func (e *PageBlockList) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Items)
	return buf.Result()
}

type PageBlockAnchor struct {
	Name string `validate:"required"`
}

func (e *PageBlockAnchor) Validate() error {
	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockAnchor) CRC() uint32 {
	return uint32(0xce0d37b0)
}

func (*PageBlockAnchor) ImplementsPageBlock() {}

func (e *PageBlockAnchor) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	return buf.Result()
}

func (e *PageBlockAnchor) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	return buf.Result()
}

type PageBlockDetails struct {
	Blocks          []PageBlock `validate:"required"`
	__flagsPosition struct{}    // flags param position `validate:"required"`
	Open            bool        `flag:"0,encoded_in_bitflags"`
	Title           RichText    `validate:"required"`
}

func (e *PageBlockDetails) Validate() error {
	if len(e.Blocks) == 0 {
		return fmt.Errorf("field 'Blocks' is not set")
	} // slice_len_check
	for _, item := range e.Blocks {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocks': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Title.Validate(); err != nil {
		return fmt.Errorf("field 'Title': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockDetails) CRC() uint32 {
	return uint32(0x76768bed)
}

func (*PageBlockDetails) ImplementsPageBlock() {}

func (e *PageBlockDetails) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Open) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

func (e *PageBlockDetails) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Open != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

type PageBlockFooter struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockFooter) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockFooter) CRC() uint32 {
	return uint32(0x48870999)
}

func (*PageBlockFooter) ImplementsPageBlock() {}

func (e *PageBlockFooter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockFooter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockRelatedArticles struct {
	Articles []*PageRelatedArticle `validate:"required"`
	Title    RichText              `validate:"required"`
}

func (e *PageBlockRelatedArticles) Validate() error {
	if len(e.Articles) == 0 {
		return fmt.Errorf("field 'Articles' is not set")
	} // slice_len_check
	for _, item := range e.Articles {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Articles': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Title.Validate(); err != nil {
		return fmt.Errorf("field 'Title': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockRelatedArticles) CRC() uint32 {
	return uint32(0x16115a96)
}

func (*PageBlockRelatedArticles) ImplementsPageBlock() {}

func (e *PageBlockRelatedArticles) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Articles)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

func (e *PageBlockRelatedArticles) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Articles)
	buf.PutRawBytes(e.Title.Encode())
	return buf.Result()
}

type PageBlockMap struct {
	Caption *PageCaption `validate:"required"`
	Geo     GeoPoint     `validate:"required"`
	H       int32        `validate:"required"`
	W       int32        `validate:"required"`
	Zoom    int32        `validate:"required"`
}

func (e *PageBlockMap) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if err := e.Geo.Validate(); err != nil {
		return fmt.Errorf("field 'Geo': %w", err)
	} // type_iter_check

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	if e.Zoom == 0 {
		return fmt.Errorf("field 'Zoom' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockMap) CRC() uint32 {
	return uint32(0xa44f3ef6)
}

func (*PageBlockMap) ImplementsPageBlock() {}

func (e *PageBlockMap) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	buf.PutInt(e.Zoom)
	return buf.Result()
}

func (e *PageBlockMap) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutRawBytes(e.Geo.Encode())
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	buf.PutInt(e.Zoom)
	return buf.Result()
}

type PageBlockParagraph struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockParagraph) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockParagraph) CRC() uint32 {
	return uint32(0x467a0766)
}

func (*PageBlockParagraph) ImplementsPageBlock() {}

func (e *PageBlockParagraph) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockParagraph) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockSubheader struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockSubheader) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockSubheader) CRC() uint32 {
	return uint32(0xf12bb6e1)
}

func (*PageBlockSubheader) ImplementsPageBlock() {}

func (e *PageBlockSubheader) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockSubheader) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockHeader struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockHeader) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockHeader) CRC() uint32 {
	return uint32(0xbfd064ec)
}

func (*PageBlockHeader) ImplementsPageBlock() {}

func (e *PageBlockHeader) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockHeader) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockAuthorDate struct {
	Author        RichText `validate:"required"`
	PublishedDate int32    `validate:"required"`
}

func (e *PageBlockAuthorDate) Validate() error {
	if err := e.Author.Validate(); err != nil {
		return fmt.Errorf("field 'Author': %w", err)
	} // type_iter_check

	if e.PublishedDate == 0 {
		return fmt.Errorf("field 'PublishedDate' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockAuthorDate) CRC() uint32 {
	return uint32(0xbaafe5e0)
}

func (*PageBlockAuthorDate) ImplementsPageBlock() {}

func (e *PageBlockAuthorDate) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Author.Encode())
	buf.PutInt(e.PublishedDate)
	return buf.Result()
}

func (e *PageBlockAuthorDate) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Author.Encode())
	buf.PutInt(e.PublishedDate)
	return buf.Result()
}

type PageBlockSubtitle struct {
	Text RichText `validate:"required"`
}

func (e *PageBlockSubtitle) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockSubtitle) CRC() uint32 {
	return uint32(0x8ffa9a1f)
}

func (*PageBlockSubtitle) ImplementsPageBlock() {}

func (e *PageBlockSubtitle) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockSubtitle) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockEmbedPost struct {
	Author        string       `validate:"required"`
	AuthorPhotoId int64        `validate:"required"`
	Blocks        []PageBlock  `validate:"required"`
	Caption       *PageCaption `validate:"required"`
	Date          int32        `validate:"required"`
	Url           string       `validate:"required"`
	WebpageId     int64        `validate:"required"`
}

func (e *PageBlockEmbedPost) Validate() error {
	if e.Author == "" {
		return fmt.Errorf("field 'Author' is not set")
	} // builtin_check

	if e.AuthorPhotoId == 0 {
		return fmt.Errorf("field 'AuthorPhotoId' is not set")
	} // builtin_check

	if len(e.Blocks) == 0 {
		return fmt.Errorf("field 'Blocks' is not set")
	} // slice_len_check
	for _, item := range e.Blocks {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocks': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	if e.WebpageId == 0 {
		return fmt.Errorf("field 'WebpageId' is not set")
	} // builtin_check

	return nil
}

func (*PageBlockEmbedPost) CRC() uint32 {
	return uint32(0xf259a80b)
}

func (*PageBlockEmbedPost) ImplementsPageBlock() {}

func (e *PageBlockEmbedPost) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Author)
	buf.PutLong(e.AuthorPhotoId)
	buf.PutVector(e.Blocks)
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutInt(e.Date)
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

func (e *PageBlockEmbedPost) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Author)
	buf.PutLong(e.AuthorPhotoId)
	buf.PutVector(e.Blocks)
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutInt(e.Date)
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

type PageBlockDivider struct{}

func (e *PageBlockDivider) Validate() error {
	return nil
}

func (*PageBlockDivider) CRC() uint32 {
	return uint32(0xdb20b188)
}

func (*PageBlockDivider) ImplementsPageBlock() {}

func (e *PageBlockDivider) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PageBlockDivider) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PageBlockUnsupported struct{}

func (e *PageBlockUnsupported) Validate() error {
	return nil
}

func (*PageBlockUnsupported) CRC() uint32 {
	return uint32(0x13567e8a)
}

func (*PageBlockUnsupported) ImplementsPageBlock() {}

func (e *PageBlockUnsupported) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PageBlockUnsupported) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PageBlockPreformatted struct {
	Language string   `validate:"required"`
	Text     RichText `validate:"required"`
}

func (e *PageBlockPreformatted) Validate() error {
	if e.Language == "" {
		return fmt.Errorf("field 'Language' is not set")
	} // builtin_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockPreformatted) CRC() uint32 {
	return uint32(0xc070d93e)
}

func (*PageBlockPreformatted) ImplementsPageBlock() {}

func (e *PageBlockPreformatted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Language)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageBlockPreformatted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Language)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageBlockCollage struct {
	Caption *PageCaption `validate:"required"`
	Items   []PageBlock  `validate:"required"`
}

func (e *PageBlockCollage) Validate() error {
	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	if len(e.Items) == 0 {
		return fmt.Errorf("field 'Items' is not set")
	} // slice_len_check
	for _, item := range e.Items {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Items': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PageBlockCollage) CRC() uint32 {
	return uint32(0x65a0fa4d)
}

func (*PageBlockCollage) ImplementsPageBlock() {}

func (e *PageBlockCollage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutVector(e.Items)
	return buf.Result()
}

func (e *PageBlockCollage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Caption.Encode())
	buf.PutVector(e.Items)
	return buf.Result()
}

type PageBlockAudio struct {
	AudioId int64        `validate:"required"`
	Caption *PageCaption `validate:"required"`
}

func (e *PageBlockAudio) Validate() error {
	if e.AudioId == 0 {
		return fmt.Errorf("field 'AudioId' is not set")
	} // builtin_check

	if err := e.Caption.Validate(); err != nil {
		return fmt.Errorf("field 'Caption': %w", err)
	} // type_iter_check

	return nil
}

func (*PageBlockAudio) CRC() uint32 {
	return uint32(0x804361ea)
}

func (*PageBlockAudio) ImplementsPageBlock() {}

func (e *PageBlockAudio) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AudioId)
	buf.PutRawBytes(e.Caption.Encode())
	return buf.Result()
}

func (e *PageBlockAudio) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AudioId)
	buf.PutRawBytes(e.Caption.Encode())
	return buf.Result()
}

type PageListItem interface {
	serialize.TL
	ImplementsPageListItem()
	Validate() error
}

type PageListItemBlocks struct {
	Blocks []PageBlock `validate:"required"`
}

func (e *PageListItemBlocks) Validate() error {
	if len(e.Blocks) == 0 {
		return fmt.Errorf("field 'Blocks' is not set")
	} // slice_len_check
	for _, item := range e.Blocks {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocks': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PageListItemBlocks) CRC() uint32 {
	return uint32(0x25e073fc)
}

func (*PageListItemBlocks) ImplementsPageListItem() {}

func (e *PageListItemBlocks) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	return buf.Result()
}

func (e *PageListItemBlocks) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	return buf.Result()
}

type PageListItemText struct {
	Text RichText `validate:"required"`
}

func (e *PageListItemText) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageListItemText) CRC() uint32 {
	return uint32(0xb92fb6cd)
}

func (*PageListItemText) ImplementsPageListItem() {}

func (e *PageListItemText) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageListItemText) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PageListOrderedItem interface {
	serialize.TL
	ImplementsPageListOrderedItem()
	Validate() error
}

type PageListOrderedItemBlocks struct {
	Blocks []PageBlock `validate:"required"`
	Num    string      `validate:"required"`
}

func (e *PageListOrderedItemBlocks) Validate() error {
	if len(e.Blocks) == 0 {
		return fmt.Errorf("field 'Blocks' is not set")
	} // slice_len_check
	for _, item := range e.Blocks {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocks': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Num == "" {
		return fmt.Errorf("field 'Num' is not set")
	} // builtin_check

	return nil
}

func (*PageListOrderedItemBlocks) CRC() uint32 {
	return uint32(0x98dd8936)
}

func (*PageListOrderedItemBlocks) ImplementsPageListOrderedItem() {}

func (e *PageListOrderedItemBlocks) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutString(e.Num)
	return buf.Result()
}

func (e *PageListOrderedItemBlocks) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocks)
	buf.PutString(e.Num)
	return buf.Result()
}

type PageListOrderedItemText struct {
	Num  string   `validate:"required"`
	Text RichText `validate:"required"`
}

func (e *PageListOrderedItemText) Validate() error {
	if e.Num == "" {
		return fmt.Errorf("field 'Num' is not set")
	} // builtin_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*PageListOrderedItemText) CRC() uint32 {
	return uint32(0x5e068047)
}

func (*PageListOrderedItemText) ImplementsPageListOrderedItem() {}

func (e *PageListOrderedItemText) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Num)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *PageListOrderedItemText) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Num)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type PasswordKdfAlgo interface {
	serialize.TL
	ImplementsPasswordKdfAlgo()
	Validate() error
}

type PasswordKdfAlgoUnknown struct{}

func (e *PasswordKdfAlgoUnknown) Validate() error {
	return nil
}

func (*PasswordKdfAlgoUnknown) CRC() uint32 {
	return uint32(0xd45ab096)
}

func (*PasswordKdfAlgoUnknown) ImplementsPasswordKdfAlgo() {}

func (e *PasswordKdfAlgoUnknown) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PasswordKdfAlgoUnknown) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow struct {
	G     int32  `validate:"required"`
	P     []byte `validate:"required"`
	Salt1 []byte `validate:"required"`
	Salt2 []byte `validate:"required"`
}

func (e *PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Validate() error {
	if e.G == 0 {
		return fmt.Errorf("field 'G' is not set")
	} // builtin_check

	if len(e.P) == 0 {
		return fmt.Errorf("field 'P' is not set")
	} // byte_slice_check

	if len(e.Salt1) == 0 {
		return fmt.Errorf("field 'Salt1' is not set")
	} // byte_slice_check

	if len(e.Salt2) == 0 {
		return fmt.Errorf("field 'Salt2' is not set")
	} // byte_slice_check

	return nil
}

func (*PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) CRC() uint32 {
	return uint32(0x3a912d4a)
}

func (*PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) ImplementsPasswordKdfAlgo() {
}

func (e *PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.G)
	buf.PutMessage(e.P)
	buf.PutMessage(e.Salt1)
	buf.PutMessage(e.Salt2)
	return buf.Result()
}

func (e *PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.G)
	buf.PutMessage(e.P)
	buf.PutMessage(e.Salt1)
	buf.PutMessage(e.Salt2)
	return buf.Result()
}

type Peer interface {
	serialize.TL
	ImplementsPeer()
	Validate() error
}

type PeerChannel struct {
	ChannelId int32 `validate:"required"`
}

func (e *PeerChannel) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*PeerChannel) CRC() uint32 {
	return uint32(0xbddde532)
}

func (*PeerChannel) ImplementsPeer() {}

func (e *PeerChannel) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *PeerChannel) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type PeerUser struct {
	UserId int32 `validate:"required"`
}

func (e *PeerUser) Validate() error {
	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*PeerUser) CRC() uint32 {
	return uint32(0x9db1bc6d)
}

func (*PeerUser) ImplementsPeer() {}

func (e *PeerUser) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *PeerUser) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type PeerChat struct {
	ChatId int32 `validate:"required"`
}

func (e *PeerChat) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	return nil
}

func (*PeerChat) CRC() uint32 {
	return uint32(0xbad0e5bb)
}

func (*PeerChat) ImplementsPeer() {}

func (e *PeerChat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (e *PeerChat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

type PeerLocated interface {
	serialize.TL
	ImplementsPeerLocated()
	Validate() error
}

type PeerSelfLocated struct {
	Expires int32 `validate:"required"`
}

func (e *PeerSelfLocated) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	return nil
}

func (*PeerSelfLocated) CRC() uint32 {
	return uint32(0xf8ec284b)
}

func (*PeerSelfLocated) ImplementsPeerLocated() {}

func (e *PeerSelfLocated) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

func (e *PeerSelfLocated) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

type PeerLocatedObj struct {
	Distance int32 `validate:"required"`
	Expires  int32 `validate:"required"`
	Peer     Peer  `validate:"required"`
}

func (e *PeerLocatedObj) Validate() error {
	if e.Distance == 0 {
		return fmt.Errorf("field 'Distance' is not set")
	} // builtin_check

	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*PeerLocatedObj) CRC() uint32 {
	return uint32(0xca461b5d)
}

func (*PeerLocatedObj) ImplementsPeerLocated() {}

func (e *PeerLocatedObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Distance)
	buf.PutInt(e.Expires)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *PeerLocatedObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Distance)
	buf.PutInt(e.Expires)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type PhoneCall interface {
	serialize.TL
	ImplementsPhoneCall()
	Validate() error
}

type PhoneCallWaiting struct {
	AccessHash      int64              `validate:"required"`
	AdminId         int32              `validate:"required"`
	Date            int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	Id              int64              `validate:"required"`
	ParticipantId   int32              `validate:"required"`
	Protocol        *PhoneCallProtocol `validate:"required"`
	ReceiveDate     int32              `flag:"0"`
	Video           bool               `flag:"6,encoded_in_bitflags"`
}

func (e *PhoneCallWaiting) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	if err := e.Protocol.Validate(); err != nil {
		return fmt.Errorf("field 'Protocol': %w", err)
	} // type_iter_check

	return nil
}

func (*PhoneCallWaiting) CRC() uint32 {
	return uint32(0x1b8f4ad1)
}

func (*PhoneCallWaiting) ImplementsPhoneCall() {}

func (e *PhoneCallWaiting) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ReceiveDate) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	if !zero.IsZeroVal(e.ReceiveDate) {
		buf.PutInt(e.ReceiveDate)
	}
	return buf.Result()
}

func (e *PhoneCallWaiting) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ReceiveDate != 0 {
		flag |= 1 << 0
	}
	if e.Video != false {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	if e.ReceiveDate != 0 {
		buf.PutInt(e.ReceiveDate)
	}
	return buf.Result()
}

type PhoneCallRequested struct {
	AccessHash      int64              `validate:"required"`
	AdminId         int32              `validate:"required"`
	Date            int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	GAHash          []byte             `validate:"required"`
	Id              int64              `validate:"required"`
	ParticipantId   int32              `validate:"required"`
	Protocol        *PhoneCallProtocol `validate:"required"`
	Video           bool               `flag:"6,encoded_in_bitflags"`
}

func (e *PhoneCallRequested) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.GAHash) == 0 {
		return fmt.Errorf("field 'GAHash' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	if err := e.Protocol.Validate(); err != nil {
		return fmt.Errorf("field 'Protocol': %w", err)
	} // type_iter_check

	return nil
}

func (*PhoneCallRequested) CRC() uint32 {
	return uint32(0x87eabb53)
}

func (*PhoneCallRequested) ImplementsPhoneCall() {}

func (e *PhoneCallRequested) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GAHash)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

func (e *PhoneCallRequested) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Video != false {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GAHash)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

type PhoneCallAccepted struct {
	AccessHash      int64              `validate:"required"`
	AdminId         int32              `validate:"required"`
	Date            int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	GB              []byte             `validate:"required"`
	Id              int64              `validate:"required"`
	ParticipantId   int32              `validate:"required"`
	Protocol        *PhoneCallProtocol `validate:"required"`
	Video           bool               `flag:"6,encoded_in_bitflags"`
}

func (e *PhoneCallAccepted) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.GB) == 0 {
		return fmt.Errorf("field 'GB' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	if err := e.Protocol.Validate(); err != nil {
		return fmt.Errorf("field 'Protocol': %w", err)
	} // type_iter_check

	return nil
}

func (*PhoneCallAccepted) CRC() uint32 {
	return uint32(0x997c454a)
}

func (*PhoneCallAccepted) ImplementsPhoneCall() {}

func (e *PhoneCallAccepted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GB)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

func (e *PhoneCallAccepted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Video != false {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GB)
	buf.PutLong(e.Id)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	return buf.Result()
}

type PhoneCallObj struct {
	AccessHash      int64              `validate:"required"`
	AdminId         int32              `validate:"required"`
	Connections     []PhoneConnection  `validate:"required"`
	Date            int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	GAOrB           []byte             `validate:"required"`
	Id              int64              `validate:"required"`
	KeyFingerprint  int64              `validate:"required"`
	P2PAllowed      bool               `flag:"5,encoded_in_bitflags"`
	ParticipantId   int32              `validate:"required"`
	Protocol        *PhoneCallProtocol `validate:"required"`
	StartDate       int32              `validate:"required"`
	Video           bool               `flag:"6,encoded_in_bitflags"`
}

func (e *PhoneCallObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.AdminId == 0 {
		return fmt.Errorf("field 'AdminId' is not set")
	} // builtin_check

	if len(e.Connections) == 0 {
		return fmt.Errorf("field 'Connections' is not set")
	} // slice_len_check
	for _, item := range e.Connections {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Connections': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.GAOrB) == 0 {
		return fmt.Errorf("field 'GAOrB' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.KeyFingerprint == 0 {
		return fmt.Errorf("field 'KeyFingerprint' is not set")
	} // builtin_check

	if e.ParticipantId == 0 {
		return fmt.Errorf("field 'ParticipantId' is not set")
	} // builtin_check

	return nil
}

func (*PhoneCallObj) CRC() uint32 {
	return uint32(0x8742ae7f)
}

func (*PhoneCallObj) ImplementsPhoneCall() {}

func (e *PhoneCallObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.P2PAllowed) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutVector(e.Connections)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GAOrB)
	buf.PutLong(e.Id)
	buf.PutLong(e.KeyFingerprint)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	buf.PutInt(e.StartDate)
	return buf.Result()
}

func (e *PhoneCallObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.P2PAllowed != false {
		flag |= 1 << 5
	}
	if e.Video != false {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.AdminId)
	buf.PutVector(e.Connections)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	buf.PutMessage(e.GAOrB)
	buf.PutLong(e.Id)
	buf.PutLong(e.KeyFingerprint)
	buf.PutInt(e.ParticipantId)
	buf.PutRawBytes(e.Protocol.Encode())
	buf.PutInt(e.StartDate)
	return buf.Result()
}

type PhoneCallEmpty struct {
	Id int64 `validate:"required"`
}

func (e *PhoneCallEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*PhoneCallEmpty) CRC() uint32 {
	return uint32(0x5366c915)
}

func (*PhoneCallEmpty) ImplementsPhoneCall() {}

func (e *PhoneCallEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *PhoneCallEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

type PhoneCallDiscarded struct {
	Duration        int32                  `flag:"1"`
	__flagsPosition struct{}               // flags param position `validate:"required"`
	Id              int64                  `validate:"required"`
	NeedDebug       bool                   `flag:"3,encoded_in_bitflags"`
	NeedRating      bool                   `flag:"2,encoded_in_bitflags"`
	Reason          PhoneCallDiscardReason `flag:"0"`
	Video           bool                   `flag:"6,encoded_in_bitflags"`
}

func (e *PhoneCallDiscarded) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*PhoneCallDiscarded) CRC() uint32 {
	return uint32(0x50ca4de1)
}

func (*PhoneCallDiscarded) ImplementsPhoneCall() {}

func (e *PhoneCallDiscarded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Reason) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Duration) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.NeedRating) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.NeedDebug) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Video) {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Duration) {
		buf.PutInt(e.Duration)
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	if !zero.IsZeroVal(e.Reason) {
		buf.PutRawBytes(e.Reason.Encode())
	}
	return buf.Result()
}

func (e *PhoneCallDiscarded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Reason != 0 {
		flag |= 1 << 0
	}
	if e.Duration != 0 {
		flag |= 1 << 1
	}
	if e.NeedRating != false {
		flag |= 1 << 2
	}
	if e.NeedDebug != false {
		flag |= 1 << 3
	}
	if e.Video != false {
		flag |= 1 << 6
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Duration != 0 {
		buf.PutInt(e.Duration)
	}
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	if e.Reason != 0 {
		buf.PutRawBytes(e.Reason.Encode())
	}
	return buf.Result()
}

type PhoneConnection interface {
	serialize.TL
	ImplementsPhoneConnection()
	Validate() error
}

type PhoneConnectionObj struct {
	Id      int64  `validate:"required"`
	Ip      string `validate:"required"`
	Ipv6    string `validate:"required"`
	PeerTag []byte `validate:"required"`
	Port    int32  `validate:"required"`
}

func (e *PhoneConnectionObj) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Ip == "" {
		return fmt.Errorf("field 'Ip' is not set")
	} // builtin_check

	if e.Ipv6 == "" {
		return fmt.Errorf("field 'Ipv6' is not set")
	} // builtin_check

	if len(e.PeerTag) == 0 {
		return fmt.Errorf("field 'PeerTag' is not set")
	} // byte_slice_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	return nil
}

func (*PhoneConnectionObj) CRC() uint32 {
	return uint32(0x9d4c17c0)
}

func (*PhoneConnectionObj) ImplementsPhoneConnection() {}

func (e *PhoneConnectionObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Ip)
	buf.PutString(e.Ipv6)
	buf.PutMessage(e.PeerTag)
	buf.PutInt(e.Port)
	return buf.Result()
}

func (e *PhoneConnectionObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	buf.PutString(e.Ip)
	buf.PutString(e.Ipv6)
	buf.PutMessage(e.PeerTag)
	buf.PutInt(e.Port)
	return buf.Result()
}

type PhoneConnectionWebrtc struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Id              int64    `validate:"required"`
	Ip              string   `validate:"required"`
	Ipv6            string   `validate:"required"`
	Password        string   `validate:"required"`
	Port            int32    `validate:"required"`
	Stun            bool     `flag:"1,encoded_in_bitflags"`
	Turn            bool     `flag:"0,encoded_in_bitflags"`
	Username        string   `validate:"required"`
}

func (e *PhoneConnectionWebrtc) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Ip == "" {
		return fmt.Errorf("field 'Ip' is not set")
	} // builtin_check

	if e.Ipv6 == "" {
		return fmt.Errorf("field 'Ipv6' is not set")
	} // builtin_check

	if e.Password == "" {
		return fmt.Errorf("field 'Password' is not set")
	} // builtin_check

	if e.Port == 0 {
		return fmt.Errorf("field 'Port' is not set")
	} // builtin_check

	if e.Username == "" {
		return fmt.Errorf("field 'Username' is not set")
	} // builtin_check

	return nil
}

func (*PhoneConnectionWebrtc) CRC() uint32 {
	return uint32(0x635fe375)
}

func (*PhoneConnectionWebrtc) ImplementsPhoneConnection() {}

func (e *PhoneConnectionWebrtc) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Turn) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Stun) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.Ip)
	buf.PutString(e.Ipv6)
	buf.PutString(e.Password)
	buf.PutInt(e.Port)
	buf.PutString(e.Username)
	return buf.Result()
}

func (e *PhoneConnectionWebrtc) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Turn != false {
		flag |= 1 << 0
	}
	if e.Stun != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutString(e.Ip)
	buf.PutString(e.Ipv6)
	buf.PutString(e.Password)
	buf.PutInt(e.Port)
	buf.PutString(e.Username)
	return buf.Result()
}

type Photo interface {
	serialize.TL
	ImplementsPhoto()
	Validate() error
}

type PhotoObj struct {
	AccessHash      int64        `validate:"required"`
	Date            int32        `validate:"required"`
	DcId            int32        `validate:"required"`
	FileReference   []byte       `validate:"required"`
	__flagsPosition struct{}     // flags param position `validate:"required"`
	HasStickers     bool         `flag:"0,encoded_in_bitflags"`
	Id              int64        `validate:"required"`
	Sizes           []PhotoSize  `validate:"required"`
	VideoSizes      []*VideoSize `flag:"1"`
}

func (e *PhotoObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.FileReference) == 0 {
		return fmt.Errorf("field 'FileReference' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if len(e.Sizes) == 0 {
		return fmt.Errorf("field 'Sizes' is not set")
	} // slice_len_check
	for _, item := range e.Sizes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sizes': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PhotoObj) CRC() uint32 {
	return uint32(0xfb197a65)
}

func (*PhotoObj) ImplementsPhoto() {}

func (e *PhotoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.HasStickers) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.VideoSizes) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileReference)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutVector(e.Sizes)
	if !zero.IsZeroVal(e.VideoSizes) {
		buf.PutVector(e.VideoSizes)
	}
	return buf.Result()
}

func (e *PhotoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.HasStickers != false {
		flag |= 1 << 0
	}
	if len(e.VideoSizes) > 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileReference)
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	buf.PutVector(e.Sizes)
	if len(e.VideoSizes) > 0 {
		buf.PutVector(e.VideoSizes)
	}
	return buf.Result()
}

type PhotoEmpty struct {
	Id int64 `validate:"required"`
}

func (e *PhotoEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*PhotoEmpty) CRC() uint32 {
	return uint32(0x2331b22d)
}

func (*PhotoEmpty) ImplementsPhoto() {}

func (e *PhotoEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *PhotoEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

type PhotoSize interface {
	serialize.TL
	ImplementsPhotoSize()
	Validate() error
}

type PhotoStrippedSize struct {
	Bytes []byte `validate:"required"`
	Type  string `validate:"required"`
}

func (e *PhotoStrippedSize) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*PhotoStrippedSize) CRC() uint32 {
	return uint32(0xe0b0bc2e)
}

func (*PhotoStrippedSize) ImplementsPhotoSize() {}

func (e *PhotoStrippedSize) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *PhotoStrippedSize) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutString(e.Type)
	return buf.Result()
}

type PhotoSizeObj struct {
	H        int32         `validate:"required"`
	Location *FileLocation `validate:"required"`
	Size     int32         `validate:"required"`
	Type     string        `validate:"required"`
	W        int32         `validate:"required"`
}

func (e *PhotoSizeObj) Validate() error {
	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if err := e.Location.Validate(); err != nil {
		return fmt.Errorf("field 'Location': %w", err)
	} // type_iter_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (*PhotoSizeObj) CRC() uint32 {
	return uint32(0x77bfb61b)
}

func (*PhotoSizeObj) ImplementsPhotoSize() {}

func (e *PhotoSizeObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Size)
	buf.PutString(e.Type)
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *PhotoSizeObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutInt(e.Size)
	buf.PutString(e.Type)
	buf.PutInt(e.W)
	return buf.Result()
}

type PhotoSizeEmpty struct {
	Type string `validate:"required"`
}

func (e *PhotoSizeEmpty) Validate() error {
	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*PhotoSizeEmpty) CRC() uint32 {
	return uint32(0xe17e23c)
}

func (*PhotoSizeEmpty) ImplementsPhotoSize() {}

func (e *PhotoSizeEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *PhotoSizeEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Type)
	return buf.Result()
}

type PhotoCachedSize struct {
	Bytes    []byte        `validate:"required"`
	H        int32         `validate:"required"`
	Location *FileLocation `validate:"required"`
	Type     string        `validate:"required"`
	W        int32         `validate:"required"`
}

func (e *PhotoCachedSize) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if err := e.Location.Validate(); err != nil {
		return fmt.Errorf("field 'Location': %w", err)
	} // type_iter_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (*PhotoCachedSize) CRC() uint32 {
	return uint32(0xe9a734fa)
}

func (*PhotoCachedSize) ImplementsPhotoSize() {}

func (e *PhotoCachedSize) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutString(e.Type)
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *PhotoCachedSize) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.H)
	buf.PutRawBytes(e.Location.Encode())
	buf.PutString(e.Type)
	buf.PutInt(e.W)
	return buf.Result()
}

type PrivacyRule interface {
	serialize.TL
	ImplementsPrivacyRule()
	Validate() error
}

type PrivacyValueAllowChatParticipants struct {
	Chats []int32 `validate:"required"`
}

func (e *PrivacyValueAllowChatParticipants) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if item == 0 {
			return fmt.Errorf("field 'Chats' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*PrivacyValueAllowChatParticipants) CRC() uint32 {
	return uint32(0x18be796b)
}

func (*PrivacyValueAllowChatParticipants) ImplementsPrivacyRule() {}

func (e *PrivacyValueAllowChatParticipants) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

func (e *PrivacyValueAllowChatParticipants) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

type PrivacyValueAllowAll struct{}

func (e *PrivacyValueAllowAll) Validate() error {
	return nil
}

func (*PrivacyValueAllowAll) CRC() uint32 {
	return uint32(0x65427b82)
}

func (*PrivacyValueAllowAll) ImplementsPrivacyRule() {}

func (e *PrivacyValueAllowAll) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PrivacyValueAllowAll) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PrivacyValueDisallowContacts struct{}

func (e *PrivacyValueDisallowContacts) Validate() error {
	return nil
}

func (*PrivacyValueDisallowContacts) CRC() uint32 {
	return uint32(0xf888fa1a)
}

func (*PrivacyValueDisallowContacts) ImplementsPrivacyRule() {}

func (e *PrivacyValueDisallowContacts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PrivacyValueDisallowContacts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PrivacyValueDisallowChatParticipants struct {
	Chats []int32 `validate:"required"`
}

func (e *PrivacyValueDisallowChatParticipants) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if item == 0 {
			return fmt.Errorf("field 'Chats' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*PrivacyValueDisallowChatParticipants) CRC() uint32 {
	return uint32(0xacae0690)
}

func (*PrivacyValueDisallowChatParticipants) ImplementsPrivacyRule() {}

func (e *PrivacyValueDisallowChatParticipants) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

func (e *PrivacyValueDisallowChatParticipants) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

type PrivacyValueAllowContacts struct{}

func (e *PrivacyValueAllowContacts) Validate() error {
	return nil
}

func (*PrivacyValueAllowContacts) CRC() uint32 {
	return uint32(0xfffe1bac)
}

func (*PrivacyValueAllowContacts) ImplementsPrivacyRule() {}

func (e *PrivacyValueAllowContacts) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PrivacyValueAllowContacts) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PrivacyValueDisallowAll struct{}

func (e *PrivacyValueDisallowAll) Validate() error {
	return nil
}

func (*PrivacyValueDisallowAll) CRC() uint32 {
	return uint32(0x8b73e763)
}

func (*PrivacyValueDisallowAll) ImplementsPrivacyRule() {}

func (e *PrivacyValueDisallowAll) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *PrivacyValueDisallowAll) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PrivacyValueAllowUsers struct {
	Users []int32 `validate:"required"`
}

func (e *PrivacyValueAllowUsers) Validate() error {
	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if item == 0 {
			return fmt.Errorf("field 'Users' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*PrivacyValueAllowUsers) CRC() uint32 {
	return uint32(0x4d5bbe0c)
}

func (*PrivacyValueAllowUsers) ImplementsPrivacyRule() {}

func (e *PrivacyValueAllowUsers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PrivacyValueAllowUsers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

type PrivacyValueDisallowUsers struct {
	Users []int32 `validate:"required"`
}

func (e *PrivacyValueDisallowUsers) Validate() error {
	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if item == 0 {
			return fmt.Errorf("field 'Users' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*PrivacyValueDisallowUsers) CRC() uint32 {
	return uint32(0xc7f49b7)
}

func (*PrivacyValueDisallowUsers) ImplementsPrivacyRule() {}

func (e *PrivacyValueDisallowUsers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PrivacyValueDisallowUsers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Users)
	return buf.Result()
}

type RecentMeUrl interface {
	serialize.TL
	ImplementsRecentMeUrl()
	Validate() error
}

type RecentMeUrlChat struct {
	ChatId int32  `validate:"required"`
	Url    string `validate:"required"`
}

func (e *RecentMeUrlChat) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*RecentMeUrlChat) CRC() uint32 {
	return uint32(0xa01b22f9)
}

func (*RecentMeUrlChat) ImplementsRecentMeUrl() {}

func (e *RecentMeUrlChat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *RecentMeUrlChat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutString(e.Url)
	return buf.Result()
}

type RecentMeUrlUser struct {
	Url    string `validate:"required"`
	UserId int32  `validate:"required"`
}

func (e *RecentMeUrlUser) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*RecentMeUrlUser) CRC() uint32 {
	return uint32(0x8dbc3336)
}

func (*RecentMeUrlUser) ImplementsRecentMeUrl() {}

func (e *RecentMeUrlUser) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *RecentMeUrlUser) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type RecentMeUrlStickerSet struct {
	Set StickerSetCovered `validate:"required"`
	Url string            `validate:"required"`
}

func (e *RecentMeUrlStickerSet) Validate() error {
	if err := e.Set.Validate(); err != nil {
		return fmt.Errorf("field 'Set': %w", err)
	} // type_iter_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*RecentMeUrlStickerSet) CRC() uint32 {
	return uint32(0xbc0a57dc)
}

func (*RecentMeUrlStickerSet) ImplementsRecentMeUrl() {}

func (e *RecentMeUrlStickerSet) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Set.Encode())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *RecentMeUrlStickerSet) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Set.Encode())
	buf.PutString(e.Url)
	return buf.Result()
}

type RecentMeUrlChatInvite struct {
	ChatInvite ChatInvite `validate:"required"`
	Url        string     `validate:"required"`
}

func (e *RecentMeUrlChatInvite) Validate() error {
	if err := e.ChatInvite.Validate(); err != nil {
		return fmt.Errorf("field 'ChatInvite': %w", err)
	} // type_iter_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*RecentMeUrlChatInvite) CRC() uint32 {
	return uint32(0xeb49081d)
}

func (*RecentMeUrlChatInvite) ImplementsRecentMeUrl() {}

func (e *RecentMeUrlChatInvite) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.ChatInvite.Encode())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *RecentMeUrlChatInvite) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.ChatInvite.Encode())
	buf.PutString(e.Url)
	return buf.Result()
}

type RecentMeUrlUnknown struct {
	Url string `validate:"required"`
}

func (e *RecentMeUrlUnknown) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*RecentMeUrlUnknown) CRC() uint32 {
	return uint32(0x46e1d13d)
}

func (*RecentMeUrlUnknown) ImplementsRecentMeUrl() {}

func (e *RecentMeUrlUnknown) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *RecentMeUrlUnknown) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

type ReplyMarkup interface {
	serialize.TL
	ImplementsReplyMarkup()
	Validate() error
}

type ReplyKeyboardHide struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Selective       bool     `flag:"2,encoded_in_bitflags"`
}

func (e *ReplyKeyboardHide) Validate() error {

	return nil
}

func (*ReplyKeyboardHide) CRC() uint32 {
	return uint32(0xa03e5b85)
}

func (*ReplyKeyboardHide) ImplementsReplyMarkup() {}

func (e *ReplyKeyboardHide) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Selective) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *ReplyKeyboardHide) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Selective != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type ReplyKeyboardForceReply struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Selective       bool     `flag:"2,encoded_in_bitflags"`
	SingleUse       bool     `flag:"1,encoded_in_bitflags"`
}

func (e *ReplyKeyboardForceReply) Validate() error {

	return nil
}

func (*ReplyKeyboardForceReply) CRC() uint32 {
	return uint32(0xf4108aa0)
}

func (*ReplyKeyboardForceReply) ImplementsReplyMarkup() {}

func (e *ReplyKeyboardForceReply) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.SingleUse) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Selective) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

func (e *ReplyKeyboardForceReply) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.SingleUse != false {
		flag |= 1 << 1
	}
	if e.Selective != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	return buf.Result()
}

type ReplyKeyboardMarkup struct {
	__flagsPosition struct{}             // flags param position `validate:"required"`
	Resize          bool                 `flag:"0,encoded_in_bitflags"`
	Rows            []*KeyboardButtonRow `validate:"required"`
	Selective       bool                 `flag:"2,encoded_in_bitflags"`
	SingleUse       bool                 `flag:"1,encoded_in_bitflags"`
}

func (e *ReplyKeyboardMarkup) Validate() error {

	if len(e.Rows) == 0 {
		return fmt.Errorf("field 'Rows' is not set")
	} // slice_len_check
	for _, item := range e.Rows {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rows': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ReplyKeyboardMarkup) CRC() uint32 {
	return uint32(0x3502758c)
}

func (*ReplyKeyboardMarkup) ImplementsReplyMarkup() {}

func (e *ReplyKeyboardMarkup) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Resize) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SingleUse) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Selective) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Rows)
	return buf.Result()
}

func (e *ReplyKeyboardMarkup) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Resize != false {
		flag |= 1 << 0
	}
	if e.SingleUse != false {
		flag |= 1 << 1
	}
	if e.Selective != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Rows)
	return buf.Result()
}

type ReplyInlineMarkup struct {
	Rows []*KeyboardButtonRow `validate:"required"`
}

func (e *ReplyInlineMarkup) Validate() error {
	if len(e.Rows) == 0 {
		return fmt.Errorf("field 'Rows' is not set")
	} // slice_len_check
	for _, item := range e.Rows {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rows': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ReplyInlineMarkup) CRC() uint32 {
	return uint32(0x48a30254)
}

func (*ReplyInlineMarkup) ImplementsReplyMarkup() {}

func (e *ReplyInlineMarkup) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Rows)
	return buf.Result()
}

func (e *ReplyInlineMarkup) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Rows)
	return buf.Result()
}

type ReportReason interface {
	serialize.TL
	ImplementsReportReason()
	Validate() error
}

type InputReportReasonOther struct {
	Text string `validate:"required"`
}

func (e *InputReportReasonOther) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*InputReportReasonOther) CRC() uint32 {
	return uint32(0xe1746d0a)
}

func (*InputReportReasonOther) ImplementsReportReason() {}

func (e *InputReportReasonOther) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *InputReportReasonOther) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type InputReportReasonCopyright struct{}

func (e *InputReportReasonCopyright) Validate() error {
	return nil
}

func (*InputReportReasonCopyright) CRC() uint32 {
	return uint32(0x9b89f93a)
}

func (*InputReportReasonCopyright) ImplementsReportReason() {}

func (e *InputReportReasonCopyright) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonCopyright) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputReportReasonSpam struct{}

func (e *InputReportReasonSpam) Validate() error {
	return nil
}

func (*InputReportReasonSpam) CRC() uint32 {
	return uint32(0x58dbcab8)
}

func (*InputReportReasonSpam) ImplementsReportReason() {}

func (e *InputReportReasonSpam) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonSpam) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputReportReasonViolence struct{}

func (e *InputReportReasonViolence) Validate() error {
	return nil
}

func (*InputReportReasonViolence) CRC() uint32 {
	return uint32(0x1e22c78d)
}

func (*InputReportReasonViolence) ImplementsReportReason() {}

func (e *InputReportReasonViolence) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonViolence) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputReportReasonPornography struct{}

func (e *InputReportReasonPornography) Validate() error {
	return nil
}

func (*InputReportReasonPornography) CRC() uint32 {
	return uint32(0x2e59d922)
}

func (*InputReportReasonPornography) ImplementsReportReason() {}

func (e *InputReportReasonPornography) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonPornography) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputReportReasonChildAbuse struct{}

func (e *InputReportReasonChildAbuse) Validate() error {
	return nil
}

func (*InputReportReasonChildAbuse) CRC() uint32 {
	return uint32(0xadf44ee3)
}

func (*InputReportReasonChildAbuse) ImplementsReportReason() {}

func (e *InputReportReasonChildAbuse) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonChildAbuse) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type InputReportReasonGeoIrrelevant struct{}

func (e *InputReportReasonGeoIrrelevant) Validate() error {
	return nil
}

func (*InputReportReasonGeoIrrelevant) CRC() uint32 {
	return uint32(0xdbd4feed)
}

func (*InputReportReasonGeoIrrelevant) ImplementsReportReason() {}

func (e *InputReportReasonGeoIrrelevant) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *InputReportReasonGeoIrrelevant) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type RichText interface {
	serialize.TL
	ImplementsRichText()
	Validate() error
}

type TextBold struct {
	Text RichText `validate:"required"`
}

func (e *TextBold) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextBold) CRC() uint32 {
	return uint32(0x6724abc4)
}

func (*TextBold) ImplementsRichText() {}

func (e *TextBold) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextBold) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextItalic struct {
	Text RichText `validate:"required"`
}

func (e *TextItalic) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextItalic) CRC() uint32 {
	return uint32(0xd912a59c)
}

func (*TextItalic) ImplementsRichText() {}

func (e *TextItalic) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextItalic) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextFixed struct {
	Text RichText `validate:"required"`
}

func (e *TextFixed) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextFixed) CRC() uint32 {
	return uint32(0x6c3f19b9)
}

func (*TextFixed) ImplementsRichText() {}

func (e *TextFixed) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextFixed) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextUrl struct {
	Text      RichText `validate:"required"`
	Url       string   `validate:"required"`
	WebpageId int64    `validate:"required"`
}

func (e *TextUrl) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	if e.WebpageId == 0 {
		return fmt.Errorf("field 'WebpageId' is not set")
	} // builtin_check

	return nil
}

func (*TextUrl) CRC() uint32 {
	return uint32(0x3c2884c1)
}

func (*TextUrl) ImplementsRichText() {}

func (e *TextUrl) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

func (e *TextUrl) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	buf.PutString(e.Url)
	buf.PutLong(e.WebpageId)
	return buf.Result()
}

type TextEmail struct {
	Email string   `validate:"required"`
	Text  RichText `validate:"required"`
}

func (e *TextEmail) Validate() error {
	if e.Email == "" {
		return fmt.Errorf("field 'Email' is not set")
	} // builtin_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextEmail) CRC() uint32 {
	return uint32(0xde5a0dd6)
}

func (*TextEmail) ImplementsRichText() {}

func (e *TextEmail) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextEmail) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextConcat struct {
	Texts []RichText `validate:"required"`
}

func (e *TextConcat) Validate() error {
	if len(e.Texts) == 0 {
		return fmt.Errorf("field 'Texts' is not set")
	} // slice_len_check
	for _, item := range e.Texts {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Texts': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*TextConcat) CRC() uint32 {
	return uint32(0x7e6260d7)
}

func (*TextConcat) ImplementsRichText() {}

func (e *TextConcat) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Texts)
	return buf.Result()
}

func (e *TextConcat) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Texts)
	return buf.Result()
}

type TextImage struct {
	DocumentId int64 `validate:"required"`
	H          int32 `validate:"required"`
	W          int32 `validate:"required"`
}

func (e *TextImage) Validate() error {
	if e.DocumentId == 0 {
		return fmt.Errorf("field 'DocumentId' is not set")
	} // builtin_check

	if e.H == 0 {
		return fmt.Errorf("field 'H' is not set")
	} // builtin_check

	if e.W == 0 {
		return fmt.Errorf("field 'W' is not set")
	} // builtin_check

	return nil
}

func (*TextImage) CRC() uint32 {
	return uint32(0x81ccf4f)
}

func (*TextImage) ImplementsRichText() {}

func (e *TextImage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.DocumentId)
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

func (e *TextImage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.DocumentId)
	buf.PutInt(e.H)
	buf.PutInt(e.W)
	return buf.Result()
}

type TextEmpty struct{}

func (e *TextEmpty) Validate() error {
	return nil
}

func (*TextEmpty) CRC() uint32 {
	return uint32(0xdc3d824f)
}

func (*TextEmpty) ImplementsRichText() {}

func (e *TextEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *TextEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type TextSubscript struct {
	Text RichText `validate:"required"`
}

func (e *TextSubscript) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextSubscript) CRC() uint32 {
	return uint32(0xed6a8504)
}

func (*TextSubscript) ImplementsRichText() {}

func (e *TextSubscript) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextSubscript) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextPlain struct {
	Text string `validate:"required"`
}

func (e *TextPlain) Validate() error {
	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	return nil
}

func (*TextPlain) CRC() uint32 {
	return uint32(0x744694e0)
}

func (*TextPlain) ImplementsRichText() {}

func (e *TextPlain) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

func (e *TextPlain) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Text)
	return buf.Result()
}

type TextStrike struct {
	Text RichText `validate:"required"`
}

func (e *TextStrike) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextStrike) CRC() uint32 {
	return uint32(0x9bf8bb95)
}

func (*TextStrike) ImplementsRichText() {}

func (e *TextStrike) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextStrike) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextSuperscript struct {
	Text RichText `validate:"required"`
}

func (e *TextSuperscript) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextSuperscript) CRC() uint32 {
	return uint32(0xc7fb5e01)
}

func (*TextSuperscript) ImplementsRichText() {}

func (e *TextSuperscript) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextSuperscript) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextMarked struct {
	Text RichText `validate:"required"`
}

func (e *TextMarked) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextMarked) CRC() uint32 {
	return uint32(0x34b8621)
}

func (*TextMarked) ImplementsRichText() {}

func (e *TextMarked) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextMarked) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextUnderline struct {
	Text RichText `validate:"required"`
}

func (e *TextUnderline) Validate() error {
	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextUnderline) CRC() uint32 {
	return uint32(0xc12622c4)
}

func (*TextUnderline) ImplementsRichText() {}

func (e *TextUnderline) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextUnderline) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextPhone struct {
	Phone string   `validate:"required"`
	Text  RichText `validate:"required"`
}

func (e *TextPhone) Validate() error {
	if e.Phone == "" {
		return fmt.Errorf("field 'Phone' is not set")
	} // builtin_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextPhone) CRC() uint32 {
	return uint32(0x1ccb966a)
}

func (*TextPhone) ImplementsRichText() {}

func (e *TextPhone) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextPhone) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type TextAnchor struct {
	Name string   `validate:"required"`
	Text RichText `validate:"required"`
}

func (e *TextAnchor) Validate() error {
	if e.Name == "" {
		return fmt.Errorf("field 'Name' is not set")
	} // builtin_check

	if err := e.Text.Validate(); err != nil {
		return fmt.Errorf("field 'Text': %w", err)
	} // type_iter_check

	return nil
}

func (*TextAnchor) CRC() uint32 {
	return uint32(0x35553762)
}

func (*TextAnchor) ImplementsRichText() {}

func (e *TextAnchor) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

func (e *TextAnchor) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Name)
	buf.PutRawBytes(e.Text.Encode())
	return buf.Result()
}

type SecureFile interface {
	serialize.TL
	ImplementsSecureFile()
	Validate() error
}

type SecureFileEmpty struct{}

func (e *SecureFileEmpty) Validate() error {
	return nil
}

func (*SecureFileEmpty) CRC() uint32 {
	return uint32(0x64199744)
}

func (*SecureFileEmpty) ImplementsSecureFile() {}

func (e *SecureFileEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SecureFileEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SecureFileObj struct {
	AccessHash int64  `validate:"required"`
	Date       int32  `validate:"required"`
	DcId       int32  `validate:"required"`
	FileHash   []byte `validate:"required"`
	Id         int64  `validate:"required"`
	Secret     []byte `validate:"required"`
	Size       int32  `validate:"required"`
}

func (e *SecureFileObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if len(e.Secret) == 0 {
		return fmt.Errorf("field 'Secret' is not set")
	} // byte_slice_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	return nil
}

func (*SecureFileObj) CRC() uint32 {
	return uint32(0xe0277a62)
}

func (*SecureFileObj) ImplementsSecureFile() {}

func (e *SecureFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileHash)
	buf.PutLong(e.Id)
	buf.PutMessage(e.Secret)
	buf.PutInt(e.Size)
	return buf.Result()
}

func (e *SecureFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutInt(e.Date)
	buf.PutInt(e.DcId)
	buf.PutMessage(e.FileHash)
	buf.PutLong(e.Id)
	buf.PutMessage(e.Secret)
	buf.PutInt(e.Size)
	return buf.Result()
}

type SecurePasswordKdfAlgo interface {
	serialize.TL
	ImplementsSecurePasswordKdfAlgo()
	Validate() error
}

type SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 struct {
	Salt []byte `validate:"required"`
}

func (e *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Validate() error {
	if len(e.Salt) == 0 {
		return fmt.Errorf("field 'Salt' is not set")
	} // byte_slice_check

	return nil
}

func (*SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) CRC() uint32 {
	return uint32(0xbbf2dda0)
}

func (*SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) ImplementsSecurePasswordKdfAlgo() {}

func (e *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Salt)
	return buf.Result()
}

func (e *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Salt)
	return buf.Result()
}

type SecurePasswordKdfAlgoUnknown struct{}

func (e *SecurePasswordKdfAlgoUnknown) Validate() error {
	return nil
}

func (*SecurePasswordKdfAlgoUnknown) CRC() uint32 {
	return uint32(0x4a8537)
}

func (*SecurePasswordKdfAlgoUnknown) ImplementsSecurePasswordKdfAlgo() {}

func (e *SecurePasswordKdfAlgoUnknown) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SecurePasswordKdfAlgoUnknown) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SecurePasswordKdfAlgoSHA512 struct {
	Salt []byte `validate:"required"`
}

func (e *SecurePasswordKdfAlgoSHA512) Validate() error {
	if len(e.Salt) == 0 {
		return fmt.Errorf("field 'Salt' is not set")
	} // byte_slice_check

	return nil
}

func (*SecurePasswordKdfAlgoSHA512) CRC() uint32 {
	return uint32(0x86471d92)
}

func (*SecurePasswordKdfAlgoSHA512) ImplementsSecurePasswordKdfAlgo() {}

func (e *SecurePasswordKdfAlgoSHA512) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Salt)
	return buf.Result()
}

func (e *SecurePasswordKdfAlgoSHA512) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Salt)
	return buf.Result()
}

type SecurePlainData interface {
	serialize.TL
	ImplementsSecurePlainData()
	Validate() error
}

type SecurePlainPhone struct {
	Phone string `validate:"required"`
}

func (e *SecurePlainPhone) Validate() error {
	if e.Phone == "" {
		return fmt.Errorf("field 'Phone' is not set")
	} // builtin_check

	return nil
}

func (*SecurePlainPhone) CRC() uint32 {
	return uint32(0x7d6099dd)
}

func (*SecurePlainPhone) ImplementsSecurePlainData() {}

func (e *SecurePlainPhone) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	return buf.Result()
}

func (e *SecurePlainPhone) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	return buf.Result()
}

type SecurePlainEmail struct {
	Email string `validate:"required"`
}

func (e *SecurePlainEmail) Validate() error {
	if e.Email == "" {
		return fmt.Errorf("field 'Email' is not set")
	} // builtin_check

	return nil
}

func (*SecurePlainEmail) CRC() uint32 {
	return uint32(0x21ec5a5f)
}

func (*SecurePlainEmail) ImplementsSecurePlainData() {}

func (e *SecurePlainEmail) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	return buf.Result()
}

func (e *SecurePlainEmail) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Email)
	return buf.Result()
}

type SecureRequiredType interface {
	serialize.TL
	ImplementsSecureRequiredType()
	Validate() error
}

type SecureRequiredTypeOneOf struct {
	Types []SecureRequiredType `validate:"required"`
}

func (e *SecureRequiredTypeOneOf) Validate() error {
	if len(e.Types) == 0 {
		return fmt.Errorf("field 'Types' is not set")
	} // slice_len_check
	for _, item := range e.Types {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Types': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*SecureRequiredTypeOneOf) CRC() uint32 {
	return uint32(0x27477b4)
}

func (*SecureRequiredTypeOneOf) ImplementsSecureRequiredType() {}

func (e *SecureRequiredTypeOneOf) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

func (e *SecureRequiredTypeOneOf) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Types)
	return buf.Result()
}

type SecureRequiredTypeObj struct {
	__flagsPosition     struct{}        // flags param position `validate:"required"`
	NativeNames         bool            `flag:"0,encoded_in_bitflags"`
	SelfieRequired      bool            `flag:"1,encoded_in_bitflags"`
	TranslationRequired bool            `flag:"2,encoded_in_bitflags"`
	Type                SecureValueType `validate:"required"`
}

func (e *SecureRequiredTypeObj) Validate() error {

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureRequiredTypeObj) CRC() uint32 {
	return uint32(0x829d99da)
}

func (*SecureRequiredTypeObj) ImplementsSecureRequiredType() {}

func (e *SecureRequiredTypeObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NativeNames) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SelfieRequired) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.TranslationRequired) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureRequiredTypeObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NativeNames != false {
		flag |= 1 << 0
	}
	if e.SelfieRequired != false {
		flag |= 1 << 1
	}
	if e.TranslationRequired != false {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueError interface {
	serialize.TL
	ImplementsSecureValueError()
	Validate() error
}

type SecureValueErrorTranslationFile struct {
	FileHash []byte          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorTranslationFile) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorTranslationFile) CRC() uint32 {
	return uint32(0xa1144770)
}

func (*SecureValueErrorTranslationFile) ImplementsSecureValueError() {}

func (e *SecureValueErrorTranslationFile) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorTranslationFile) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorObj struct {
	Hash []byte          `validate:"required"`
	Text string          `validate:"required"`
	Type SecureValueType `validate:"required"`
}

func (e *SecureValueErrorObj) Validate() error {
	if len(e.Hash) == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorObj) CRC() uint32 {
	return uint32(0x869d758f)
}

func (*SecureValueErrorObj) ImplementsSecureValueError() {}

func (e *SecureValueErrorObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Hash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorFile struct {
	FileHash []byte          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorFile) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorFile) CRC() uint32 {
	return uint32(0x7a700873)
}

func (*SecureValueErrorFile) ImplementsSecureValueError() {}

func (e *SecureValueErrorFile) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorFile) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorSelfie struct {
	FileHash []byte          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorSelfie) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorSelfie) CRC() uint32 {
	return uint32(0xe537ced6)
}

func (*SecureValueErrorSelfie) ImplementsSecureValueError() {}

func (e *SecureValueErrorSelfie) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorSelfie) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorFrontSide struct {
	FileHash []byte          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorFrontSide) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorFrontSide) CRC() uint32 {
	return uint32(0xbe3dfa)
}

func (*SecureValueErrorFrontSide) ImplementsSecureValueError() {}

func (e *SecureValueErrorFrontSide) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorFrontSide) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorFiles struct {
	FileHash [][]byte        `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorFiles) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // slice_len_check
	for _, item := range e.FileHash {
		if len(item) == 0 {
			return fmt.Errorf("field 'FileHash' is not set")
		} // byte_slice_check
	} // subitem_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorFiles) CRC() uint32 {
	return uint32(0x666220e9)
}

func (*SecureValueErrorFiles) ImplementsSecureValueError() {}

func (e *SecureValueErrorFiles) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorFiles) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorData struct {
	DataHash []byte          `validate:"required"`
	Field    string          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorData) Validate() error {
	if len(e.DataHash) == 0 {
		return fmt.Errorf("field 'DataHash' is not set")
	} // byte_slice_check

	if e.Field == "" {
		return fmt.Errorf("field 'Field' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorData) CRC() uint32 {
	return uint32(0xe8a40bd9)
}

func (*SecureValueErrorData) ImplementsSecureValueError() {}

func (e *SecureValueErrorData) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.DataHash)
	buf.PutString(e.Field)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorData) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.DataHash)
	buf.PutString(e.Field)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorTranslationFiles struct {
	FileHash [][]byte        `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorTranslationFiles) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // slice_len_check
	for _, item := range e.FileHash {
		if len(item) == 0 {
			return fmt.Errorf("field 'FileHash' is not set")
		} // byte_slice_check
	} // subitem_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorTranslationFiles) CRC() uint32 {
	return uint32(0x34636dd8)
}

func (*SecureValueErrorTranslationFiles) ImplementsSecureValueError() {}

func (e *SecureValueErrorTranslationFiles) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorTranslationFiles) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SecureValueErrorReverseSide struct {
	FileHash []byte          `validate:"required"`
	Text     string          `validate:"required"`
	Type     SecureValueType `validate:"required"`
}

func (e *SecureValueErrorReverseSide) Validate() error {
	if len(e.FileHash) == 0 {
		return fmt.Errorf("field 'FileHash' is not set")
	} // byte_slice_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*SecureValueErrorReverseSide) CRC() uint32 {
	return uint32(0x868a2aa5)
}

func (*SecureValueErrorReverseSide) ImplementsSecureValueError() {}

func (e *SecureValueErrorReverseSide) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *SecureValueErrorReverseSide) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.FileHash)
	buf.PutString(e.Text)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

type SendMessageAction interface {
	serialize.TL
	ImplementsSendMessageAction()
	Validate() error
}

type SendMessageGeoLocationAction struct{}

func (e *SendMessageGeoLocationAction) Validate() error {
	return nil
}

func (*SendMessageGeoLocationAction) CRC() uint32 {
	return uint32(0x176f8ba1)
}

func (*SendMessageGeoLocationAction) ImplementsSendMessageAction() {}

func (e *SendMessageGeoLocationAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageGeoLocationAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageChooseContactAction struct{}

func (e *SendMessageChooseContactAction) Validate() error {
	return nil
}

func (*SendMessageChooseContactAction) CRC() uint32 {
	return uint32(0x628cbc6f)
}

func (*SendMessageChooseContactAction) ImplementsSendMessageAction() {}

func (e *SendMessageChooseContactAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageChooseContactAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageUploadRoundAction struct {
	Progress int32 `validate:"required"`
}

func (e *SendMessageUploadRoundAction) Validate() error {
	if e.Progress == 0 {
		return fmt.Errorf("field 'Progress' is not set")
	} // builtin_check

	return nil
}

func (*SendMessageUploadRoundAction) CRC() uint32 {
	return uint32(0x243e1c66)
}

func (*SendMessageUploadRoundAction) ImplementsSendMessageAction() {}

func (e *SendMessageUploadRoundAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

func (e *SendMessageUploadRoundAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

type SendMessageGamePlayAction struct{}

func (e *SendMessageGamePlayAction) Validate() error {
	return nil
}

func (*SendMessageGamePlayAction) CRC() uint32 {
	return uint32(0xdd6a8f48)
}

func (*SendMessageGamePlayAction) ImplementsSendMessageAction() {}

func (e *SendMessageGamePlayAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageGamePlayAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageTypingAction struct{}

func (e *SendMessageTypingAction) Validate() error {
	return nil
}

func (*SendMessageTypingAction) CRC() uint32 {
	return uint32(0x16bf744e)
}

func (*SendMessageTypingAction) ImplementsSendMessageAction() {}

func (e *SendMessageTypingAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageTypingAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageCancelAction struct{}

func (e *SendMessageCancelAction) Validate() error {
	return nil
}

func (*SendMessageCancelAction) CRC() uint32 {
	return uint32(0xfd5ec8f5)
}

func (*SendMessageCancelAction) ImplementsSendMessageAction() {}

func (e *SendMessageCancelAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageCancelAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageRecordVideoAction struct{}

func (e *SendMessageRecordVideoAction) Validate() error {
	return nil
}

func (*SendMessageRecordVideoAction) CRC() uint32 {
	return uint32(0xa187d66f)
}

func (*SendMessageRecordVideoAction) ImplementsSendMessageAction() {}

func (e *SendMessageRecordVideoAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageRecordVideoAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageUploadVideoAction struct {
	Progress int32 `validate:"required"`
}

func (e *SendMessageUploadVideoAction) Validate() error {
	if e.Progress == 0 {
		return fmt.Errorf("field 'Progress' is not set")
	} // builtin_check

	return nil
}

func (*SendMessageUploadVideoAction) CRC() uint32 {
	return uint32(0xe9763aec)
}

func (*SendMessageUploadVideoAction) ImplementsSendMessageAction() {}

func (e *SendMessageUploadVideoAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

func (e *SendMessageUploadVideoAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

type SendMessageRecordRoundAction struct{}

func (e *SendMessageRecordRoundAction) Validate() error {
	return nil
}

func (*SendMessageRecordRoundAction) CRC() uint32 {
	return uint32(0x88f27fbc)
}

func (*SendMessageRecordRoundAction) ImplementsSendMessageAction() {}

func (e *SendMessageRecordRoundAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageRecordRoundAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type SendMessageUploadAudioAction struct {
	Progress int32 `validate:"required"`
}

func (e *SendMessageUploadAudioAction) Validate() error {
	if e.Progress == 0 {
		return fmt.Errorf("field 'Progress' is not set")
	} // builtin_check

	return nil
}

func (*SendMessageUploadAudioAction) CRC() uint32 {
	return uint32(0xf351d7ab)
}

func (*SendMessageUploadAudioAction) ImplementsSendMessageAction() {}

func (e *SendMessageUploadAudioAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

func (e *SendMessageUploadAudioAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

type SendMessageUploadPhotoAction struct {
	Progress int32 `validate:"required"`
}

func (e *SendMessageUploadPhotoAction) Validate() error {
	if e.Progress == 0 {
		return fmt.Errorf("field 'Progress' is not set")
	} // builtin_check

	return nil
}

func (*SendMessageUploadPhotoAction) CRC() uint32 {
	return uint32(0xd1d34a26)
}

func (*SendMessageUploadPhotoAction) ImplementsSendMessageAction() {}

func (e *SendMessageUploadPhotoAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

func (e *SendMessageUploadPhotoAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

type SendMessageUploadDocumentAction struct {
	Progress int32 `validate:"required"`
}

func (e *SendMessageUploadDocumentAction) Validate() error {
	if e.Progress == 0 {
		return fmt.Errorf("field 'Progress' is not set")
	} // builtin_check

	return nil
}

func (*SendMessageUploadDocumentAction) CRC() uint32 {
	return uint32(0xaa0cd9e4)
}

func (*SendMessageUploadDocumentAction) ImplementsSendMessageAction() {}

func (e *SendMessageUploadDocumentAction) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

func (e *SendMessageUploadDocumentAction) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Progress)
	return buf.Result()
}

type SendMessageRecordAudioAction struct{}

func (e *SendMessageRecordAudioAction) Validate() error {
	return nil
}

func (*SendMessageRecordAudioAction) CRC() uint32 {
	return uint32(0xd52f73f7)
}

func (*SendMessageRecordAudioAction) ImplementsSendMessageAction() {}

func (e *SendMessageRecordAudioAction) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *SendMessageRecordAudioAction) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type StatsGraph interface {
	serialize.TL
	ImplementsStatsGraph()
	Validate() error
}

type StatsGraphError struct {
	Error string `validate:"required"`
}

func (e *StatsGraphError) Validate() error {
	if e.Error == "" {
		return fmt.Errorf("field 'Error' is not set")
	} // builtin_check

	return nil
}

func (*StatsGraphError) CRC() uint32 {
	return uint32(0xbedc9822)
}

func (*StatsGraphError) ImplementsStatsGraph() {}

func (e *StatsGraphError) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Error)
	return buf.Result()
}

func (e *StatsGraphError) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Error)
	return buf.Result()
}

type StatsGraphObj struct {
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Json            *DataJSON `validate:"required"`
	ZoomToken       string    `flag:"0"`
}

func (e *StatsGraphObj) Validate() error {

	if err := e.Json.Validate(); err != nil {
		return fmt.Errorf("field 'Json': %w", err)
	} // type_iter_check

	return nil
}

func (*StatsGraphObj) CRC() uint32 {
	return uint32(0x8ea464b6)
}

func (*StatsGraphObj) ImplementsStatsGraph() {}

func (e *StatsGraphObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.ZoomToken) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Json.Encode())
	if !zero.IsZeroVal(e.ZoomToken) {
		buf.PutString(e.ZoomToken)
	}
	return buf.Result()
}

func (e *StatsGraphObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.ZoomToken != "" {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Json.Encode())
	if e.ZoomToken != "" {
		buf.PutString(e.ZoomToken)
	}
	return buf.Result()
}

type StatsGraphAsync struct {
	Token string `validate:"required"`
}

func (e *StatsGraphAsync) Validate() error {
	if e.Token == "" {
		return fmt.Errorf("field 'Token' is not set")
	} // builtin_check

	return nil
}

func (*StatsGraphAsync) CRC() uint32 {
	return uint32(0x4a27eb2d)
}

func (*StatsGraphAsync) ImplementsStatsGraph() {}

func (e *StatsGraphAsync) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Token)
	return buf.Result()
}

func (e *StatsGraphAsync) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Token)
	return buf.Result()
}

type StickerSetCovered interface {
	serialize.TL
	ImplementsStickerSetCovered()
	Validate() error
}

type StickerSetMultiCovered struct {
	Covers []Document  `validate:"required"`
	Set    *StickerSet `validate:"required"`
}

func (e *StickerSetMultiCovered) Validate() error {
	if len(e.Covers) == 0 {
		return fmt.Errorf("field 'Covers' is not set")
	} // slice_len_check
	for _, item := range e.Covers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Covers': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Set.Validate(); err != nil {
		return fmt.Errorf("field 'Set': %w", err)
	} // type_iter_check

	return nil
}

func (*StickerSetMultiCovered) CRC() uint32 {
	return uint32(0x3407e51b)
}

func (*StickerSetMultiCovered) ImplementsStickerSetCovered() {}

func (e *StickerSetMultiCovered) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Covers)
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

func (e *StickerSetMultiCovered) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Covers)
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

type StickerSetCoveredObj struct {
	Cover Document    `validate:"required"`
	Set   *StickerSet `validate:"required"`
}

func (e *StickerSetCoveredObj) Validate() error {
	if err := e.Cover.Validate(); err != nil {
		return fmt.Errorf("field 'Cover': %w", err)
	} // type_iter_check

	if err := e.Set.Validate(); err != nil {
		return fmt.Errorf("field 'Set': %w", err)
	} // type_iter_check

	return nil
}

func (*StickerSetCoveredObj) CRC() uint32 {
	return uint32(0x6410a5d2)
}

func (*StickerSetCoveredObj) ImplementsStickerSetCovered() {}

func (e *StickerSetCoveredObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Cover.Encode())
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

func (e *StickerSetCoveredObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Cover.Encode())
	buf.PutRawBytes(e.Set.Encode())
	return buf.Result()
}

type Update interface {
	serialize.TL
	ImplementsUpdate()
	Validate() error
}

type UpdatePinnedDialogs struct {
	__flagsPosition struct{}     // flags param position `validate:"required"`
	FolderId        int32        `flag:"1"`
	Order           []DialogPeer `flag:"0"`
}

func (e *UpdatePinnedDialogs) Validate() error {

	return nil
}

func (*UpdatePinnedDialogs) CRC() uint32 {
	return uint32(0xfa0f3ca2)
}

func (*UpdatePinnedDialogs) ImplementsUpdate() {}

func (e *UpdatePinnedDialogs) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Order) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	if !zero.IsZeroVal(e.Order) {
		buf.PutVector(e.Order)
	}
	return buf.Result()
}

func (e *UpdatePinnedDialogs) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Order) > 0 {
		flag |= 1 << 0
	}
	if e.FolderId != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	if len(e.Order) > 0 {
		buf.PutVector(e.Order)
	}
	return buf.Result()
}

type UpdateChannel struct {
	ChannelId int32 `validate:"required"`
}

func (e *UpdateChannel) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannel) CRC() uint32 {
	return uint32(0xb6d45656)
}

func (*UpdateChannel) ImplementsUpdate() {}

func (e *UpdateChannel) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *UpdateChannel) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type UpdateEditMessage struct {
	Message  Message `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateEditMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateEditMessage) CRC() uint32 {
	return uint32(0xe40370a3)
}

func (*UpdateEditMessage) ImplementsUpdate() {}

func (e *UpdateEditMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateEditMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateChannelTooLong struct {
	ChannelId       int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Pts             int32    `flag:"0"`
}

func (e *UpdateChannelTooLong) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannelTooLong) CRC() uint32 {
	return uint32(0xeb0467fb)
}

func (*UpdateChannelTooLong) ImplementsUpdate() {}

func (e *UpdateChannelTooLong) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Pts) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Pts) {
		buf.PutInt(e.Pts)
	}
	return buf.Result()
}

func (e *UpdateChannelTooLong) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Pts != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutUint(flag)
	if e.Pts != 0 {
		buf.PutInt(e.Pts)
	}
	return buf.Result()
}

type UpdateNewEncryptedMessage struct {
	Message EncryptedMessage `validate:"required"`
	Qts     int32            `validate:"required"`
}

func (e *UpdateNewEncryptedMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	if e.Qts == 0 {
		return fmt.Errorf("field 'Qts' is not set")
	} // builtin_check

	return nil
}

func (*UpdateNewEncryptedMessage) CRC() uint32 {
	return uint32(0x12bcbd9a)
}

func (*UpdateNewEncryptedMessage) ImplementsUpdate() {}

func (e *UpdateNewEncryptedMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Qts)
	return buf.Result()
}

func (e *UpdateNewEncryptedMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Qts)
	return buf.Result()
}

type UpdateEncryptedChatTyping struct {
	ChatId int32 `validate:"required"`
}

func (e *UpdateEncryptedChatTyping) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateEncryptedChatTyping) CRC() uint32 {
	return uint32(0x1710f156)
}

func (*UpdateEncryptedChatTyping) ImplementsUpdate() {}

func (e *UpdateEncryptedChatTyping) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

func (e *UpdateEncryptedChatTyping) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	return buf.Result()
}

type UpdateReadMessagesContents struct {
	Messages []int32 `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateReadMessagesContents) Validate() error {
	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if item == 0 {
			return fmt.Errorf("field 'Messages' is not set")
		} // builtin_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateReadMessagesContents) CRC() uint32 {
	return uint32(0x68c13933)
}

func (*UpdateReadMessagesContents) ImplementsUpdate() {}

func (e *UpdateReadMessagesContents) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateReadMessagesContents) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateWebPage struct {
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
	Webpage  WebPage `validate:"required"`
}

func (e *UpdateWebPage) Validate() error {
	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	if err := e.Webpage.Validate(); err != nil {
		return fmt.Errorf("field 'Webpage': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateWebPage) CRC() uint32 {
	return uint32(0x7f891213)
}

func (*UpdateWebPage) ImplementsUpdate() {}

func (e *UpdateWebPage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

func (e *UpdateWebPage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

type UpdateReadHistoryOutbox struct {
	MaxId    int32 `validate:"required"`
	Peer     Peer  `validate:"required"`
	Pts      int32 `validate:"required"`
	PtsCount int32 `validate:"required"`
}

func (e *UpdateReadHistoryOutbox) Validate() error {
	if e.MaxId == 0 {
		return fmt.Errorf("field 'MaxId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateReadHistoryOutbox) CRC() uint32 {
	return uint32(0x2f2f21bf)
}

func (*UpdateReadHistoryOutbox) ImplementsUpdate() {}

func (e *UpdateReadHistoryOutbox) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateReadHistoryOutbox) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MaxId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateReadHistoryInbox struct {
	__flagsPosition  struct{} // flags param position `validate:"required"`
	FolderId         int32    `flag:"0"`
	MaxId            int32    `validate:"required"`
	Peer             Peer     `validate:"required"`
	Pts              int32    `validate:"required"`
	PtsCount         int32    `validate:"required"`
	StillUnreadCount int32    `validate:"required"`
}

func (e *UpdateReadHistoryInbox) Validate() error {

	if e.MaxId == 0 {
		return fmt.Errorf("field 'MaxId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	if e.StillUnreadCount == 0 {
		return fmt.Errorf("field 'StillUnreadCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateReadHistoryInbox) CRC() uint32 {
	return uint32(0x9c974fdf)
}

func (*UpdateReadHistoryInbox) ImplementsUpdate() {}

func (e *UpdateReadHistoryInbox) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.MaxId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutInt(e.StillUnreadCount)
	return buf.Result()
}

func (e *UpdateReadHistoryInbox) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FolderId != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.MaxId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutInt(e.StillUnreadCount)
	return buf.Result()
}

type UpdateUserPhone struct {
	Phone  string `validate:"required"`
	UserId int32  `validate:"required"`
}

func (e *UpdateUserPhone) Validate() error {
	if e.Phone == "" {
		return fmt.Errorf("field 'Phone' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserPhone) CRC() uint32 {
	return uint32(0x12b9417b)
}

func (*UpdateUserPhone) ImplementsUpdate() {}

func (e *UpdateUserPhone) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserPhone) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Phone)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdatePrivacy struct {
	Key   PrivacyKey    `validate:"required"`
	Rules []PrivacyRule `validate:"required"`
}

func (e *UpdatePrivacy) Validate() error {
	if e.Key == 0 {
		return fmt.Errorf("field 'Key' is not set")
	} // enum_check

	if len(e.Rules) == 0 {
		return fmt.Errorf("field 'Rules' is not set")
	} // slice_len_check
	for _, item := range e.Rules {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Rules': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatePrivacy) CRC() uint32 {
	return uint32(0xee3b272a)
}

func (*UpdatePrivacy) ImplementsUpdate() {}

func (e *UpdatePrivacy) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Key.Encode())
	buf.PutVector(e.Rules)
	return buf.Result()
}

func (e *UpdatePrivacy) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Key.Encode())
	buf.PutVector(e.Rules)
	return buf.Result()
}

type UpdateServiceNotification struct {
	Entities        []MessageEntity `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	InboxDate       int32           `flag:"1"`
	Media           MessageMedia    `validate:"required"`
	Message         string          `validate:"required"`
	Popup           bool            `flag:"0,encoded_in_bitflags"`
	Type            string          `validate:"required"`
}

func (e *UpdateServiceNotification) Validate() error {
	if len(e.Entities) == 0 {
		return fmt.Errorf("field 'Entities' is not set")
	} // slice_len_check
	for _, item := range e.Entities {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Entities': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Media.Validate(); err != nil {
		return fmt.Errorf("field 'Media': %w", err)
	} // type_iter_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	if e.Type == "" {
		return fmt.Errorf("field 'Type' is not set")
	} // builtin_check

	return nil
}

func (*UpdateServiceNotification) CRC() uint32 {
	return uint32(0xebe46819)
}

func (*UpdateServiceNotification) ImplementsUpdate() {}

func (e *UpdateServiceNotification) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Popup) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.InboxDate) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.InboxDate) {
		buf.PutInt(e.InboxDate)
	}
	buf.PutRawBytes(e.Media.Encode())
	buf.PutString(e.Message)
	buf.PutString(e.Type)
	return buf.Result()
}

func (e *UpdateServiceNotification) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Popup != false {
		flag |= 1 << 0
	}
	if e.InboxDate != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	if e.InboxDate != 0 {
		buf.PutInt(e.InboxDate)
	}
	buf.PutRawBytes(e.Media.Encode())
	buf.PutString(e.Message)
	buf.PutString(e.Type)
	return buf.Result()
}

type UpdateNotifySettings struct {
	NotifySettings *PeerNotifySettings `validate:"required"`
	Peer           NotifyPeer          `validate:"required"`
}

func (e *UpdateNotifySettings) Validate() error {
	if err := e.NotifySettings.Validate(); err != nil {
		return fmt.Errorf("field 'NotifySettings': %w", err)
	} // type_iter_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateNotifySettings) CRC() uint32 {
	return uint32(0xbec268ef)
}

func (*UpdateNotifySettings) ImplementsUpdate() {}

func (e *UpdateNotifySettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateNotifySettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.NotifySettings.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdateUserBlocked struct {
	Blocked bool  `validate:"required"`
	UserId  int32 `validate:"required"`
}

func (e *UpdateUserBlocked) Validate() error {
	if e.Blocked == false {
		return fmt.Errorf("field 'Blocked' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserBlocked) CRC() uint32 {
	return uint32(0x80ece81a)
}

func (*UpdateUserBlocked) ImplementsUpdate() {}

func (e *UpdateUserBlocked) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Blocked)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserBlocked) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutBool(e.Blocked)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateNewChannelMessage struct {
	Message  Message `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateNewChannelMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateNewChannelMessage) CRC() uint32 {
	return uint32(0x62ba04d9)
}

func (*UpdateNewChannelMessage) ImplementsUpdate() {}

func (e *UpdateNewChannelMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateNewChannelMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateReadChannelInbox struct {
	ChannelId        int32    `validate:"required"`
	__flagsPosition  struct{} // flags param position `validate:"required"`
	FolderId         int32    `flag:"0"`
	MaxId            int32    `validate:"required"`
	Pts              int32    `validate:"required"`
	StillUnreadCount int32    `validate:"required"`
}

func (e *UpdateReadChannelInbox) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.MaxId == 0 {
		return fmt.Errorf("field 'MaxId' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.StillUnreadCount == 0 {
		return fmt.Errorf("field 'StillUnreadCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateReadChannelInbox) CRC() uint32 {
	return uint32(0x330b5424)
}

func (*UpdateReadChannelInbox) ImplementsUpdate() {}

func (e *UpdateReadChannelInbox) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.MaxId)
	buf.PutInt(e.Pts)
	buf.PutInt(e.StillUnreadCount)
	return buf.Result()
}

func (e *UpdateReadChannelInbox) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.FolderId != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutInt(e.MaxId)
	buf.PutInt(e.Pts)
	buf.PutInt(e.StillUnreadCount)
	return buf.Result()
}

type UpdateDeleteChannelMessages struct {
	ChannelId int32   `validate:"required"`
	Messages  []int32 `validate:"required"`
	Pts       int32   `validate:"required"`
	PtsCount  int32   `validate:"required"`
}

func (e *UpdateDeleteChannelMessages) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if item == 0 {
			return fmt.Errorf("field 'Messages' is not set")
		} // builtin_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateDeleteChannelMessages) CRC() uint32 {
	return uint32(0xc37521c9)
}

func (*UpdateDeleteChannelMessages) ImplementsUpdate() {}

func (e *UpdateDeleteChannelMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateDeleteChannelMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateChannelMessageViews struct {
	ChannelId int32 `validate:"required"`
	Id        int32 `validate:"required"`
	Views     int32 `validate:"required"`
}

func (e *UpdateChannelMessageViews) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Views == 0 {
		return fmt.Errorf("field 'Views' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannelMessageViews) CRC() uint32 {
	return uint32(0x98a12b4b)
}

func (*UpdateChannelMessageViews) ImplementsUpdate() {}

func (e *UpdateChannelMessageViews) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Id)
	buf.PutInt(e.Views)
	return buf.Result()
}

func (e *UpdateChannelMessageViews) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Id)
	buf.PutInt(e.Views)
	return buf.Result()
}

type UpdateChatParticipantAdmin struct {
	ChatId  int32 `validate:"required"`
	IsAdmin bool  `validate:"required"`
	UserId  int32 `validate:"required"`
	Version int32 `validate:"required"`
}

func (e *UpdateChatParticipantAdmin) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.IsAdmin == false {
		return fmt.Errorf("field 'IsAdmin' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatParticipantAdmin) CRC() uint32 {
	return uint32(0xb6901959)
}

func (*UpdateChatParticipantAdmin) ImplementsUpdate() {}

func (e *UpdateChatParticipantAdmin) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutBool(e.IsAdmin)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *UpdateChatParticipantAdmin) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutBool(e.IsAdmin)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

type UpdateChannelParticipant struct {
	ChannelId       int32              `validate:"required"`
	Date            int32              `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	NewParticipant  ChannelParticipant `flag:"1"`
	PrevParticipant ChannelParticipant `flag:"0"`
	Qts             int32              `validate:"required"`
	UserId          int32              `validate:"required"`
}

func (e *UpdateChannelParticipant) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Qts == 0 {
		return fmt.Errorf("field 'Qts' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannelParticipant) CRC() uint32 {
	return uint32(0x65d2b464)
}

func (*UpdateChannelParticipant) ImplementsUpdate() {}

func (e *UpdateChannelParticipant) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.PrevParticipant) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.NewParticipant) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.NewParticipant) {
		buf.PutRawBytes(e.NewParticipant.Encode())
	}
	if !zero.IsZeroVal(e.PrevParticipant) {
		buf.PutRawBytes(e.PrevParticipant.Encode())
	}
	buf.PutInt(e.Qts)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateChannelParticipant) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.PrevParticipant.Validate() == nil {
		flag |= 1 << 0
	}
	if e.NewParticipant.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Date)
	buf.PutUint(flag)
	if e.NewParticipant.Validate() == nil {
		buf.PutRawBytes(e.NewParticipant.Encode())
	}
	if e.PrevParticipant.Validate() == nil {
		buf.PutRawBytes(e.PrevParticipant.Encode())
	}
	buf.PutInt(e.Qts)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateNewStickerSet struct {
	Stickerset *MessagesStickerSet `validate:"required"`
}

func (e *UpdateNewStickerSet) Validate() error {
	if err := e.Stickerset.Validate(); err != nil {
		return fmt.Errorf("field 'Stickerset': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateNewStickerSet) CRC() uint32 {
	return uint32(0x688a30aa)
}

func (*UpdateNewStickerSet) ImplementsUpdate() {}

func (e *UpdateNewStickerSet) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

func (e *UpdateNewStickerSet) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Stickerset.Encode())
	return buf.Result()
}

type UpdateStickerSetsOrder struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Masks           bool     `flag:"0,encoded_in_bitflags"`
	Order           []int64  `validate:"required"`
}

func (e *UpdateStickerSetsOrder) Validate() error {

	if len(e.Order) == 0 {
		return fmt.Errorf("field 'Order' is not set")
	} // slice_len_check
	for _, item := range e.Order {
		if item == 0 {
			return fmt.Errorf("field 'Order' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*UpdateStickerSetsOrder) CRC() uint32 {
	return uint32(0xbb2d201)
}

func (*UpdateStickerSetsOrder) ImplementsUpdate() {}

func (e *UpdateStickerSetsOrder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Masks) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Order)
	return buf.Result()
}

func (e *UpdateStickerSetsOrder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Masks != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutVector(e.Order)
	return buf.Result()
}

type UpdateUserPhoto struct {
	Date     int32            `validate:"required"`
	Photo    UserProfilePhoto `validate:"required"`
	Previous bool             `validate:"required"`
	UserId   int32            `validate:"required"`
}

func (e *UpdateUserPhoto) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if err := e.Photo.Validate(); err != nil {
		return fmt.Errorf("field 'Photo': %w", err)
	} // type_iter_check

	if e.Previous == false {
		return fmt.Errorf("field 'Previous' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserPhoto) CRC() uint32 {
	return uint32(0x95313b0c)
}

func (*UpdateUserPhoto) ImplementsUpdate() {}

func (e *UpdateUserPhoto) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutBool(e.Previous)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserPhoto) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.Photo.Encode())
	buf.PutBool(e.Previous)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateUserName struct {
	FirstName string `validate:"required"`
	LastName  string `validate:"required"`
	UserId    int32  `validate:"required"`
	Username  string `validate:"required"`
}

func (e *UpdateUserName) Validate() error {
	if e.FirstName == "" {
		return fmt.Errorf("field 'FirstName' is not set")
	} // builtin_check

	if e.LastName == "" {
		return fmt.Errorf("field 'LastName' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	if e.Username == "" {
		return fmt.Errorf("field 'Username' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserName) CRC() uint32 {
	return uint32(0xa7332b73)
}

func (*UpdateUserName) ImplementsUpdate() {}

func (e *UpdateUserName) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutInt(e.UserId)
	buf.PutString(e.Username)
	return buf.Result()
}

func (e *UpdateUserName) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.FirstName)
	buf.PutString(e.LastName)
	buf.PutInt(e.UserId)
	buf.PutString(e.Username)
	return buf.Result()
}

type UpdateStickerSets struct{}

func (e *UpdateStickerSets) Validate() error {
	return nil
}

func (*UpdateStickerSets) CRC() uint32 {
	return uint32(0x43ae3dec)
}

func (*UpdateStickerSets) ImplementsUpdate() {}

func (e *UpdateStickerSets) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateStickerSets) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateSavedGifs struct{}

func (e *UpdateSavedGifs) Validate() error {
	return nil
}

func (*UpdateSavedGifs) CRC() uint32 {
	return uint32(0x9375341e)
}

func (*UpdateSavedGifs) ImplementsUpdate() {}

func (e *UpdateSavedGifs) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateSavedGifs) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateUserStatus struct {
	Status UserStatus `validate:"required"`
	UserId int32      `validate:"required"`
}

func (e *UpdateUserStatus) Validate() error {
	if err := e.Status.Validate(); err != nil {
		return fmt.Errorf("field 'Status': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserStatus) CRC() uint32 {
	return uint32(0x1bfbd823)
}

func (*UpdateUserStatus) ImplementsUpdate() {}

func (e *UpdateUserStatus) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Status.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserStatus) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Status.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateChatParticipants struct {
	Participants ChatParticipants `validate:"required"`
}

func (e *UpdateChatParticipants) Validate() error {
	if err := e.Participants.Validate(); err != nil {
		return fmt.Errorf("field 'Participants': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateChatParticipants) CRC() uint32 {
	return uint32(0x7761198)
}

func (*UpdateChatParticipants) ImplementsUpdate() {}

func (e *UpdateChatParticipants) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participants.Encode())
	return buf.Result()
}

func (e *UpdateChatParticipants) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Participants.Encode())
	return buf.Result()
}

type UpdateBotInlineQuery struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	Geo             GeoPoint `flag:"0"`
	Offset          string   `validate:"required"`
	Query           string   `validate:"required"`
	QueryId         int64    `validate:"required"`
	UserId          int32    `validate:"required"`
}

func (e *UpdateBotInlineQuery) Validate() error {

	if e.Offset == "" {
		return fmt.Errorf("field 'Offset' is not set")
	} // builtin_check

	if e.Query == "" {
		return fmt.Errorf("field 'Query' is not set")
	} // builtin_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotInlineQuery) CRC() uint32 {
	return uint32(0x54826690)
}

func (*UpdateBotInlineQuery) ImplementsUpdate() {}

func (e *UpdateBotInlineQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Geo) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Geo) {
		buf.PutRawBytes(e.Geo.Encode())
	}
	buf.PutString(e.Offset)
	buf.PutString(e.Query)
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateBotInlineQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Geo.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Geo.Validate() == nil {
		buf.PutRawBytes(e.Geo.Encode())
	}
	buf.PutString(e.Offset)
	buf.PutString(e.Query)
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateBotInlineSend struct {
	__flagsPosition struct{}                 // flags param position `validate:"required"`
	Geo             GeoPoint                 `flag:"0"`
	Id              string                   `validate:"required"`
	MsgId           *InputBotInlineMessageID `flag:"1"`
	Query           string                   `validate:"required"`
	UserId          int32                    `validate:"required"`
}

func (e *UpdateBotInlineSend) Validate() error {

	if e.Id == "" {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Query == "" {
		return fmt.Errorf("field 'Query' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotInlineSend) CRC() uint32 {
	return uint32(0xe48f964)
}

func (*UpdateBotInlineSend) ImplementsUpdate() {}

func (e *UpdateBotInlineSend) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Geo) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.MsgId) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Geo) {
		buf.PutRawBytes(e.Geo.Encode())
	}
	buf.PutString(e.Id)
	if !zero.IsZeroVal(e.MsgId) {
		buf.PutRawBytes(e.MsgId.Encode())
	}
	buf.PutString(e.Query)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateBotInlineSend) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Geo.Validate() == nil {
		flag |= 1 << 0
	}
	if e.MsgId.Validate() == nil {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Geo.Validate() == nil {
		buf.PutRawBytes(e.Geo.Encode())
	}
	buf.PutString(e.Id)
	if e.MsgId.Validate() == nil {
		buf.PutRawBytes(e.MsgId.Encode())
	}
	buf.PutString(e.Query)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateEditChannelMessage struct {
	Message  Message `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateEditChannelMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateEditChannelMessage) CRC() uint32 {
	return uint32(0x1b3f4df7)
}

func (*UpdateEditChannelMessage) ImplementsUpdate() {}

func (e *UpdateEditChannelMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateEditChannelMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateChannelPinnedMessage struct {
	ChannelId int32 `validate:"required"`
	Id        int32 `validate:"required"`
}

func (e *UpdateChannelPinnedMessage) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannelPinnedMessage) CRC() uint32 {
	return uint32(0x98592475)
}

func (*UpdateChannelPinnedMessage) ImplementsUpdate() {}

func (e *UpdateChannelPinnedMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *UpdateChannelPinnedMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Id)
	return buf.Result()
}

type UpdateBotCallbackQuery struct {
	ChatInstance    int64    `validate:"required"`
	Data            []byte   `flag:"0"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	GameShortName   string   `flag:"1"`
	MsgId           int32    `validate:"required"`
	Peer            Peer     `validate:"required"`
	QueryId         int64    `validate:"required"`
	UserId          int32    `validate:"required"`
}

func (e *UpdateBotCallbackQuery) Validate() error {
	if e.ChatInstance == 0 {
		return fmt.Errorf("field 'ChatInstance' is not set")
	} // builtin_check

	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotCallbackQuery) CRC() uint32 {
	return uint32(0xe73547e1)
}

func (*UpdateBotCallbackQuery) ImplementsUpdate() {}

func (e *UpdateBotCallbackQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Data) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.GameShortName) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ChatInstance)
	if !zero.IsZeroVal(e.Data) {
		buf.PutMessage(e.Data)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.GameShortName) {
		buf.PutString(e.GameShortName)
	}
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateBotCallbackQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Data) > 0 {
		flag |= 1 << 0
	}
	if e.GameShortName != "" {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ChatInstance)
	if len(e.Data) > 0 {
		buf.PutMessage(e.Data)
	}
	buf.PutUint(flag)
	if e.GameShortName != "" {
		buf.PutString(e.GameShortName)
	}
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateLoginToken struct{}

func (e *UpdateLoginToken) Validate() error {
	return nil
}

func (*UpdateLoginToken) CRC() uint32 {
	return uint32(0x564fe691)
}

func (*UpdateLoginToken) ImplementsUpdate() {}

func (e *UpdateLoginToken) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateLoginToken) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateInlineBotCallbackQuery struct {
	ChatInstance    int64                    `validate:"required"`
	Data            []byte                   `flag:"0"`
	__flagsPosition struct{}                 // flags param position `validate:"required"`
	GameShortName   string                   `flag:"1"`
	MsgId           *InputBotInlineMessageID `validate:"required"`
	QueryId         int64                    `validate:"required"`
	UserId          int32                    `validate:"required"`
}

func (e *UpdateInlineBotCallbackQuery) Validate() error {
	if e.ChatInstance == 0 {
		return fmt.Errorf("field 'ChatInstance' is not set")
	} // builtin_check

	if err := e.MsgId.Validate(); err != nil {
		return fmt.Errorf("field 'MsgId': %w", err)
	} // type_iter_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateInlineBotCallbackQuery) CRC() uint32 {
	return uint32(0xf9d27a5a)
}

func (*UpdateInlineBotCallbackQuery) ImplementsUpdate() {}

func (e *UpdateInlineBotCallbackQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Data) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.GameShortName) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ChatInstance)
	if !zero.IsZeroVal(e.Data) {
		buf.PutMessage(e.Data)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.GameShortName) {
		buf.PutString(e.GameShortName)
	}
	buf.PutRawBytes(e.MsgId.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateInlineBotCallbackQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if len(e.Data) > 0 {
		flag |= 1 << 0
	}
	if e.GameShortName != "" {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.ChatInstance)
	if len(e.Data) > 0 {
		buf.PutMessage(e.Data)
	}
	buf.PutUint(flag)
	if e.GameShortName != "" {
		buf.PutString(e.GameShortName)
	}
	buf.PutRawBytes(e.MsgId.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateReadChannelOutbox struct {
	ChannelId int32 `validate:"required"`
	MaxId     int32 `validate:"required"`
}

func (e *UpdateReadChannelOutbox) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.MaxId == 0 {
		return fmt.Errorf("field 'MaxId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateReadChannelOutbox) CRC() uint32 {
	return uint32(0x25d6c9c7)
}

func (*UpdateReadChannelOutbox) ImplementsUpdate() {}

func (e *UpdateReadChannelOutbox) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MaxId)
	return buf.Result()
}

func (e *UpdateReadChannelOutbox) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.MaxId)
	return buf.Result()
}

type UpdateDcOptions struct {
	DcOptions []*DcOption `validate:"required"`
}

func (e *UpdateDcOptions) Validate() error {
	if len(e.DcOptions) == 0 {
		return fmt.Errorf("field 'DcOptions' is not set")
	} // slice_len_check
	for _, item := range e.DcOptions {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'DcOptions': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdateDcOptions) CRC() uint32 {
	return uint32(0x8e5e9873)
}

func (*UpdateDcOptions) ImplementsUpdate() {}

func (e *UpdateDcOptions) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.DcOptions)
	return buf.Result()
}

func (e *UpdateDcOptions) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.DcOptions)
	return buf.Result()
}

type UpdateChatUserTyping struct {
	Action SendMessageAction `validate:"required"`
	ChatId int32             `validate:"required"`
	UserId int32             `validate:"required"`
}

func (e *UpdateChatUserTyping) Validate() error {
	if err := e.Action.Validate(); err != nil {
		return fmt.Errorf("field 'Action': %w", err)
	} // type_iter_check

	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatUserTyping) CRC() uint32 {
	return uint32(0x9a65ea1f)
}

func (*UpdateChatUserTyping) ImplementsUpdate() {}

func (e *UpdateChatUserTyping) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateChatUserTyping) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateDraftMessage struct {
	Draft DraftMessage `validate:"required"`
	Peer  Peer         `validate:"required"`
}

func (e *UpdateDraftMessage) Validate() error {
	if err := e.Draft.Validate(); err != nil {
		return fmt.Errorf("field 'Draft': %w", err)
	} // type_iter_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateDraftMessage) CRC() uint32 {
	return uint32(0xee2bb969)
}

func (*UpdateDraftMessage) ImplementsUpdate() {}

func (e *UpdateDraftMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Draft.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateDraftMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Draft.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdateReadFeaturedStickers struct{}

func (e *UpdateReadFeaturedStickers) Validate() error {
	return nil
}

func (*UpdateReadFeaturedStickers) CRC() uint32 {
	return uint32(0x571d2742)
}

func (*UpdateReadFeaturedStickers) ImplementsUpdate() {}

func (e *UpdateReadFeaturedStickers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateReadFeaturedStickers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateRecentStickers struct{}

func (e *UpdateRecentStickers) Validate() error {
	return nil
}

func (*UpdateRecentStickers) CRC() uint32 {
	return uint32(0x9a422c20)
}

func (*UpdateRecentStickers) ImplementsUpdate() {}

func (e *UpdateRecentStickers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateRecentStickers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateConfig struct{}

func (e *UpdateConfig) Validate() error {
	return nil
}

func (*UpdateConfig) CRC() uint32 {
	return uint32(0xa229dd06)
}

func (*UpdateConfig) ImplementsUpdate() {}

func (e *UpdateConfig) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateConfig) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdatePtsChanged struct{}

func (e *UpdatePtsChanged) Validate() error {
	return nil
}

func (*UpdatePtsChanged) CRC() uint32 {
	return uint32(0x3354678f)
}

func (*UpdatePtsChanged) ImplementsUpdate() {}

func (e *UpdatePtsChanged) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdatePtsChanged) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateUserTyping struct {
	Action SendMessageAction `validate:"required"`
	UserId int32             `validate:"required"`
}

func (e *UpdateUserTyping) Validate() error {
	if err := e.Action.Validate(); err != nil {
		return fmt.Errorf("field 'Action': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserTyping) CRC() uint32 {
	return uint32(0x5c486927)
}

func (*UpdateUserTyping) ImplementsUpdate() {}

func (e *UpdateUserTyping) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserTyping) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Action.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateDeleteMessages struct {
	Messages []int32 `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateDeleteMessages) Validate() error {
	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if item == 0 {
			return fmt.Errorf("field 'Messages' is not set")
		} // builtin_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateDeleteMessages) CRC() uint32 {
	return uint32(0xa20db0e5)
}

func (*UpdateDeleteMessages) ImplementsUpdate() {}

func (e *UpdateDeleteMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateDeleteMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateChannelWebPage struct {
	ChannelId int32   `validate:"required"`
	Pts       int32   `validate:"required"`
	PtsCount  int32   `validate:"required"`
	Webpage   WebPage `validate:"required"`
}

func (e *UpdateChannelWebPage) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	if err := e.Webpage.Validate(); err != nil {
		return fmt.Errorf("field 'Webpage': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateChannelWebPage) CRC() uint32 {
	return uint32(0x40771900)
}

func (*UpdateChannelWebPage) ImplementsUpdate() {}

func (e *UpdateChannelWebPage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

func (e *UpdateChannelWebPage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	buf.PutRawBytes(e.Webpage.Encode())
	return buf.Result()
}

type UpdateLangPackTooLong struct {
	LangCode string `validate:"required"`
}

func (e *UpdateLangPackTooLong) Validate() error {
	if e.LangCode == "" {
		return fmt.Errorf("field 'LangCode' is not set")
	} // builtin_check

	return nil
}

func (*UpdateLangPackTooLong) CRC() uint32 {
	return uint32(0x46560264)
}

func (*UpdateLangPackTooLong) ImplementsUpdate() {}

func (e *UpdateLangPackTooLong) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

func (e *UpdateLangPackTooLong) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.LangCode)
	return buf.Result()
}

type UpdatePhoneCallSignalingData struct {
	Data        []byte `validate:"required"`
	PhoneCallId int64  `validate:"required"`
}

func (e *UpdatePhoneCallSignalingData) Validate() error {
	if len(e.Data) == 0 {
		return fmt.Errorf("field 'Data' is not set")
	} // byte_slice_check

	if e.PhoneCallId == 0 {
		return fmt.Errorf("field 'PhoneCallId' is not set")
	} // builtin_check

	return nil
}

func (*UpdatePhoneCallSignalingData) CRC() uint32 {
	return uint32(0x2661bf09)
}

func (*UpdatePhoneCallSignalingData) ImplementsUpdate() {}

func (e *UpdatePhoneCallSignalingData) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutLong(e.PhoneCallId)
	return buf.Result()
}

func (e *UpdatePhoneCallSignalingData) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Data)
	buf.PutLong(e.PhoneCallId)
	return buf.Result()
}

type UpdateChatParticipantDelete struct {
	ChatId  int32 `validate:"required"`
	UserId  int32 `validate:"required"`
	Version int32 `validate:"required"`
}

func (e *UpdateChatParticipantDelete) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatParticipantDelete) CRC() uint32 {
	return uint32(0x6e5f8c22)
}

func (*UpdateChatParticipantDelete) ImplementsUpdate() {}

func (e *UpdateChatParticipantDelete) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *UpdateChatParticipantDelete) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

type UpdateNewMessage struct {
	Message  Message `validate:"required"`
	Pts      int32   `validate:"required"`
	PtsCount int32   `validate:"required"`
}

func (e *UpdateNewMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateNewMessage) CRC() uint32 {
	return uint32(0x1f2b0afd)
}

func (*UpdateNewMessage) ImplementsUpdate() {}

func (e *UpdateNewMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateNewMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateMessageID struct {
	Id       int32 `validate:"required"`
	RandomId int64 `validate:"required"`
}

func (e *UpdateMessageID) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.RandomId == 0 {
		return fmt.Errorf("field 'RandomId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateMessageID) CRC() uint32 {
	return uint32(0x4e90bfd6)
}

func (*UpdateMessageID) ImplementsUpdate() {}

func (e *UpdateMessageID) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

func (e *UpdateMessageID) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutLong(e.RandomId)
	return buf.Result()
}

type UpdateDialogFilters struct{}

func (e *UpdateDialogFilters) Validate() error {
	return nil
}

func (*UpdateDialogFilters) CRC() uint32 {
	return uint32(0x3504914f)
}

func (*UpdateDialogFilters) ImplementsUpdate() {}

func (e *UpdateDialogFilters) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateDialogFilters) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateDialogFilterOrder struct {
	Order []int32 `validate:"required"`
}

func (e *UpdateDialogFilterOrder) Validate() error {
	if len(e.Order) == 0 {
		return fmt.Errorf("field 'Order' is not set")
	} // slice_len_check
	for _, item := range e.Order {
		if item == 0 {
			return fmt.Errorf("field 'Order' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*UpdateDialogFilterOrder) CRC() uint32 {
	return uint32(0xa5d72105)
}

func (*UpdateDialogFilterOrder) ImplementsUpdate() {}

func (e *UpdateDialogFilterOrder) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Order)
	return buf.Result()
}

func (e *UpdateDialogFilterOrder) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Order)
	return buf.Result()
}

type UpdateDialogFilter struct {
	Filter          *DialogFilter `flag:"0"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	Id              int32         `validate:"required"`
}

func (e *UpdateDialogFilter) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*UpdateDialogFilter) CRC() uint32 {
	return uint32(0x26ffde7d)
}

func (*UpdateDialogFilter) ImplementsUpdate() {}

func (e *UpdateDialogFilter) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Filter) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Filter) {
		buf.PutRawBytes(e.Filter.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *UpdateDialogFilter) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Filter.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Filter.Validate() == nil {
		buf.PutRawBytes(e.Filter.Encode())
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	return buf.Result()
}

type UpdateMessagePollVote struct {
	Options [][]byte `validate:"required"`
	PollId  int64    `validate:"required"`
	UserId  int32    `validate:"required"`
}

func (e *UpdateMessagePollVote) Validate() error {
	if len(e.Options) == 0 {
		return fmt.Errorf("field 'Options' is not set")
	} // slice_len_check
	for _, item := range e.Options {
		if len(item) == 0 {
			return fmt.Errorf("field 'Options' is not set")
		} // byte_slice_check
	} // subitem_check

	if e.PollId == 0 {
		return fmt.Errorf("field 'PollId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateMessagePollVote) CRC() uint32 {
	return uint32(0x42f88f2c)
}

func (*UpdateMessagePollVote) ImplementsUpdate() {}

func (e *UpdateMessagePollVote) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Options)
	buf.PutLong(e.PollId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateMessagePollVote) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Options)
	buf.PutLong(e.PollId)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateEncryption struct {
	Chat EncryptedChat `validate:"required"`
	Date int32         `validate:"required"`
}

func (e *UpdateEncryption) Validate() error {
	if err := e.Chat.Validate(); err != nil {
		return fmt.Errorf("field 'Chat': %w", err)
	} // type_iter_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	return nil
}

func (*UpdateEncryption) CRC() uint32 {
	return uint32(0xb4a2e88d)
}

func (*UpdateEncryption) ImplementsUpdate() {}

func (e *UpdateEncryption) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	buf.PutInt(e.Date)
	return buf.Result()
}

func (e *UpdateEncryption) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Chat.Encode())
	buf.PutInt(e.Date)
	return buf.Result()
}

type UpdateGeoLiveViewed struct {
	MsgId int32 `validate:"required"`
	Peer  Peer  `validate:"required"`
}

func (e *UpdateGeoLiveViewed) Validate() error {
	if e.MsgId == 0 {
		return fmt.Errorf("field 'MsgId' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateGeoLiveViewed) CRC() uint32 {
	return uint32(0x871fb939)
}

func (*UpdateGeoLiveViewed) ImplementsUpdate() {}

func (e *UpdateGeoLiveViewed) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateGeoLiveViewed) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.MsgId)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdateTheme struct {
	Theme *Theme `validate:"required"`
}

func (e *UpdateTheme) Validate() error {
	if err := e.Theme.Validate(); err != nil {
		return fmt.Errorf("field 'Theme': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateTheme) CRC() uint32 {
	return uint32(0x8216fba3)
}

func (*UpdateTheme) ImplementsUpdate() {}

func (e *UpdateTheme) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Theme.Encode())
	return buf.Result()
}

func (e *UpdateTheme) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Theme.Encode())
	return buf.Result()
}

type UpdateDeleteScheduledMessages struct {
	Messages []int32 `validate:"required"`
	Peer     Peer    `validate:"required"`
}

func (e *UpdateDeleteScheduledMessages) Validate() error {
	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if item == 0 {
			return fmt.Errorf("field 'Messages' is not set")
		} // builtin_check
	} // subitem_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateDeleteScheduledMessages) CRC() uint32 {
	return uint32(0x90866cee)
}

func (*UpdateDeleteScheduledMessages) ImplementsUpdate() {}

func (e *UpdateDeleteScheduledMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateDeleteScheduledMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Messages)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdateNewScheduledMessage struct {
	Message Message `validate:"required"`
}

func (e *UpdateNewScheduledMessage) Validate() error {
	if err := e.Message.Validate(); err != nil {
		return fmt.Errorf("field 'Message': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateNewScheduledMessage) CRC() uint32 {
	return uint32(0x39a51dfb)
}

func (*UpdateNewScheduledMessage) ImplementsUpdate() {}

func (e *UpdateNewScheduledMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

func (e *UpdateNewScheduledMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Message.Encode())
	return buf.Result()
}

type UpdatePeerLocated struct {
	Peers []PeerLocated `validate:"required"`
}

func (e *UpdatePeerLocated) Validate() error {
	if len(e.Peers) == 0 {
		return fmt.Errorf("field 'Peers' is not set")
	} // slice_len_check
	for _, item := range e.Peers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Peers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatePeerLocated) CRC() uint32 {
	return uint32(0xb4afcfb0)
}

func (*UpdatePeerLocated) ImplementsUpdate() {}

func (e *UpdatePeerLocated) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Peers)
	return buf.Result()
}

func (e *UpdatePeerLocated) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Peers)
	return buf.Result()
}

type UpdatePeerSettings struct {
	Peer     Peer          `validate:"required"`
	Settings *PeerSettings `validate:"required"`
}

func (e *UpdatePeerSettings) Validate() error {
	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if err := e.Settings.Validate(); err != nil {
		return fmt.Errorf("field 'Settings': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdatePeerSettings) CRC() uint32 {
	return uint32(0x6a7e7366)
}

func (*UpdatePeerSettings) ImplementsUpdate() {}

func (e *UpdatePeerSettings) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

func (e *UpdatePeerSettings) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutRawBytes(e.Settings.Encode())
	return buf.Result()
}

type UpdateFolderPeers struct {
	FolderPeers []*FolderPeer `validate:"required"`
	Pts         int32         `validate:"required"`
	PtsCount    int32         `validate:"required"`
}

func (e *UpdateFolderPeers) Validate() error {
	if len(e.FolderPeers) == 0 {
		return fmt.Errorf("field 'FolderPeers' is not set")
	} // slice_len_check
	for _, item := range e.FolderPeers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'FolderPeers': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateFolderPeers) CRC() uint32 {
	return uint32(0x19360dc0)
}

func (*UpdateFolderPeers) ImplementsUpdate() {}

func (e *UpdateFolderPeers) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FolderPeers)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateFolderPeers) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.FolderPeers)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateChatDefaultBannedRights struct {
	DefaultBannedRights *ChatBannedRights `validate:"required"`
	Peer                Peer              `validate:"required"`
	Version             int32             `validate:"required"`
}

func (e *UpdateChatDefaultBannedRights) Validate() error {
	if err := e.DefaultBannedRights.Validate(); err != nil {
		return fmt.Errorf("field 'DefaultBannedRights': %w", err)
	} // type_iter_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatDefaultBannedRights) CRC() uint32 {
	return uint32(0x54c01850)
}

func (*UpdateChatDefaultBannedRights) ImplementsUpdate() {}

func (e *UpdateChatDefaultBannedRights) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.DefaultBannedRights.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *UpdateChatDefaultBannedRights) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.DefaultBannedRights.Encode())
	buf.PutRawBytes(e.Peer.Encode())
	buf.PutInt(e.Version)
	return buf.Result()
}

type UpdateMessagePoll struct {
	__flagsPosition struct{}     // flags param position `validate:"required"`
	Poll            *Poll        `flag:"0"`
	PollId          int64        `validate:"required"`
	Results         *PollResults `validate:"required"`
}

func (e *UpdateMessagePoll) Validate() error {

	if e.PollId == 0 {
		return fmt.Errorf("field 'PollId' is not set")
	} // builtin_check

	if err := e.Results.Validate(); err != nil {
		return fmt.Errorf("field 'Results': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateMessagePoll) CRC() uint32 {
	return uint32(0xaca1657b)
}

func (*UpdateMessagePoll) ImplementsUpdate() {}

func (e *UpdateMessagePoll) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Poll) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Poll) {
		buf.PutRawBytes(e.Poll.Encode())
	}
	buf.PutLong(e.PollId)
	buf.PutRawBytes(e.Results.Encode())
	return buf.Result()
}

func (e *UpdateMessagePoll) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Poll.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Poll.Validate() == nil {
		buf.PutRawBytes(e.Poll.Encode())
	}
	buf.PutLong(e.PollId)
	buf.PutRawBytes(e.Results.Encode())
	return buf.Result()
}

type UpdateChatPinnedMessage struct {
	ChatId  int32 `validate:"required"`
	Id      int32 `validate:"required"`
	Version int32 `validate:"required"`
}

func (e *UpdateChatPinnedMessage) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatPinnedMessage) CRC() uint32 {
	return uint32(0xe10db349)
}

func (*UpdateChatPinnedMessage) ImplementsUpdate() {}

func (e *UpdateChatPinnedMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Id)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *UpdateChatPinnedMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Id)
	buf.PutInt(e.Version)
	return buf.Result()
}

type UpdateUserPinnedMessage struct {
	Id     int32 `validate:"required"`
	UserId int32 `validate:"required"`
}

func (e *UpdateUserPinnedMessage) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateUserPinnedMessage) CRC() uint32 {
	return uint32(0x4c43da18)
}

func (*UpdateUserPinnedMessage) ImplementsUpdate() {}

func (e *UpdateUserPinnedMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateUserPinnedMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateDialogUnreadMark struct {
	__flagsPosition struct{}   // flags param position `validate:"required"`
	Peer            DialogPeer `validate:"required"`
	Unread          bool       `flag:"0,encoded_in_bitflags"`
}

func (e *UpdateDialogUnreadMark) Validate() error {

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateDialogUnreadMark) CRC() uint32 {
	return uint32(0xe16459c3)
}

func (*UpdateDialogUnreadMark) ImplementsUpdate() {}

func (e *UpdateDialogUnreadMark) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Unread) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateDialogUnreadMark) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Unread != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdateChannelAvailableMessages struct {
	AvailableMinId int32 `validate:"required"`
	ChannelId      int32 `validate:"required"`
}

func (e *UpdateChannelAvailableMessages) Validate() error {
	if e.AvailableMinId == 0 {
		return fmt.Errorf("field 'AvailableMinId' is not set")
	} // builtin_check

	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChannelAvailableMessages) CRC() uint32 {
	return uint32(0x70db6837)
}

func (*UpdateChannelAvailableMessages) ImplementsUpdate() {}

func (e *UpdateChannelAvailableMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AvailableMinId)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

func (e *UpdateChannelAvailableMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.AvailableMinId)
	buf.PutInt(e.ChannelId)
	return buf.Result()
}

type UpdateContactsReset struct{}

func (e *UpdateContactsReset) Validate() error {
	return nil
}

func (*UpdateContactsReset) CRC() uint32 {
	return uint32(0x7084a7be)
}

func (*UpdateContactsReset) ImplementsUpdate() {}

func (e *UpdateContactsReset) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateContactsReset) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateChannelReadMessagesContents struct {
	ChannelId int32   `validate:"required"`
	Messages  []int32 `validate:"required"`
}

func (e *UpdateChannelReadMessagesContents) Validate() error {
	if e.ChannelId == 0 {
		return fmt.Errorf("field 'ChannelId' is not set")
	} // builtin_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if item == 0 {
			return fmt.Errorf("field 'Messages' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*UpdateChannelReadMessagesContents) CRC() uint32 {
	return uint32(0x89893b45)
}

func (*UpdateChannelReadMessagesContents) ImplementsUpdate() {}

func (e *UpdateChannelReadMessagesContents) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutVector(e.Messages)
	return buf.Result()
}

func (e *UpdateChannelReadMessagesContents) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChannelId)
	buf.PutVector(e.Messages)
	return buf.Result()
}

type UpdateFavedStickers struct{}

func (e *UpdateFavedStickers) Validate() error {
	return nil
}

func (*UpdateFavedStickers) CRC() uint32 {
	return uint32(0xe511996d)
}

func (*UpdateFavedStickers) ImplementsUpdate() {}

func (e *UpdateFavedStickers) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdateFavedStickers) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UpdateLangPack struct {
	Difference *LangPackDifference `validate:"required"`
}

func (e *UpdateLangPack) Validate() error {
	if err := e.Difference.Validate(); err != nil {
		return fmt.Errorf("field 'Difference': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateLangPack) CRC() uint32 {
	return uint32(0x56022f4d)
}

func (*UpdateLangPack) ImplementsUpdate() {}

func (e *UpdateLangPack) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Difference.Encode())
	return buf.Result()
}

func (e *UpdateLangPack) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Difference.Encode())
	return buf.Result()
}

type UpdateDialogPinned struct {
	__flagsPosition struct{}   // flags param position `validate:"required"`
	FolderId        int32      `flag:"1"`
	Peer            DialogPeer `validate:"required"`
	Pinned          bool       `flag:"0,encoded_in_bitflags"`
}

func (e *UpdateDialogPinned) Validate() error {

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateDialogPinned) CRC() uint32 {
	return uint32(0x6e6fe51c)
}

func (*UpdateDialogPinned) ImplementsUpdate() {}

func (e *UpdateDialogPinned) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Pinned) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FolderId) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FolderId) {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

func (e *UpdateDialogPinned) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Pinned != false {
		flag |= 1 << 0
	}
	if e.FolderId != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.FolderId != 0 {
		buf.PutInt(e.FolderId)
	}
	buf.PutRawBytes(e.Peer.Encode())
	return buf.Result()
}

type UpdatePhoneCall struct {
	PhoneCall PhoneCall `validate:"required"`
}

func (e *UpdatePhoneCall) Validate() error {
	if err := e.PhoneCall.Validate(); err != nil {
		return fmt.Errorf("field 'PhoneCall': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdatePhoneCall) CRC() uint32 {
	return uint32(0xab0f6b1e)
}

func (*UpdatePhoneCall) ImplementsUpdate() {}

func (e *UpdatePhoneCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PhoneCall.Encode())
	return buf.Result()
}

func (e *UpdatePhoneCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.PhoneCall.Encode())
	return buf.Result()
}

type UpdateBotPrecheckoutQuery struct {
	Currency         string                `validate:"required"`
	__flagsPosition  struct{}              // flags param position `validate:"required"`
	Info             *PaymentRequestedInfo `flag:"0"`
	Payload          []byte                `validate:"required"`
	QueryId          int64                 `validate:"required"`
	ShippingOptionId string                `flag:"1"`
	TotalAmount      int64                 `validate:"required"`
	UserId           int32                 `validate:"required"`
}

func (e *UpdateBotPrecheckoutQuery) Validate() error {
	if e.Currency == "" {
		return fmt.Errorf("field 'Currency' is not set")
	} // builtin_check

	if len(e.Payload) == 0 {
		return fmt.Errorf("field 'Payload' is not set")
	} // byte_slice_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if e.TotalAmount == 0 {
		return fmt.Errorf("field 'TotalAmount' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotPrecheckoutQuery) CRC() uint32 {
	return uint32(0x5d2f3aa9)
}

func (*UpdateBotPrecheckoutQuery) ImplementsUpdate() {}

func (e *UpdateBotPrecheckoutQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Info) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.ShippingOptionId) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Info) {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutMessage(e.Payload)
	buf.PutLong(e.QueryId)
	if !zero.IsZeroVal(e.ShippingOptionId) {
		buf.PutString(e.ShippingOptionId)
	}
	buf.PutLong(e.TotalAmount)
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateBotPrecheckoutQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Info.Validate() == nil {
		flag |= 1 << 0
	}
	if e.ShippingOptionId != "" {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Currency)
	buf.PutUint(flag)
	if e.Info.Validate() == nil {
		buf.PutRawBytes(e.Info.Encode())
	}
	buf.PutMessage(e.Payload)
	buf.PutLong(e.QueryId)
	if e.ShippingOptionId != "" {
		buf.PutString(e.ShippingOptionId)
	}
	buf.PutLong(e.TotalAmount)
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateBotShippingQuery struct {
	Payload         []byte       `validate:"required"`
	QueryId         int64        `validate:"required"`
	ShippingAddress *PostAddress `validate:"required"`
	UserId          int32        `validate:"required"`
}

func (e *UpdateBotShippingQuery) Validate() error {
	if len(e.Payload) == 0 {
		return fmt.Errorf("field 'Payload' is not set")
	} // byte_slice_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if err := e.ShippingAddress.Validate(); err != nil {
		return fmt.Errorf("field 'ShippingAddress': %w", err)
	} // type_iter_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotShippingQuery) CRC() uint32 {
	return uint32(0xe0cdc940)
}

func (*UpdateBotShippingQuery) ImplementsUpdate() {}

func (e *UpdateBotShippingQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Payload)
	buf.PutLong(e.QueryId)
	buf.PutRawBytes(e.ShippingAddress.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

func (e *UpdateBotShippingQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Payload)
	buf.PutLong(e.QueryId)
	buf.PutRawBytes(e.ShippingAddress.Encode())
	buf.PutInt(e.UserId)
	return buf.Result()
}

type UpdateBotWebhookJSONQuery struct {
	Data    *DataJSON `validate:"required"`
	QueryId int64     `validate:"required"`
	Timeout int32     `validate:"required"`
}

func (e *UpdateBotWebhookJSONQuery) Validate() error {
	if err := e.Data.Validate(); err != nil {
		return fmt.Errorf("field 'Data': %w", err)
	} // type_iter_check

	if e.QueryId == 0 {
		return fmt.Errorf("field 'QueryId' is not set")
	} // builtin_check

	if e.Timeout == 0 {
		return fmt.Errorf("field 'Timeout' is not set")
	} // builtin_check

	return nil
}

func (*UpdateBotWebhookJSONQuery) CRC() uint32 {
	return uint32(0x9b9240a6)
}

func (*UpdateBotWebhookJSONQuery) ImplementsUpdate() {}

func (e *UpdateBotWebhookJSONQuery) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.Timeout)
	return buf.Result()
}

func (e *UpdateBotWebhookJSONQuery) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	buf.PutLong(e.QueryId)
	buf.PutInt(e.Timeout)
	return buf.Result()
}

type UpdateBotWebhookJSON struct {
	Data *DataJSON `validate:"required"`
}

func (e *UpdateBotWebhookJSON) Validate() error {
	if err := e.Data.Validate(); err != nil {
		return fmt.Errorf("field 'Data': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateBotWebhookJSON) CRC() uint32 {
	return uint32(0x8317c0c3)
}

func (*UpdateBotWebhookJSON) ImplementsUpdate() {}

func (e *UpdateBotWebhookJSON) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	return buf.Result()
}

func (e *UpdateBotWebhookJSON) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Data.Encode())
	return buf.Result()
}

type UpdateChatParticipantAdd struct {
	ChatId    int32 `validate:"required"`
	Date      int32 `validate:"required"`
	InviterId int32 `validate:"required"`
	UserId    int32 `validate:"required"`
	Version   int32 `validate:"required"`
}

func (e *UpdateChatParticipantAdd) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.InviterId == 0 {
		return fmt.Errorf("field 'InviterId' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*UpdateChatParticipantAdd) CRC() uint32 {
	return uint32(0xea4b0e5c)
}

func (*UpdateChatParticipantAdd) ImplementsUpdate() {}

func (e *UpdateChatParticipantAdd) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *UpdateChatParticipantAdd) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutInt(e.InviterId)
	buf.PutInt(e.UserId)
	buf.PutInt(e.Version)
	return buf.Result()
}

type UpdateEncryptedMessagesRead struct {
	ChatId  int32 `validate:"required"`
	Date    int32 `validate:"required"`
	MaxDate int32 `validate:"required"`
}

func (e *UpdateEncryptedMessagesRead) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.MaxDate == 0 {
		return fmt.Errorf("field 'MaxDate' is not set")
	} // builtin_check

	return nil
}

func (*UpdateEncryptedMessagesRead) CRC() uint32 {
	return uint32(0x38fe25b7)
}

func (*UpdateEncryptedMessagesRead) ImplementsUpdate() {}

func (e *UpdateEncryptedMessagesRead) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutInt(e.MaxDate)
	return buf.Result()
}

func (e *UpdateEncryptedMessagesRead) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	buf.PutInt(e.MaxDate)
	return buf.Result()
}

type Updates interface {
	serialize.TL
	ImplementsUpdates()
	Validate() error
}

type UpdateShortSentMessage struct {
	Date            int32           `validate:"required"`
	Entities        []MessageEntity `flag:"7"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Id              int32           `validate:"required"`
	Media           MessageMedia    `flag:"9"`
	Out             bool            `flag:"1,encoded_in_bitflags"`
	Pts             int32           `validate:"required"`
	PtsCount        int32           `validate:"required"`
}

func (e *UpdateShortSentMessage) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateShortSentMessage) CRC() uint32 {
	return uint32(0x11f1331c)
}

func (*UpdateShortSentMessage) ImplementsUpdates() {}

func (e *UpdateShortSentMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Out) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.Media) {
		flag |= 1 << 9
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.Media) {
		buf.PutRawBytes(e.Media.Encode())
	}
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

func (e *UpdateShortSentMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Out != false {
		flag |= 1 << 1
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 7
	}
	if e.Media.Validate() == nil {
		flag |= 1 << 9
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if e.Media.Validate() == nil {
		buf.PutRawBytes(e.Media.Encode())
	}
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	return buf.Result()
}

type UpdateShortMessage struct {
	Date            int32             `validate:"required"`
	Entities        []MessageEntity   `flag:"7"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	FwdFrom         *MessageFwdHeader `flag:"2"`
	Id              int32             `validate:"required"`
	MediaUnread     bool              `flag:"5,encoded_in_bitflags"`
	Mentioned       bool              `flag:"4,encoded_in_bitflags"`
	Message         string            `validate:"required"`
	Out             bool              `flag:"1,encoded_in_bitflags"`
	Pts             int32             `validate:"required"`
	PtsCount        int32             `validate:"required"`
	ReplyToMsgId    int32             `flag:"3"`
	Silent          bool              `flag:"13,encoded_in_bitflags"`
	UserId          int32             `validate:"required"`
	ViaBotId        int32             `flag:"11"`
}

func (e *UpdateShortMessage) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	if e.UserId == 0 {
		return fmt.Errorf("field 'UserId' is not set")
	} // builtin_check

	return nil
}

func (*UpdateShortMessage) CRC() uint32 {
	return uint32(0x914fbf11)
}

func (*UpdateShortMessage) ImplementsUpdates() {}

func (e *UpdateShortMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Out) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.FwdFrom) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Mentioned) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.MediaUnread) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ViaBotId) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.FwdFrom) {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	buf.PutInt(e.Id)
	buf.PutString(e.Message)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutInt(e.UserId)
	if !zero.IsZeroVal(e.ViaBotId) {
		buf.PutInt(e.ViaBotId)
	}
	return buf.Result()
}

func (e *UpdateShortMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Out != false {
		flag |= 1 << 1
	}
	if e.FwdFrom.Validate() == nil {
		flag |= 1 << 2
	}
	if e.ReplyToMsgId != 0 {
		flag |= 1 << 3
	}
	if e.Mentioned != false {
		flag |= 1 << 4
	}
	if e.MediaUnread != false {
		flag |= 1 << 5
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 7
	}
	if e.ViaBotId != 0 {
		flag |= 1 << 11
	}
	if e.Silent != false {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	if e.FwdFrom.Validate() == nil {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	buf.PutInt(e.Id)
	buf.PutString(e.Message)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	if e.ReplyToMsgId != 0 {
		buf.PutInt(e.ReplyToMsgId)
	}
	buf.PutInt(e.UserId)
	if e.ViaBotId != 0 {
		buf.PutInt(e.ViaBotId)
	}
	return buf.Result()
}

type UpdatesObj struct {
	Chats   []Chat   `validate:"required"`
	Date    int32    `validate:"required"`
	Seq     int32    `validate:"required"`
	Updates []Update `validate:"required"`
	Users   []User   `validate:"required"`
}

func (e *UpdatesObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Seq == 0 {
		return fmt.Errorf("field 'Seq' is not set")
	} // builtin_check

	if len(e.Updates) == 0 {
		return fmt.Errorf("field 'Updates' is not set")
	} // slice_len_check
	for _, item := range e.Updates {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Updates': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesObj) CRC() uint32 {
	return uint32(0x74ae4240)
}

func (*UpdatesObj) ImplementsUpdates() {}

func (e *UpdatesObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	buf.PutVector(e.Updates)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	buf.PutVector(e.Updates)
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdatesCombined struct {
	Chats    []Chat   `validate:"required"`
	Date     int32    `validate:"required"`
	Seq      int32    `validate:"required"`
	SeqStart int32    `validate:"required"`
	Updates  []Update `validate:"required"`
	Users    []User   `validate:"required"`
}

func (e *UpdatesCombined) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Seq == 0 {
		return fmt.Errorf("field 'Seq' is not set")
	} // builtin_check

	if e.SeqStart == 0 {
		return fmt.Errorf("field 'SeqStart' is not set")
	} // builtin_check

	if len(e.Updates) == 0 {
		return fmt.Errorf("field 'Updates' is not set")
	} // slice_len_check
	for _, item := range e.Updates {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Updates': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesCombined) CRC() uint32 {
	return uint32(0x725b04c3)
}

func (*UpdatesCombined) ImplementsUpdates() {}

func (e *UpdatesCombined) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	buf.PutInt(e.SeqStart)
	buf.PutVector(e.Updates)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesCombined) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	buf.PutInt(e.SeqStart)
	buf.PutVector(e.Updates)
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdateShort struct {
	Date   int32  `validate:"required"`
	Update Update `validate:"required"`
}

func (e *UpdateShort) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if err := e.Update.Validate(); err != nil {
		return fmt.Errorf("field 'Update': %w", err)
	} // type_iter_check

	return nil
}

func (*UpdateShort) CRC() uint32 {
	return uint32(0x78d4dec1)
}

func (*UpdateShort) ImplementsUpdates() {}

func (e *UpdateShort) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.Update.Encode())
	return buf.Result()
}

func (e *UpdateShort) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.Update.Encode())
	return buf.Result()
}

type UpdateShortChatMessage struct {
	ChatId          int32             `validate:"required"`
	Date            int32             `validate:"required"`
	Entities        []MessageEntity   `flag:"7"`
	__flagsPosition struct{}          // flags param position `validate:"required"`
	FromId          int32             `validate:"required"`
	FwdFrom         *MessageFwdHeader `flag:"2"`
	Id              int32             `validate:"required"`
	MediaUnread     bool              `flag:"5,encoded_in_bitflags"`
	Mentioned       bool              `flag:"4,encoded_in_bitflags"`
	Message         string            `validate:"required"`
	Out             bool              `flag:"1,encoded_in_bitflags"`
	Pts             int32             `validate:"required"`
	PtsCount        int32             `validate:"required"`
	ReplyToMsgId    int32             `flag:"3"`
	Silent          bool              `flag:"13,encoded_in_bitflags"`
	ViaBotId        int32             `flag:"11"`
}

func (e *UpdateShortChatMessage) Validate() error {
	if e.ChatId == 0 {
		return fmt.Errorf("field 'ChatId' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.FromId == 0 {
		return fmt.Errorf("field 'FromId' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if e.PtsCount == 0 {
		return fmt.Errorf("field 'PtsCount' is not set")
	} // builtin_check

	return nil
}

func (*UpdateShortChatMessage) CRC() uint32 {
	return uint32(0x16812688)
}

func (*UpdateShortChatMessage) ImplementsUpdates() {}

func (e *UpdateShortChatMessage) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Out) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.FwdFrom) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Mentioned) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.MediaUnread) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.ViaBotId) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.Silent) {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutInt(e.FromId)
	if !zero.IsZeroVal(e.FwdFrom) {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	buf.PutInt(e.Id)
	buf.PutString(e.Message)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	if !zero.IsZeroVal(e.ReplyToMsgId) {
		buf.PutInt(e.ReplyToMsgId)
	}
	if !zero.IsZeroVal(e.ViaBotId) {
		buf.PutInt(e.ViaBotId)
	}
	return buf.Result()
}

func (e *UpdateShortChatMessage) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Out != false {
		flag |= 1 << 1
	}
	if e.FwdFrom.Validate() == nil {
		flag |= 1 << 2
	}
	if e.ReplyToMsgId != 0 {
		flag |= 1 << 3
	}
	if e.Mentioned != false {
		flag |= 1 << 4
	}
	if e.MediaUnread != false {
		flag |= 1 << 5
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 7
	}
	if e.ViaBotId != 0 {
		flag |= 1 << 11
	}
	if e.Silent != false {
		flag |= 1 << 13
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.ChatId)
	buf.PutInt(e.Date)
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutInt(e.FromId)
	if e.FwdFrom.Validate() == nil {
		buf.PutRawBytes(e.FwdFrom.Encode())
	}
	buf.PutInt(e.Id)
	buf.PutString(e.Message)
	buf.PutInt(e.Pts)
	buf.PutInt(e.PtsCount)
	if e.ReplyToMsgId != 0 {
		buf.PutInt(e.ReplyToMsgId)
	}
	if e.ViaBotId != 0 {
		buf.PutInt(e.ViaBotId)
	}
	return buf.Result()
}

type UpdatesTooLong struct{}

func (e *UpdatesTooLong) Validate() error {
	return nil
}

func (*UpdatesTooLong) CRC() uint32 {
	return uint32(0xe317af7e)
}

func (*UpdatesTooLong) ImplementsUpdates() {}

func (e *UpdatesTooLong) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UpdatesTooLong) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UrlAuthResult interface {
	serialize.TL
	ImplementsUrlAuthResult()
	Validate() error
}

type UrlAuthResultRequest struct {
	Bot                User     `validate:"required"`
	Domain             string   `validate:"required"`
	__flagsPosition    struct{} // flags param position `validate:"required"`
	RequestWriteAccess bool     `flag:"0,encoded_in_bitflags"`
}

func (e *UrlAuthResultRequest) Validate() error {
	if err := e.Bot.Validate(); err != nil {
		return fmt.Errorf("field 'Bot': %w", err)
	} // type_iter_check

	if e.Domain == "" {
		return fmt.Errorf("field 'Domain' is not set")
	} // builtin_check

	return nil
}

func (*UrlAuthResultRequest) CRC() uint32 {
	return uint32(0x92d33a0e)
}

func (*UrlAuthResultRequest) ImplementsUrlAuthResult() {}

func (e *UrlAuthResultRequest) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.RequestWriteAccess) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutString(e.Domain)
	buf.PutUint(flag)
	return buf.Result()
}

func (e *UrlAuthResultRequest) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.RequestWriteAccess != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Bot.Encode())
	buf.PutString(e.Domain)
	buf.PutUint(flag)
	return buf.Result()
}

type UrlAuthResultAccepted struct {
	Url string `validate:"required"`
}

func (e *UrlAuthResultAccepted) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*UrlAuthResultAccepted) CRC() uint32 {
	return uint32(0x8f8c0e4e)
}

func (*UrlAuthResultAccepted) ImplementsUrlAuthResult() {}

func (e *UrlAuthResultAccepted) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *UrlAuthResultAccepted) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

type UrlAuthResultDefault struct{}

func (e *UrlAuthResultDefault) Validate() error {
	return nil
}

func (*UrlAuthResultDefault) CRC() uint32 {
	return uint32(0xa9d6db1f)
}

func (*UrlAuthResultDefault) ImplementsUrlAuthResult() {}

func (e *UrlAuthResultDefault) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UrlAuthResultDefault) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type User interface {
	serialize.TL
	ImplementsUser()
	Validate() error
}

type UserObj struct {
	AccessHash           int64                `flag:"0"`
	ApplyMinPhoto        bool                 `flag:"25,encoded_in_bitflags"`
	Bot                  bool                 `flag:"14,encoded_in_bitflags"`
	BotChatHistory       bool                 `flag:"15,encoded_in_bitflags"`
	BotInfoVersion       int32                `flag:"14"`
	BotInlineGeo         bool                 `flag:"21,encoded_in_bitflags"`
	BotInlinePlaceholder string               `flag:"19"`
	BotNochats           bool                 `flag:"16,encoded_in_bitflags"`
	Contact              bool                 `flag:"11,encoded_in_bitflags"`
	Deleted              bool                 `flag:"13,encoded_in_bitflags"`
	FirstName            string               `flag:"1"`
	__flagsPosition      struct{}             // flags param position `validate:"required"`
	Id                   int32                `validate:"required"`
	LangCode             string               `flag:"22"`
	LastName             string               `flag:"2"`
	Min                  bool                 `flag:"20,encoded_in_bitflags"`
	MutualContact        bool                 `flag:"12,encoded_in_bitflags"`
	Phone                string               `flag:"4"`
	Photo                UserProfilePhoto     `flag:"5"`
	Restricted           bool                 `flag:"18,encoded_in_bitflags"`
	RestrictionReason    []*RestrictionReason `flag:"18"`
	Scam                 bool                 `flag:"24,encoded_in_bitflags"`
	Self                 bool                 `flag:"10,encoded_in_bitflags"`
	Status               UserStatus           `flag:"6"`
	Support              bool                 `flag:"23,encoded_in_bitflags"`
	Username             string               `flag:"3"`
	Verified             bool                 `flag:"17,encoded_in_bitflags"`
}

func (e *UserObj) Validate() error {

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*UserObj) CRC() uint32 {
	return uint32(0x938458c1)
}

func (*UserObj) ImplementsUser() {}

func (e *UserObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.AccessHash) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.FirstName) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.LastName) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Username) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Phone) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.Status) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Self) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.Contact) {
		flag |= 1 << 11
	}
	if !zero.IsZeroVal(e.MutualContact) {
		flag |= 1 << 12
	}
	if !zero.IsZeroVal(e.Deleted) {
		flag |= 1 << 13
	}
	if !zero.IsZeroVal(e.Bot) || !zero.IsZeroVal(e.BotInfoVersion) {
		flag |= 1 << 14
	}
	if !zero.IsZeroVal(e.BotChatHistory) {
		flag |= 1 << 15
	}
	if !zero.IsZeroVal(e.BotNochats) {
		flag |= 1 << 16
	}
	if !zero.IsZeroVal(e.Verified) {
		flag |= 1 << 17
	}
	if !zero.IsZeroVal(e.Restricted) || !zero.IsZeroVal(e.RestrictionReason) {
		flag |= 1 << 18
	}
	if !zero.IsZeroVal(e.BotInlinePlaceholder) {
		flag |= 1 << 19
	}
	if !zero.IsZeroVal(e.Min) {
		flag |= 1 << 20
	}
	if !zero.IsZeroVal(e.BotInlineGeo) {
		flag |= 1 << 21
	}
	if !zero.IsZeroVal(e.LangCode) {
		flag |= 1 << 22
	}
	if !zero.IsZeroVal(e.Support) {
		flag |= 1 << 23
	}
	if !zero.IsZeroVal(e.Scam) {
		flag |= 1 << 24
	}
	if !zero.IsZeroVal(e.ApplyMinPhoto) {
		flag |= 1 << 25
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.AccessHash) {
		buf.PutLong(e.AccessHash)
	}
	if !zero.IsZeroVal(e.BotInfoVersion) {
		buf.PutInt(e.BotInfoVersion)
	}
	if !zero.IsZeroVal(e.BotInlinePlaceholder) {
		buf.PutString(e.BotInlinePlaceholder)
	}
	if !zero.IsZeroVal(e.FirstName) {
		buf.PutString(e.FirstName)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if !zero.IsZeroVal(e.LangCode) {
		buf.PutString(e.LangCode)
	}
	if !zero.IsZeroVal(e.LastName) {
		buf.PutString(e.LastName)
	}
	if !zero.IsZeroVal(e.Phone) {
		buf.PutString(e.Phone)
	}
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if !zero.IsZeroVal(e.RestrictionReason) {
		buf.PutVector(e.RestrictionReason)
	}
	if !zero.IsZeroVal(e.Status) {
		buf.PutRawBytes(e.Status.Encode())
	}
	if !zero.IsZeroVal(e.Username) {
		buf.PutString(e.Username)
	}
	return buf.Result()
}

func (e *UserObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.AccessHash != 0 {
		flag |= 1 << 0
	}
	if e.FirstName != "" {
		flag |= 1 << 1
	}
	if e.LastName != "" {
		flag |= 1 << 2
	}
	if e.Username != "" {
		flag |= 1 << 3
	}
	if e.Phone != "" {
		flag |= 1 << 4
	}
	if e.Photo.Validate() == nil {
		flag |= 1 << 5
	}
	if e.Status.Validate() == nil {
		flag |= 1 << 6
	}
	if e.Self != false {
		flag |= 1 << 10
	}
	if e.Contact != false {
		flag |= 1 << 11
	}
	if e.MutualContact != false {
		flag |= 1 << 12
	}
	if e.Deleted != false {
		flag |= 1 << 13
	}
	if e.Bot != false || e.BotInfoVersion != 0 {
		flag |= 1 << 14
	}
	if e.BotChatHistory != false {
		flag |= 1 << 15
	}
	if e.BotNochats != false {
		flag |= 1 << 16
	}
	if e.Verified != false {
		flag |= 1 << 17
	}
	if e.Restricted != false || len(e.RestrictionReason) > 0 {
		flag |= 1 << 18
	}
	if e.BotInlinePlaceholder != "" {
		flag |= 1 << 19
	}
	if e.Min != false {
		flag |= 1 << 20
	}
	if e.BotInlineGeo != false {
		flag |= 1 << 21
	}
	if e.LangCode != "" {
		flag |= 1 << 22
	}
	if e.Support != false {
		flag |= 1 << 23
	}
	if e.Scam != false {
		flag |= 1 << 24
	}
	if e.ApplyMinPhoto != false {
		flag |= 1 << 25
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.AccessHash != 0 {
		buf.PutLong(e.AccessHash)
	}
	if e.BotInfoVersion != 0 {
		buf.PutInt(e.BotInfoVersion)
	}
	if e.BotInlinePlaceholder != "" {
		buf.PutString(e.BotInlinePlaceholder)
	}
	if e.FirstName != "" {
		buf.PutString(e.FirstName)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	if e.LangCode != "" {
		buf.PutString(e.LangCode)
	}
	if e.LastName != "" {
		buf.PutString(e.LastName)
	}
	if e.Phone != "" {
		buf.PutString(e.Phone)
	}
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if len(e.RestrictionReason) > 0 {
		buf.PutVector(e.RestrictionReason)
	}
	if e.Status.Validate() == nil {
		buf.PutRawBytes(e.Status.Encode())
	}
	if e.Username != "" {
		buf.PutString(e.Username)
	}
	return buf.Result()
}

type UserEmpty struct {
	Id int32 `validate:"required"`
}

func (e *UserEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*UserEmpty) CRC() uint32 {
	return uint32(0x200250ba)
}

func (*UserEmpty) ImplementsUser() {}

func (e *UserEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

func (e *UserEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Id)
	return buf.Result()
}

type UserProfilePhoto interface {
	serialize.TL
	ImplementsUserProfilePhoto()
	Validate() error
}

type UserProfilePhotoObj struct {
	DcId            int32         `validate:"required"`
	__flagsPosition struct{}      // flags param position `validate:"required"`
	HasVideo        bool          `flag:"0,encoded_in_bitflags"`
	PhotoBig        *FileLocation `validate:"required"`
	PhotoId         int64         `validate:"required"`
	PhotoSmall      *FileLocation `validate:"required"`
}

func (e *UserProfilePhotoObj) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if err := e.PhotoBig.Validate(); err != nil {
		return fmt.Errorf("field 'PhotoBig': %w", err)
	} // type_iter_check

	if e.PhotoId == 0 {
		return fmt.Errorf("field 'PhotoId' is not set")
	} // builtin_check

	if err := e.PhotoSmall.Validate(); err != nil {
		return fmt.Errorf("field 'PhotoSmall': %w", err)
	} // type_iter_check

	return nil
}

func (*UserProfilePhotoObj) CRC() uint32 {
	return uint32(0x69d3ab26)
}

func (*UserProfilePhotoObj) ImplementsUserProfilePhoto() {}

func (e *UserProfilePhotoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.HasVideo) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.PhotoBig.Encode())
	buf.PutLong(e.PhotoId)
	buf.PutRawBytes(e.PhotoSmall.Encode())
	return buf.Result()
}

func (e *UserProfilePhotoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.HasVideo != false {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutUint(flag)
	buf.PutRawBytes(e.PhotoBig.Encode())
	buf.PutLong(e.PhotoId)
	buf.PutRawBytes(e.PhotoSmall.Encode())
	return buf.Result()
}

type UserProfilePhotoEmpty struct{}

func (e *UserProfilePhotoEmpty) Validate() error {
	return nil
}

func (*UserProfilePhotoEmpty) CRC() uint32 {
	return uint32(0x4f11bae1)
}

func (*UserProfilePhotoEmpty) ImplementsUserProfilePhoto() {}

func (e *UserProfilePhotoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UserProfilePhotoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UserStatus interface {
	serialize.TL
	ImplementsUserStatus()
	Validate() error
}

type UserStatusOffline struct {
	WasOnline int32 `validate:"required"`
}

func (e *UserStatusOffline) Validate() error {
	if e.WasOnline == 0 {
		return fmt.Errorf("field 'WasOnline' is not set")
	} // builtin_check

	return nil
}

func (*UserStatusOffline) CRC() uint32 {
	return uint32(0x8c703f)
}

func (*UserStatusOffline) ImplementsUserStatus() {}

func (e *UserStatusOffline) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.WasOnline)
	return buf.Result()
}

func (e *UserStatusOffline) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.WasOnline)
	return buf.Result()
}

type UserStatusEmpty struct{}

func (e *UserStatusEmpty) Validate() error {
	return nil
}

func (*UserStatusEmpty) CRC() uint32 {
	return uint32(0x9d05049)
}

func (*UserStatusEmpty) ImplementsUserStatus() {}

func (e *UserStatusEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UserStatusEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UserStatusOnline struct {
	Expires int32 `validate:"required"`
}

func (e *UserStatusOnline) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	return nil
}

func (*UserStatusOnline) CRC() uint32 {
	return uint32(0xedb93949)
}

func (*UserStatusOnline) ImplementsUserStatus() {}

func (e *UserStatusOnline) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

func (e *UserStatusOnline) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

type UserStatusLastWeek struct{}

func (e *UserStatusLastWeek) Validate() error {
	return nil
}

func (*UserStatusLastWeek) CRC() uint32 {
	return uint32(0x7bf09fc)
}

func (*UserStatusLastWeek) ImplementsUserStatus() {}

func (e *UserStatusLastWeek) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UserStatusLastWeek) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UserStatusRecently struct{}

func (e *UserStatusRecently) Validate() error {
	return nil
}

func (*UserStatusRecently) CRC() uint32 {
	return uint32(0xe26f42f1)
}

func (*UserStatusRecently) ImplementsUserStatus() {}

func (e *UserStatusRecently) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UserStatusRecently) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type UserStatusLastMonth struct{}

func (e *UserStatusLastMonth) Validate() error {
	return nil
}

func (*UserStatusLastMonth) CRC() uint32 {
	return uint32(0x77ebc742)
}

func (*UserStatusLastMonth) ImplementsUserStatus() {}

func (e *UserStatusLastMonth) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *UserStatusLastMonth) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type WallPaper interface {
	serialize.TL
	ImplementsWallPaper()
	Validate() error
}

type WallPaperNoFile struct {
	Dark            bool               `flag:"4,encoded_in_bitflags"`
	Default         bool               `flag:"1,encoded_in_bitflags"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	Settings        *WallPaperSettings `flag:"2"`
}

func (e *WallPaperNoFile) Validate() error {

	return nil
}

func (*WallPaperNoFile) CRC() uint32 {
	return uint32(0x8af40b25)
}

func (*WallPaperNoFile) ImplementsWallPaper() {}

func (e *WallPaperNoFile) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Default) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}

func (e *WallPaperNoFile) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Default != false {
		flag |= 1 << 1
	}
	if e.Settings.Validate() == nil {
		flag |= 1 << 2
	}
	if e.Dark != false {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.Settings.Validate() == nil {
		buf.PutRawBytes(e.Settings.Encode())
	}
	return buf.Result()
}

type WallPaperObj struct {
	AccessHash      int64              `validate:"required"`
	Creator         bool               `flag:"0,encoded_in_bitflags"`
	Dark            bool               `flag:"4,encoded_in_bitflags"`
	Default         bool               `flag:"1,encoded_in_bitflags"`
	Document        Document           `validate:"required"`
	__flagsPosition struct{}           // flags param position `validate:"required"`
	Id              int64              `validate:"required"`
	Pattern         bool               `flag:"3,encoded_in_bitflags"`
	Settings        *WallPaperSettings `flag:"2"`
	Slug            string             `validate:"required"`
}

func (e *WallPaperObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if err := e.Document.Validate(); err != nil {
		return fmt.Errorf("field 'Document': %w", err)
	} // type_iter_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Slug == "" {
		return fmt.Errorf("field 'Slug' is not set")
	} // builtin_check

	return nil
}

func (*WallPaperObj) CRC() uint32 {
	return uint32(0xa437c3ed)
}

func (*WallPaperObj) ImplementsWallPaper() {}

func (e *WallPaperObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Creator) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Default) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Settings) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Pattern) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Dark) {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutRawBytes(e.Document.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	if !zero.IsZeroVal(e.Settings) {
		buf.PutRawBytes(e.Settings.Encode())
	}
	buf.PutString(e.Slug)
	return buf.Result()
}

func (e *WallPaperObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Creator != false {
		flag |= 1 << 0
	}
	if e.Default != false {
		flag |= 1 << 1
	}
	if e.Settings.Validate() == nil {
		flag |= 1 << 2
	}
	if e.Pattern != false {
		flag |= 1 << 3
	}
	if e.Dark != false {
		flag |= 1 << 4
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutRawBytes(e.Document.Encode())
	buf.PutUint(flag)
	buf.PutLong(e.Id)
	if e.Settings.Validate() == nil {
		buf.PutRawBytes(e.Settings.Encode())
	}
	buf.PutString(e.Slug)
	return buf.Result()
}

type WebDocument interface {
	serialize.TL
	ImplementsWebDocument()
	Validate() error
}

type WebDocumentNoProxy struct {
	Attributes []DocumentAttribute `validate:"required"`
	MimeType   string              `validate:"required"`
	Size       int32               `validate:"required"`
	Url        string              `validate:"required"`
}

func (e *WebDocumentNoProxy) Validate() error {
	if len(e.Attributes) == 0 {
		return fmt.Errorf("field 'Attributes' is not set")
	} // slice_len_check
	for _, item := range e.Attributes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Attributes': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*WebDocumentNoProxy) CRC() uint32 {
	return uint32(0xf9c8bcc6)
}

func (*WebDocumentNoProxy) ImplementsWebDocument() {}

func (e *WebDocumentNoProxy) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *WebDocumentNoProxy) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

type WebDocumentObj struct {
	AccessHash int64               `validate:"required"`
	Attributes []DocumentAttribute `validate:"required"`
	MimeType   string              `validate:"required"`
	Size       int32               `validate:"required"`
	Url        string              `validate:"required"`
}

func (e *WebDocumentObj) Validate() error {
	if e.AccessHash == 0 {
		return fmt.Errorf("field 'AccessHash' is not set")
	} // builtin_check

	if len(e.Attributes) == 0 {
		return fmt.Errorf("field 'Attributes' is not set")
	} // slice_len_check
	for _, item := range e.Attributes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Attributes': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.MimeType == "" {
		return fmt.Errorf("field 'MimeType' is not set")
	} // builtin_check

	if e.Size == 0 {
		return fmt.Errorf("field 'Size' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*WebDocumentObj) CRC() uint32 {
	return uint32(0x1c570ed1)
}

func (*WebDocumentObj) ImplementsWebDocument() {}

func (e *WebDocumentObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *WebDocumentObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.AccessHash)
	buf.PutVector(e.Attributes)
	buf.PutString(e.MimeType)
	buf.PutInt(e.Size)
	buf.PutString(e.Url)
	return buf.Result()
}

type WebPage interface {
	serialize.TL
	ImplementsWebPage()
	Validate() error
}

type WebPageEmpty struct {
	Id int64 `validate:"required"`
}

func (e *WebPageEmpty) Validate() error {
	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*WebPageEmpty) CRC() uint32 {
	return uint32(0xeb1477e8)
}

func (*WebPageEmpty) ImplementsWebPage() {}

func (e *WebPageEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *WebPageEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutLong(e.Id)
	return buf.Result()
}

type WebPageNotModified struct {
	CachedPageViews int32    `flag:"0"`
	__flagsPosition struct{} // flags param position `validate:"required"`
}

func (e *WebPageNotModified) Validate() error {

	return nil
}

func (*WebPageNotModified) CRC() uint32 {
	return uint32(0x7311ca11)
}

func (*WebPageNotModified) ImplementsWebPage() {}

func (e *WebPageNotModified) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.CachedPageViews) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.CachedPageViews) {
		buf.PutInt(e.CachedPageViews)
	}
	buf.PutUint(flag)
	return buf.Result()
}

func (e *WebPageNotModified) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.CachedPageViews != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.CachedPageViews != 0 {
		buf.PutInt(e.CachedPageViews)
	}
	buf.PutUint(flag)
	return buf.Result()
}

type WebPageObj struct {
	Attributes      []*WebPageAttribute `flag:"12"`
	Author          string              `flag:"8"`
	CachedPage      *Page               `flag:"10"`
	Description     string              `flag:"3"`
	DisplayUrl      string              `validate:"required"`
	Document        Document            `flag:"9"`
	Duration        int32               `flag:"7"`
	EmbedHeight     int32               `flag:"6"`
	EmbedType       string              `flag:"5"`
	EmbedUrl        string              `flag:"5"`
	EmbedWidth      int32               `flag:"6"`
	__flagsPosition struct{}            // flags param position `validate:"required"`
	Hash            int32               `validate:"required"`
	Id              int64               `validate:"required"`
	Photo           Photo               `flag:"4"`
	SiteName        string              `flag:"1"`
	Title           string              `flag:"2"`
	Type            string              `flag:"0"`
	Url             string              `validate:"required"`
}

func (e *WebPageObj) Validate() error {
	if e.DisplayUrl == "" {
		return fmt.Errorf("field 'DisplayUrl' is not set")
	} // builtin_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*WebPageObj) CRC() uint32 {
	return uint32(0xe89c45b2)
}

func (*WebPageObj) ImplementsWebPage() {}

func (e *WebPageObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Type) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.SiteName) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Title) {
		flag |= 1 << 2
	}
	if !zero.IsZeroVal(e.Description) {
		flag |= 1 << 3
	}
	if !zero.IsZeroVal(e.Photo) {
		flag |= 1 << 4
	}
	if !zero.IsZeroVal(e.EmbedType) || !zero.IsZeroVal(e.EmbedUrl) {
		flag |= 1 << 5
	}
	if !zero.IsZeroVal(e.EmbedHeight) || !zero.IsZeroVal(e.EmbedWidth) {
		flag |= 1 << 6
	}
	if !zero.IsZeroVal(e.Duration) {
		flag |= 1 << 7
	}
	if !zero.IsZeroVal(e.Author) {
		flag |= 1 << 8
	}
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 9
	}
	if !zero.IsZeroVal(e.CachedPage) {
		flag |= 1 << 10
	}
	if !zero.IsZeroVal(e.Attributes) {
		flag |= 1 << 12
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Attributes) {
		buf.PutVector(e.Attributes)
	}
	if !zero.IsZeroVal(e.Author) {
		buf.PutString(e.Author)
	}
	if !zero.IsZeroVal(e.CachedPage) {
		buf.PutRawBytes(e.CachedPage.Encode())
	}
	if !zero.IsZeroVal(e.Description) {
		buf.PutString(e.Description)
	}
	buf.PutString(e.DisplayUrl)
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	if !zero.IsZeroVal(e.Duration) {
		buf.PutInt(e.Duration)
	}
	if !zero.IsZeroVal(e.EmbedHeight) {
		buf.PutInt(e.EmbedHeight)
	}
	if !zero.IsZeroVal(e.EmbedType) {
		buf.PutString(e.EmbedType)
	}
	if !zero.IsZeroVal(e.EmbedUrl) {
		buf.PutString(e.EmbedUrl)
	}
	if !zero.IsZeroVal(e.EmbedWidth) {
		buf.PutInt(e.EmbedWidth)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Hash)
	buf.PutLong(e.Id)
	if !zero.IsZeroVal(e.Photo) {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if !zero.IsZeroVal(e.SiteName) {
		buf.PutString(e.SiteName)
	}
	if !zero.IsZeroVal(e.Title) {
		buf.PutString(e.Title)
	}
	if !zero.IsZeroVal(e.Type) {
		buf.PutString(e.Type)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *WebPageObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Type != "" {
		flag |= 1 << 0
	}
	if e.SiteName != "" {
		flag |= 1 << 1
	}
	if e.Title != "" {
		flag |= 1 << 2
	}
	if e.Description != "" {
		flag |= 1 << 3
	}
	if e.Photo.Validate() == nil {
		flag |= 1 << 4
	}
	if e.EmbedType != "" || e.EmbedUrl != "" {
		flag |= 1 << 5
	}
	if e.EmbedHeight != 0 || e.EmbedWidth != 0 {
		flag |= 1 << 6
	}
	if e.Duration != 0 {
		flag |= 1 << 7
	}
	if e.Author != "" {
		flag |= 1 << 8
	}
	if e.Document.Validate() == nil {
		flag |= 1 << 9
	}
	if e.CachedPage.Validate() == nil {
		flag |= 1 << 10
	}
	if len(e.Attributes) > 0 {
		flag |= 1 << 12
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Attributes) > 0 {
		buf.PutVector(e.Attributes)
	}
	if e.Author != "" {
		buf.PutString(e.Author)
	}
	if e.CachedPage.Validate() == nil {
		buf.PutRawBytes(e.CachedPage.Encode())
	}
	if e.Description != "" {
		buf.PutString(e.Description)
	}
	buf.PutString(e.DisplayUrl)
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	if e.Duration != 0 {
		buf.PutInt(e.Duration)
	}
	if e.EmbedHeight != 0 {
		buf.PutInt(e.EmbedHeight)
	}
	if e.EmbedType != "" {
		buf.PutString(e.EmbedType)
	}
	if e.EmbedUrl != "" {
		buf.PutString(e.EmbedUrl)
	}
	if e.EmbedWidth != 0 {
		buf.PutInt(e.EmbedWidth)
	}
	buf.PutUint(flag)
	buf.PutInt(e.Hash)
	buf.PutLong(e.Id)
	if e.Photo.Validate() == nil {
		buf.PutRawBytes(e.Photo.Encode())
	}
	if e.SiteName != "" {
		buf.PutString(e.SiteName)
	}
	if e.Title != "" {
		buf.PutString(e.Title)
	}
	if e.Type != "" {
		buf.PutString(e.Type)
	}
	buf.PutString(e.Url)
	return buf.Result()
}

type WebPagePending struct {
	Date int32 `validate:"required"`
	Id   int64 `validate:"required"`
}

func (e *WebPagePending) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	return nil
}

func (*WebPagePending) CRC() uint32 {
	return uint32(0xc586da1c)
}

func (*WebPagePending) ImplementsWebPage() {}

func (e *WebPagePending) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutLong(e.Id)
	return buf.Result()
}

func (e *WebPagePending) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutLong(e.Id)
	return buf.Result()
}

type AccountThemes interface {
	serialize.TL
	ImplementsAccountThemes()
	Validate() error
}

type AccountThemesNotModified struct{}

func (e *AccountThemesNotModified) Validate() error {
	return nil
}

func (*AccountThemesNotModified) CRC() uint32 {
	return uint32(0xf41eb622)
}

func (*AccountThemesNotModified) ImplementsAccountThemes() {}

func (e *AccountThemesNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *AccountThemesNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type AccountThemesObj struct {
	Hash   int32    `validate:"required"`
	Themes []*Theme `validate:"required"`
}

func (e *AccountThemesObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Themes) == 0 {
		return fmt.Errorf("field 'Themes' is not set")
	} // slice_len_check
	for _, item := range e.Themes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Themes': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*AccountThemesObj) CRC() uint32 {
	return uint32(0x7f676421)
}

func (*AccountThemesObj) ImplementsAccountThemes() {}

func (e *AccountThemesObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Themes)
	return buf.Result()
}

func (e *AccountThemesObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Themes)
	return buf.Result()
}

type AccountWallPapers interface {
	serialize.TL
	ImplementsAccountWallPapers()
	Validate() error
}

type AccountWallPapersNotModified struct{}

func (e *AccountWallPapersNotModified) Validate() error {
	return nil
}

func (*AccountWallPapersNotModified) CRC() uint32 {
	return uint32(0x1c199183)
}

func (*AccountWallPapersNotModified) ImplementsAccountWallPapers() {}

func (e *AccountWallPapersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *AccountWallPapersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type AccountWallPapersObj struct {
	Hash       int32       `validate:"required"`
	Wallpapers []WallPaper `validate:"required"`
}

func (e *AccountWallPapersObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Wallpapers) == 0 {
		return fmt.Errorf("field 'Wallpapers' is not set")
	} // slice_len_check
	for _, item := range e.Wallpapers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Wallpapers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*AccountWallPapersObj) CRC() uint32 {
	return uint32(0x702b65a9)
}

func (*AccountWallPapersObj) ImplementsAccountWallPapers() {}

func (e *AccountWallPapersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Wallpapers)
	return buf.Result()
}

func (e *AccountWallPapersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Wallpapers)
	return buf.Result()
}

type AuthAuthorization interface {
	serialize.TL
	ImplementsAuthAuthorization()
	Validate() error
}

type AuthAuthorizationObj struct {
	__flagsPosition struct{} // flags param position `validate:"required"`
	TmpSessions     int32    `flag:"0"`
	User            User     `validate:"required"`
}

func (e *AuthAuthorizationObj) Validate() error {

	if err := e.User.Validate(); err != nil {
		return fmt.Errorf("field 'User': %w", err)
	} // type_iter_check

	return nil
}

func (*AuthAuthorizationObj) CRC() uint32 {
	return uint32(0xcd050916)
}

func (*AuthAuthorizationObj) ImplementsAuthAuthorization() {}

func (e *AuthAuthorizationObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TmpSessions) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.TmpSessions) {
		buf.PutInt(e.TmpSessions)
	}
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

func (e *AuthAuthorizationObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TmpSessions != 0 {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.TmpSessions != 0 {
		buf.PutInt(e.TmpSessions)
	}
	buf.PutRawBytes(e.User.Encode())
	return buf.Result()
}

type AuthAuthorizationSignUpRequired struct {
	__flagsPosition struct{}            // flags param position `validate:"required"`
	TermsOfService  *HelpTermsOfService `flag:"0"`
}

func (e *AuthAuthorizationSignUpRequired) Validate() error {

	return nil
}

func (*AuthAuthorizationSignUpRequired) CRC() uint32 {
	return uint32(0x44747e9a)
}

func (*AuthAuthorizationSignUpRequired) ImplementsAuthAuthorization() {}

func (e *AuthAuthorizationSignUpRequired) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.TermsOfService) {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if !zero.IsZeroVal(e.TermsOfService) {
		buf.PutRawBytes(e.TermsOfService.Encode())
	}
	return buf.Result()
}

func (e *AuthAuthorizationSignUpRequired) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.TermsOfService.Validate() == nil {
		flag |= 1 << 0
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	if e.TermsOfService.Validate() == nil {
		buf.PutRawBytes(e.TermsOfService.Encode())
	}
	return buf.Result()
}

type AuthLoginToken interface {
	serialize.TL
	ImplementsAuthLoginToken()
	Validate() error
}

type AuthLoginTokenMigrateTo struct {
	DcId  int32  `validate:"required"`
	Token []byte `validate:"required"`
}

func (e *AuthLoginTokenMigrateTo) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.Token) == 0 {
		return fmt.Errorf("field 'Token' is not set")
	} // byte_slice_check

	return nil
}

func (*AuthLoginTokenMigrateTo) CRC() uint32 {
	return uint32(0x68e9916)
}

func (*AuthLoginTokenMigrateTo) ImplementsAuthLoginToken() {}

func (e *AuthLoginTokenMigrateTo) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutMessage(e.Token)
	return buf.Result()
}

func (e *AuthLoginTokenMigrateTo) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutMessage(e.Token)
	return buf.Result()
}

type AuthLoginTokenSuccess struct {
	Authorization AuthAuthorization `validate:"required"`
}

func (e *AuthLoginTokenSuccess) Validate() error {
	if err := e.Authorization.Validate(); err != nil {
		return fmt.Errorf("field 'Authorization': %w", err)
	} // type_iter_check

	return nil
}

func (*AuthLoginTokenSuccess) CRC() uint32 {
	return uint32(0x390d5c5e)
}

func (*AuthLoginTokenSuccess) ImplementsAuthLoginToken() {}

func (e *AuthLoginTokenSuccess) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Authorization.Encode())
	return buf.Result()
}

func (e *AuthLoginTokenSuccess) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Authorization.Encode())
	return buf.Result()
}

type AuthLoginTokenObj struct {
	Expires int32  `validate:"required"`
	Token   []byte `validate:"required"`
}

func (e *AuthLoginTokenObj) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	if len(e.Token) == 0 {
		return fmt.Errorf("field 'Token' is not set")
	} // byte_slice_check

	return nil
}

func (*AuthLoginTokenObj) CRC() uint32 {
	return uint32(0x629f1980)
}

func (*AuthLoginTokenObj) ImplementsAuthLoginToken() {}

func (e *AuthLoginTokenObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	buf.PutMessage(e.Token)
	return buf.Result()
}

func (e *AuthLoginTokenObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	buf.PutMessage(e.Token)
	return buf.Result()
}

type AuthSentCodeType interface {
	serialize.TL
	ImplementsAuthSentCodeType()
	Validate() error
}

type AuthSentCodeTypeApp struct {
	Length int32 `validate:"required"`
}

func (e *AuthSentCodeTypeApp) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	return nil
}

func (*AuthSentCodeTypeApp) CRC() uint32 {
	return uint32(0x3dbb5986)
}

func (*AuthSentCodeTypeApp) ImplementsAuthSentCodeType() {}

func (e *AuthSentCodeTypeApp) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

func (e *AuthSentCodeTypeApp) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

type AuthSentCodeTypeFlashCall struct {
	Pattern string `validate:"required"`
}

func (e *AuthSentCodeTypeFlashCall) Validate() error {
	if e.Pattern == "" {
		return fmt.Errorf("field 'Pattern' is not set")
	} // builtin_check

	return nil
}

func (*AuthSentCodeTypeFlashCall) CRC() uint32 {
	return uint32(0xab03c6d9)
}

func (*AuthSentCodeTypeFlashCall) ImplementsAuthSentCodeType() {}

func (e *AuthSentCodeTypeFlashCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Pattern)
	return buf.Result()
}

func (e *AuthSentCodeTypeFlashCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Pattern)
	return buf.Result()
}

type AuthSentCodeTypeCall struct {
	Length int32 `validate:"required"`
}

func (e *AuthSentCodeTypeCall) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	return nil
}

func (*AuthSentCodeTypeCall) CRC() uint32 {
	return uint32(0x5353e5a7)
}

func (*AuthSentCodeTypeCall) ImplementsAuthSentCodeType() {}

func (e *AuthSentCodeTypeCall) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

func (e *AuthSentCodeTypeCall) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

type AuthSentCodeTypeSms struct {
	Length int32 `validate:"required"`
}

func (e *AuthSentCodeTypeSms) Validate() error {
	if e.Length == 0 {
		return fmt.Errorf("field 'Length' is not set")
	} // builtin_check

	return nil
}

func (*AuthSentCodeTypeSms) CRC() uint32 {
	return uint32(0xc000bba2)
}

func (*AuthSentCodeTypeSms) ImplementsAuthSentCodeType() {}

func (e *AuthSentCodeTypeSms) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

func (e *AuthSentCodeTypeSms) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Length)
	return buf.Result()
}

type ChannelsChannelParticipants interface {
	serialize.TL
	ImplementsChannelsChannelParticipants()
	Validate() error
}

type ChannelsChannelParticipantsObj struct {
	Count        int32                `validate:"required"`
	Participants []ChannelParticipant `validate:"required"`
	Users        []User               `validate:"required"`
}

func (e *ChannelsChannelParticipantsObj) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Participants) == 0 {
		return fmt.Errorf("field 'Participants' is not set")
	} // slice_len_check
	for _, item := range e.Participants {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Participants': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ChannelsChannelParticipantsObj) CRC() uint32 {
	return uint32(0xf56ee2a8)
}

func (*ChannelsChannelParticipantsObj) ImplementsChannelsChannelParticipants() {}

func (e *ChannelsChannelParticipantsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Participants)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ChannelsChannelParticipantsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Participants)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ChannelsChannelParticipantsNotModified struct{}

func (e *ChannelsChannelParticipantsNotModified) Validate() error {
	return nil
}

func (*ChannelsChannelParticipantsNotModified) CRC() uint32 {
	return uint32(0xf0173fe9)
}

func (*ChannelsChannelParticipantsNotModified) ImplementsChannelsChannelParticipants() {}

func (e *ChannelsChannelParticipantsNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ChannelsChannelParticipantsNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ContactsBlocked interface {
	serialize.TL
	ImplementsContactsBlocked()
	Validate() error
}

type ContactsBlockedObj struct {
	Blocked []*ContactBlocked `validate:"required"`
	Users   []User            `validate:"required"`
}

func (e *ContactsBlockedObj) Validate() error {
	if len(e.Blocked) == 0 {
		return fmt.Errorf("field 'Blocked' is not set")
	} // slice_len_check
	for _, item := range e.Blocked {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocked': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ContactsBlockedObj) CRC() uint32 {
	return uint32(0x1c138d15)
}

func (*ContactsBlockedObj) ImplementsContactsBlocked() {}

func (e *ContactsBlockedObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocked)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsBlockedObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocked)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsBlockedSlice struct {
	Blocked []*ContactBlocked `validate:"required"`
	Count   int32             `validate:"required"`
	Users   []User            `validate:"required"`
}

func (e *ContactsBlockedSlice) Validate() error {
	if len(e.Blocked) == 0 {
		return fmt.Errorf("field 'Blocked' is not set")
	} // slice_len_check
	for _, item := range e.Blocked {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Blocked': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ContactsBlockedSlice) CRC() uint32 {
	return uint32(0x900802a1)
}

func (*ContactsBlockedSlice) ImplementsContactsBlocked() {}

func (e *ContactsBlockedSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocked)
	buf.PutInt(e.Count)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsBlockedSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Blocked)
	buf.PutInt(e.Count)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsContacts interface {
	serialize.TL
	ImplementsContactsContacts()
	Validate() error
}

type ContactsContactsObj struct {
	Contacts   []*Contact `validate:"required"`
	SavedCount int32      `validate:"required"`
	Users      []User     `validate:"required"`
}

func (e *ContactsContactsObj) Validate() error {
	if len(e.Contacts) == 0 {
		return fmt.Errorf("field 'Contacts' is not set")
	} // slice_len_check
	for _, item := range e.Contacts {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Contacts': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.SavedCount == 0 {
		return fmt.Errorf("field 'SavedCount' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ContactsContactsObj) CRC() uint32 {
	return uint32(0xeae87e42)
}

func (*ContactsContactsObj) ImplementsContactsContacts() {}

func (e *ContactsContactsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Contacts)
	buf.PutInt(e.SavedCount)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsContactsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Contacts)
	buf.PutInt(e.SavedCount)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsContactsNotModified struct{}

func (e *ContactsContactsNotModified) Validate() error {
	return nil
}

func (*ContactsContactsNotModified) CRC() uint32 {
	return uint32(0xb74ba9d2)
}

func (*ContactsContactsNotModified) ImplementsContactsContacts() {}

func (e *ContactsContactsNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ContactsContactsNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ContactsTopPeers interface {
	serialize.TL
	ImplementsContactsTopPeers()
	Validate() error
}

type ContactsTopPeersObj struct {
	Categories []*TopPeerCategoryPeers `validate:"required"`
	Chats      []Chat                  `validate:"required"`
	Users      []User                  `validate:"required"`
}

func (e *ContactsTopPeersObj) Validate() error {
	if len(e.Categories) == 0 {
		return fmt.Errorf("field 'Categories' is not set")
	} // slice_len_check
	for _, item := range e.Categories {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Categories': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*ContactsTopPeersObj) CRC() uint32 {
	return uint32(0x70b772a8)
}

func (*ContactsTopPeersObj) ImplementsContactsTopPeers() {}

func (e *ContactsTopPeersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Categories)
	buf.PutVector(e.Chats)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *ContactsTopPeersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Categories)
	buf.PutVector(e.Chats)
	buf.PutVector(e.Users)
	return buf.Result()
}

type ContactsTopPeersNotModified struct{}

func (e *ContactsTopPeersNotModified) Validate() error {
	return nil
}

func (*ContactsTopPeersNotModified) CRC() uint32 {
	return uint32(0xde266ef5)
}

func (*ContactsTopPeersNotModified) ImplementsContactsTopPeers() {}

func (e *ContactsTopPeersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ContactsTopPeersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type ContactsTopPeersDisabled struct{}

func (e *ContactsTopPeersDisabled) Validate() error {
	return nil
}

func (*ContactsTopPeersDisabled) CRC() uint32 {
	return uint32(0xb52c939d)
}

func (*ContactsTopPeersDisabled) ImplementsContactsTopPeers() {}

func (e *ContactsTopPeersDisabled) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *ContactsTopPeersDisabled) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type HelpAppUpdate interface {
	serialize.TL
	ImplementsHelpAppUpdate()
	Validate() error
}

type HelpAppUpdateObj struct {
	CanNotSkip      bool            `flag:"0,encoded_in_bitflags"`
	Document        Document        `flag:"1"`
	Entities        []MessageEntity `validate:"required"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Id              int32           `validate:"required"`
	Text            string          `validate:"required"`
	Url             string          `flag:"2"`
	Version         string          `validate:"required"`
}

func (e *HelpAppUpdateObj) Validate() error {
	if len(e.Entities) == 0 {
		return fmt.Errorf("field 'Entities' is not set")
	} // slice_len_check
	for _, item := range e.Entities {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Entities': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Id == 0 {
		return fmt.Errorf("field 'Id' is not set")
	} // builtin_check

	if e.Text == "" {
		return fmt.Errorf("field 'Text' is not set")
	} // builtin_check

	if e.Version == "" {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*HelpAppUpdateObj) CRC() uint32 {
	return uint32(0x1da7158f)
}

func (*HelpAppUpdateObj) ImplementsHelpAppUpdate() {}

func (e *HelpAppUpdateObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.CanNotSkip) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Document) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.Url) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Document) {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.Text)
	if !zero.IsZeroVal(e.Url) {
		buf.PutString(e.Url)
	}
	buf.PutString(e.Version)
	return buf.Result()
}

func (e *HelpAppUpdateObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.CanNotSkip != false {
		flag |= 1 << 0
	}
	if e.Document.Validate() == nil {
		flag |= 1 << 1
	}
	if e.Url != "" {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if e.Document.Validate() == nil {
		buf.PutRawBytes(e.Document.Encode())
	}
	buf.PutVector(e.Entities)
	buf.PutUint(flag)
	buf.PutInt(e.Id)
	buf.PutString(e.Text)
	if e.Url != "" {
		buf.PutString(e.Url)
	}
	buf.PutString(e.Version)
	return buf.Result()
}

type HelpNoAppUpdate struct{}

func (e *HelpNoAppUpdate) Validate() error {
	return nil
}

func (*HelpNoAppUpdate) CRC() uint32 {
	return uint32(0xc45a6536)
}

func (*HelpNoAppUpdate) ImplementsHelpAppUpdate() {}

func (e *HelpNoAppUpdate) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *HelpNoAppUpdate) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type HelpDeepLinkInfo interface {
	serialize.TL
	ImplementsHelpDeepLinkInfo()
	Validate() error
}

type HelpDeepLinkInfoEmpty struct{}

func (e *HelpDeepLinkInfoEmpty) Validate() error {
	return nil
}

func (*HelpDeepLinkInfoEmpty) CRC() uint32 {
	return uint32(0x66afa166)
}

func (*HelpDeepLinkInfoEmpty) ImplementsHelpDeepLinkInfo() {}

func (e *HelpDeepLinkInfoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *HelpDeepLinkInfoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type HelpDeepLinkInfoObj struct {
	Entities        []MessageEntity `flag:"1"`
	__flagsPosition struct{}        // flags param position `validate:"required"`
	Message         string          `validate:"required"`
	UpdateApp       bool            `flag:"0,encoded_in_bitflags"`
}

func (e *HelpDeepLinkInfoObj) Validate() error {

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*HelpDeepLinkInfoObj) CRC() uint32 {
	return uint32(0x6a4ee832)
}

func (*HelpDeepLinkInfoObj) ImplementsHelpDeepLinkInfo() {}

func (e *HelpDeepLinkInfoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.UpdateApp) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Entities) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if !zero.IsZeroVal(e.Entities) {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	return buf.Result()
}

func (e *HelpDeepLinkInfoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.UpdateApp != false {
		flag |= 1 << 0
	}
	if len(e.Entities) > 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	if len(e.Entities) > 0 {
		buf.PutVector(e.Entities)
	}
	buf.PutUint(flag)
	buf.PutString(e.Message)
	return buf.Result()
}

type HelpPassportConfig interface {
	serialize.TL
	ImplementsHelpPassportConfig()
	Validate() error
}

type HelpPassportConfigObj struct {
	CountriesLangs *DataJSON `validate:"required"`
	Hash           int32     `validate:"required"`
}

func (e *HelpPassportConfigObj) Validate() error {
	if err := e.CountriesLangs.Validate(); err != nil {
		return fmt.Errorf("field 'CountriesLangs': %w", err)
	} // type_iter_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	return nil
}

func (*HelpPassportConfigObj) CRC() uint32 {
	return uint32(0xa098d6af)
}

func (*HelpPassportConfigObj) ImplementsHelpPassportConfig() {}

func (e *HelpPassportConfigObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.CountriesLangs.Encode())
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (e *HelpPassportConfigObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.CountriesLangs.Encode())
	buf.PutInt(e.Hash)
	return buf.Result()
}

type HelpPassportConfigNotModified struct{}

func (e *HelpPassportConfigNotModified) Validate() error {
	return nil
}

func (*HelpPassportConfigNotModified) CRC() uint32 {
	return uint32(0xbfb9f457)
}

func (*HelpPassportConfigNotModified) ImplementsHelpPassportConfig() {}

func (e *HelpPassportConfigNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *HelpPassportConfigNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type HelpPromoData interface {
	serialize.TL
	ImplementsHelpPromoData()
	Validate() error
}

type HelpPromoDataObj struct {
	Chats           []Chat   `validate:"required"`
	Expires         int32    `validate:"required"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Peer            Peer     `validate:"required"`
	Proxy           bool     `flag:"0,encoded_in_bitflags"`
	PsaMessage      string   `flag:"2"`
	PsaType         string   `flag:"1"`
	Users           []User   `validate:"required"`
}

func (e *HelpPromoDataObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	if err := e.Peer.Validate(); err != nil {
		return fmt.Errorf("field 'Peer': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*HelpPromoDataObj) CRC() uint32 {
	return uint32(0x8c39793f)
}

func (*HelpPromoDataObj) ImplementsHelpPromoData() {}

func (e *HelpPromoDataObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Proxy) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.PsaType) {
		flag |= 1 << 1
	}
	if !zero.IsZeroVal(e.PsaMessage) {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Expires)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if !zero.IsZeroVal(e.PsaMessage) {
		buf.PutString(e.PsaMessage)
	}
	if !zero.IsZeroVal(e.PsaType) {
		buf.PutString(e.PsaType)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *HelpPromoDataObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Proxy != false {
		flag |= 1 << 0
	}
	if e.PsaType != "" {
		flag |= 1 << 1
	}
	if e.PsaMessage != "" {
		flag |= 1 << 2
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Expires)
	buf.PutUint(flag)
	buf.PutRawBytes(e.Peer.Encode())
	if e.PsaMessage != "" {
		buf.PutString(e.PsaMessage)
	}
	if e.PsaType != "" {
		buf.PutString(e.PsaType)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

type HelpPromoDataEmpty struct {
	Expires int32 `validate:"required"`
}

func (e *HelpPromoDataEmpty) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	return nil
}

func (*HelpPromoDataEmpty) CRC() uint32 {
	return uint32(0x98f6ac75)
}

func (*HelpPromoDataEmpty) ImplementsHelpPromoData() {}

func (e *HelpPromoDataEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

func (e *HelpPromoDataEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

type HelpTermsOfServiceUpdate interface {
	serialize.TL
	ImplementsHelpTermsOfServiceUpdate()
	Validate() error
}

type HelpTermsOfServiceUpdateObj struct {
	Expires        int32               `validate:"required"`
	TermsOfService *HelpTermsOfService `validate:"required"`
}

func (e *HelpTermsOfServiceUpdateObj) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	if err := e.TermsOfService.Validate(); err != nil {
		return fmt.Errorf("field 'TermsOfService': %w", err)
	} // type_iter_check

	return nil
}

func (*HelpTermsOfServiceUpdateObj) CRC() uint32 {
	return uint32(0x28ecf961)
}

func (*HelpTermsOfServiceUpdateObj) ImplementsHelpTermsOfServiceUpdate() {}

func (e *HelpTermsOfServiceUpdateObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	buf.PutRawBytes(e.TermsOfService.Encode())
	return buf.Result()
}

func (e *HelpTermsOfServiceUpdateObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	buf.PutRawBytes(e.TermsOfService.Encode())
	return buf.Result()
}

type HelpTermsOfServiceUpdateEmpty struct {
	Expires int32 `validate:"required"`
}

func (e *HelpTermsOfServiceUpdateEmpty) Validate() error {
	if e.Expires == 0 {
		return fmt.Errorf("field 'Expires' is not set")
	} // builtin_check

	return nil
}

func (*HelpTermsOfServiceUpdateEmpty) CRC() uint32 {
	return uint32(0xe3309f7f)
}

func (*HelpTermsOfServiceUpdateEmpty) ImplementsHelpTermsOfServiceUpdate() {}

func (e *HelpTermsOfServiceUpdateEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

func (e *HelpTermsOfServiceUpdateEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Expires)
	return buf.Result()
}

type HelpUserInfo interface {
	serialize.TL
	ImplementsHelpUserInfo()
	Validate() error
}

type HelpUserInfoObj struct {
	Author   string          `validate:"required"`
	Date     int32           `validate:"required"`
	Entities []MessageEntity `validate:"required"`
	Message  string          `validate:"required"`
}

func (e *HelpUserInfoObj) Validate() error {
	if e.Author == "" {
		return fmt.Errorf("field 'Author' is not set")
	} // builtin_check

	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if len(e.Entities) == 0 {
		return fmt.Errorf("field 'Entities' is not set")
	} // slice_len_check
	for _, item := range e.Entities {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Entities': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Message == "" {
		return fmt.Errorf("field 'Message' is not set")
	} // builtin_check

	return nil
}

func (*HelpUserInfoObj) CRC() uint32 {
	return uint32(0x1eb3758)
}

func (*HelpUserInfoObj) ImplementsHelpUserInfo() {}

func (e *HelpUserInfoObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Author)
	buf.PutInt(e.Date)
	buf.PutVector(e.Entities)
	buf.PutString(e.Message)
	return buf.Result()
}

func (e *HelpUserInfoObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Author)
	buf.PutInt(e.Date)
	buf.PutVector(e.Entities)
	buf.PutString(e.Message)
	return buf.Result()
}

type HelpUserInfoEmpty struct{}

func (e *HelpUserInfoEmpty) Validate() error {
	return nil
}

func (*HelpUserInfoEmpty) CRC() uint32 {
	return uint32(0xf3ae2eed)
}

func (*HelpUserInfoEmpty) ImplementsHelpUserInfo() {}

func (e *HelpUserInfoEmpty) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *HelpUserInfoEmpty) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesAllStickers interface {
	serialize.TL
	ImplementsMessagesAllStickers()
	Validate() error
}

type MessagesAllStickersObj struct {
	Hash int32         `validate:"required"`
	Sets []*StickerSet `validate:"required"`
}

func (e *MessagesAllStickersObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Sets) == 0 {
		return fmt.Errorf("field 'Sets' is not set")
	} // slice_len_check
	for _, item := range e.Sets {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sets': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesAllStickersObj) CRC() uint32 {
	return uint32(0xedfd405f)
}

func (*MessagesAllStickersObj) ImplementsMessagesAllStickers() {}

func (e *MessagesAllStickersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	return buf.Result()
}

func (e *MessagesAllStickersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	return buf.Result()
}

type MessagesAllStickersNotModified struct{}

func (e *MessagesAllStickersNotModified) Validate() error {
	return nil
}

func (*MessagesAllStickersNotModified) CRC() uint32 {
	return uint32(0xe86602c3)
}

func (*MessagesAllStickersNotModified) ImplementsMessagesAllStickers() {}

func (e *MessagesAllStickersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesAllStickersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesChats interface {
	serialize.TL
	ImplementsMessagesChats()
	Validate() error
}

type MessagesChatsSlice struct {
	Chats []Chat `validate:"required"`
	Count int32  `validate:"required"`
}

func (e *MessagesChatsSlice) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	return nil
}

func (*MessagesChatsSlice) CRC() uint32 {
	return uint32(0x9cd81144)
}

func (*MessagesChatsSlice) ImplementsMessagesChats() {}

func (e *MessagesChatsSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	return buf.Result()
}

func (e *MessagesChatsSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	return buf.Result()
}

type MessagesChatsObj struct {
	Chats []Chat `validate:"required"`
}

func (e *MessagesChatsObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesChatsObj) CRC() uint32 {
	return uint32(0x64ff9fd5)
}

func (*MessagesChatsObj) ImplementsMessagesChats() {}

func (e *MessagesChatsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

func (e *MessagesChatsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	return buf.Result()
}

type MessagesDhConfig interface {
	serialize.TL
	ImplementsMessagesDhConfig()
	Validate() error
}

type MessagesDhConfigNotModified struct {
	Random []byte `validate:"required"`
}

func (e *MessagesDhConfigNotModified) Validate() error {
	if len(e.Random) == 0 {
		return fmt.Errorf("field 'Random' is not set")
	} // byte_slice_check

	return nil
}

func (*MessagesDhConfigNotModified) CRC() uint32 {
	return uint32(0xc0e24635)
}

func (*MessagesDhConfigNotModified) ImplementsMessagesDhConfig() {}

func (e *MessagesDhConfigNotModified) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Random)
	return buf.Result()
}

func (e *MessagesDhConfigNotModified) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Random)
	return buf.Result()
}

type MessagesDhConfigObj struct {
	G       int32  `validate:"required"`
	P       []byte `validate:"required"`
	Random  []byte `validate:"required"`
	Version int32  `validate:"required"`
}

func (e *MessagesDhConfigObj) Validate() error {
	if e.G == 0 {
		return fmt.Errorf("field 'G' is not set")
	} // builtin_check

	if len(e.P) == 0 {
		return fmt.Errorf("field 'P' is not set")
	} // byte_slice_check

	if len(e.Random) == 0 {
		return fmt.Errorf("field 'Random' is not set")
	} // byte_slice_check

	if e.Version == 0 {
		return fmt.Errorf("field 'Version' is not set")
	} // builtin_check

	return nil
}

func (*MessagesDhConfigObj) CRC() uint32 {
	return uint32(0x2c221edd)
}

func (*MessagesDhConfigObj) ImplementsMessagesDhConfig() {}

func (e *MessagesDhConfigObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.G)
	buf.PutMessage(e.P)
	buf.PutMessage(e.Random)
	buf.PutInt(e.Version)
	return buf.Result()
}

func (e *MessagesDhConfigObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.G)
	buf.PutMessage(e.P)
	buf.PutMessage(e.Random)
	buf.PutInt(e.Version)
	return buf.Result()
}

type MessagesDialogs interface {
	serialize.TL
	ImplementsMessagesDialogs()
	Validate() error
}

type MessagesDialogsSlice struct {
	Chats    []Chat    `validate:"required"`
	Count    int32     `validate:"required"`
	Dialogs  []Dialog  `validate:"required"`
	Messages []Message `validate:"required"`
	Users    []User    `validate:"required"`
}

func (e *MessagesDialogsSlice) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Dialogs) == 0 {
		return fmt.Errorf("field 'Dialogs' is not set")
	} // slice_len_check
	for _, item := range e.Dialogs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Dialogs': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesDialogsSlice) CRC() uint32 {
	return uint32(0x71e094f3)
}

func (*MessagesDialogsSlice) ImplementsMessagesDialogs() {}

func (e *MessagesDialogsSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesDialogsSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesDialogsObj struct {
	Chats    []Chat    `validate:"required"`
	Dialogs  []Dialog  `validate:"required"`
	Messages []Message `validate:"required"`
	Users    []User    `validate:"required"`
}

func (e *MessagesDialogsObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Dialogs) == 0 {
		return fmt.Errorf("field 'Dialogs' is not set")
	} // slice_len_check
	for _, item := range e.Dialogs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Dialogs': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesDialogsObj) CRC() uint32 {
	return uint32(0x15ba6c40)
}

func (*MessagesDialogsObj) ImplementsMessagesDialogs() {}

func (e *MessagesDialogsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesDialogsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Dialogs)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesDialogsNotModified struct {
	Count int32 `validate:"required"`
}

func (e *MessagesDialogsNotModified) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	return nil
}

func (*MessagesDialogsNotModified) CRC() uint32 {
	return uint32(0xf0e3e596)
}

func (*MessagesDialogsNotModified) ImplementsMessagesDialogs() {}

func (e *MessagesDialogsNotModified) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

func (e *MessagesDialogsNotModified) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

type MessagesFavedStickers interface {
	serialize.TL
	ImplementsMessagesFavedStickers()
	Validate() error
}

type MessagesFavedStickersNotModified struct{}

func (e *MessagesFavedStickersNotModified) Validate() error {
	return nil
}

func (*MessagesFavedStickersNotModified) CRC() uint32 {
	return uint32(0x9e8fa6d3)
}

func (*MessagesFavedStickersNotModified) ImplementsMessagesFavedStickers() {}

func (e *MessagesFavedStickersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesFavedStickersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesFavedStickersObj struct {
	Hash     int32          `validate:"required"`
	Packs    []*StickerPack `validate:"required"`
	Stickers []Document     `validate:"required"`
}

func (e *MessagesFavedStickersObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Packs) == 0 {
		return fmt.Errorf("field 'Packs' is not set")
	} // slice_len_check
	for _, item := range e.Packs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Packs': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Stickers) == 0 {
		return fmt.Errorf("field 'Stickers' is not set")
	} // slice_len_check
	for _, item := range e.Stickers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Stickers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesFavedStickersObj) CRC() uint32 {
	return uint32(0xf37f2f16)
}

func (*MessagesFavedStickersObj) ImplementsMessagesFavedStickers() {}

func (e *MessagesFavedStickersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Packs)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

func (e *MessagesFavedStickersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Packs)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

type MessagesFeaturedStickers interface {
	serialize.TL
	ImplementsMessagesFeaturedStickers()
	Validate() error
}

type MessagesFeaturedStickersObj struct {
	Count  int32               `validate:"required"`
	Hash   int32               `validate:"required"`
	Sets   []StickerSetCovered `validate:"required"`
	Unread []int64             `validate:"required"`
}

func (e *MessagesFeaturedStickersObj) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Sets) == 0 {
		return fmt.Errorf("field 'Sets' is not set")
	} // slice_len_check
	for _, item := range e.Sets {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sets': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Unread) == 0 {
		return fmt.Errorf("field 'Unread' is not set")
	} // slice_len_check
	for _, item := range e.Unread {
		if item == 0 {
			return fmt.Errorf("field 'Unread' is not set")
		} // builtin_check
	} // subitem_check

	return nil
}

func (*MessagesFeaturedStickersObj) CRC() uint32 {
	return uint32(0xb6abc341)
}

func (*MessagesFeaturedStickersObj) ImplementsMessagesFeaturedStickers() {}

func (e *MessagesFeaturedStickersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	buf.PutVector(e.Unread)
	return buf.Result()
}

func (e *MessagesFeaturedStickersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	buf.PutVector(e.Unread)
	return buf.Result()
}

type MessagesFeaturedStickersNotModified struct {
	Count int32 `validate:"required"`
}

func (e *MessagesFeaturedStickersNotModified) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	return nil
}

func (*MessagesFeaturedStickersNotModified) CRC() uint32 {
	return uint32(0xc6dc0c66)
}

func (*MessagesFeaturedStickersNotModified) ImplementsMessagesFeaturedStickers() {}

func (e *MessagesFeaturedStickersNotModified) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

func (e *MessagesFeaturedStickersNotModified) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

type MessagesFoundStickerSets interface {
	serialize.TL
	ImplementsMessagesFoundStickerSets()
	Validate() error
}

type MessagesFoundStickerSetsObj struct {
	Hash int32               `validate:"required"`
	Sets []StickerSetCovered `validate:"required"`
}

func (e *MessagesFoundStickerSetsObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Sets) == 0 {
		return fmt.Errorf("field 'Sets' is not set")
	} // slice_len_check
	for _, item := range e.Sets {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sets': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesFoundStickerSetsObj) CRC() uint32 {
	return uint32(0x5108d648)
}

func (*MessagesFoundStickerSetsObj) ImplementsMessagesFoundStickerSets() {}

func (e *MessagesFoundStickerSetsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	return buf.Result()
}

func (e *MessagesFoundStickerSetsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Sets)
	return buf.Result()
}

type MessagesFoundStickerSetsNotModified struct{}

func (e *MessagesFoundStickerSetsNotModified) Validate() error {
	return nil
}

func (*MessagesFoundStickerSetsNotModified) CRC() uint32 {
	return uint32(0xd54b65d)
}

func (*MessagesFoundStickerSetsNotModified) ImplementsMessagesFoundStickerSets() {}

func (e *MessagesFoundStickerSetsNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesFoundStickerSetsNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesMessages interface {
	serialize.TL
	ImplementsMessagesMessages()
	Validate() error
}

type MessagesMessagesObj struct {
	Chats    []Chat    `validate:"required"`
	Messages []Message `validate:"required"`
	Users    []User    `validate:"required"`
}

func (e *MessagesMessagesObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesMessagesObj) CRC() uint32 {
	return uint32(0x8c718e87)
}

func (*MessagesMessagesObj) ImplementsMessagesMessages() {}

func (e *MessagesMessagesObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesMessagesObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.Messages)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesMessagesNotModified struct {
	Count int32 `validate:"required"`
}

func (e *MessagesMessagesNotModified) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	return nil
}

func (*MessagesMessagesNotModified) CRC() uint32 {
	return uint32(0x74535f21)
}

func (*MessagesMessagesNotModified) ImplementsMessagesMessages() {}

func (e *MessagesMessagesNotModified) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

func (e *MessagesMessagesNotModified) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	return buf.Result()
}

type MessagesChannelMessages struct {
	Chats           []Chat    `validate:"required"`
	Count           int32     `validate:"required"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Inexact         bool      `flag:"1,encoded_in_bitflags"`
	Messages        []Message `validate:"required"`
	Pts             int32     `validate:"required"`
	Users           []User    `validate:"required"`
}

func (e *MessagesChannelMessages) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesChannelMessages) CRC() uint32 {
	return uint32(0x99262e37)
}

func (*MessagesChannelMessages) ImplementsMessagesMessages() {}

func (e *MessagesChannelMessages) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Inexact) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesChannelMessages) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Inexact != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	buf.PutInt(e.Pts)
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesMessagesSlice struct {
	Chats           []Chat    `validate:"required"`
	Count           int32     `validate:"required"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Inexact         bool      `flag:"1,encoded_in_bitflags"`
	Messages        []Message `validate:"required"`
	NextRate        int32     `flag:"0"`
	Users           []User    `validate:"required"`
}

func (e *MessagesMessagesSlice) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesMessagesSlice) CRC() uint32 {
	return uint32(0xc8edce1e)
}

func (*MessagesMessagesSlice) ImplementsMessagesMessages() {}

func (e *MessagesMessagesSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.NextRate) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Inexact) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	if !zero.IsZeroVal(e.NextRate) {
		buf.PutInt(e.NextRate)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *MessagesMessagesSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.NextRate != 0 {
		flag |= 1 << 0
	}
	if e.Inexact != false {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutInt(e.Count)
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	if e.NextRate != 0 {
		buf.PutInt(e.NextRate)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

type MessagesRecentStickers interface {
	serialize.TL
	ImplementsMessagesRecentStickers()
	Validate() error
}

type MessagesRecentStickersNotModified struct{}

func (e *MessagesRecentStickersNotModified) Validate() error {
	return nil
}

func (*MessagesRecentStickersNotModified) CRC() uint32 {
	return uint32(0xb17f890)
}

func (*MessagesRecentStickersNotModified) ImplementsMessagesRecentStickers() {}

func (e *MessagesRecentStickersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesRecentStickersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesRecentStickersObj struct {
	Dates    []int32        `validate:"required"`
	Hash     int32          `validate:"required"`
	Packs    []*StickerPack `validate:"required"`
	Stickers []Document     `validate:"required"`
}

func (e *MessagesRecentStickersObj) Validate() error {
	if len(e.Dates) == 0 {
		return fmt.Errorf("field 'Dates' is not set")
	} // slice_len_check
	for _, item := range e.Dates {
		if item == 0 {
			return fmt.Errorf("field 'Dates' is not set")
		} // builtin_check
	} // subitem_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Packs) == 0 {
		return fmt.Errorf("field 'Packs' is not set")
	} // slice_len_check
	for _, item := range e.Packs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Packs': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Stickers) == 0 {
		return fmt.Errorf("field 'Stickers' is not set")
	} // slice_len_check
	for _, item := range e.Stickers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Stickers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesRecentStickersObj) CRC() uint32 {
	return uint32(0x22f3afb3)
}

func (*MessagesRecentStickersObj) ImplementsMessagesRecentStickers() {}

func (e *MessagesRecentStickersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Dates)
	buf.PutInt(e.Hash)
	buf.PutVector(e.Packs)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

func (e *MessagesRecentStickersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Dates)
	buf.PutInt(e.Hash)
	buf.PutVector(e.Packs)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

type MessagesSavedGifs interface {
	serialize.TL
	ImplementsMessagesSavedGifs()
	Validate() error
}

type MessagesSavedGifsObj struct {
	Gifs []Document `validate:"required"`
	Hash int32      `validate:"required"`
}

func (e *MessagesSavedGifsObj) Validate() error {
	if len(e.Gifs) == 0 {
		return fmt.Errorf("field 'Gifs' is not set")
	} // slice_len_check
	for _, item := range e.Gifs {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Gifs': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	return nil
}

func (*MessagesSavedGifsObj) CRC() uint32 {
	return uint32(0x2e0709a5)
}

func (*MessagesSavedGifsObj) ImplementsMessagesSavedGifs() {}

func (e *MessagesSavedGifsObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Gifs)
	buf.PutInt(e.Hash)
	return buf.Result()
}

func (e *MessagesSavedGifsObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Gifs)
	buf.PutInt(e.Hash)
	return buf.Result()
}

type MessagesSavedGifsNotModified struct{}

func (e *MessagesSavedGifsNotModified) Validate() error {
	return nil
}

func (*MessagesSavedGifsNotModified) CRC() uint32 {
	return uint32(0xe8025ca2)
}

func (*MessagesSavedGifsNotModified) ImplementsMessagesSavedGifs() {}

func (e *MessagesSavedGifsNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesSavedGifsNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesSentEncryptedMessage interface {
	serialize.TL
	ImplementsMessagesSentEncryptedMessage()
	Validate() error
}

type MessagesSentEncryptedFile struct {
	Date int32         `validate:"required"`
	File EncryptedFile `validate:"required"`
}

func (e *MessagesSentEncryptedFile) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if err := e.File.Validate(); err != nil {
		return fmt.Errorf("field 'File': %w", err)
	} // type_iter_check

	return nil
}

func (*MessagesSentEncryptedFile) CRC() uint32 {
	return uint32(0x9493ff32)
}

func (*MessagesSentEncryptedFile) ImplementsMessagesSentEncryptedMessage() {}

func (e *MessagesSentEncryptedFile) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.File.Encode())
	return buf.Result()
}

func (e *MessagesSentEncryptedFile) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutRawBytes(e.File.Encode())
	return buf.Result()
}

type MessagesSentEncryptedMessageObj struct {
	Date int32 `validate:"required"`
}

func (e *MessagesSentEncryptedMessageObj) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	return nil
}

func (*MessagesSentEncryptedMessageObj) CRC() uint32 {
	return uint32(0x560f8935)
}

func (*MessagesSentEncryptedMessageObj) ImplementsMessagesSentEncryptedMessage() {}

func (e *MessagesSentEncryptedMessageObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	return buf.Result()
}

func (e *MessagesSentEncryptedMessageObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	return buf.Result()
}

type MessagesStickerSetInstallResult interface {
	serialize.TL
	ImplementsMessagesStickerSetInstallResult()
	Validate() error
}

type MessagesStickerSetInstallResultArchive struct {
	Sets []StickerSetCovered `validate:"required"`
}

func (e *MessagesStickerSetInstallResultArchive) Validate() error {
	if len(e.Sets) == 0 {
		return fmt.Errorf("field 'Sets' is not set")
	} // slice_len_check
	for _, item := range e.Sets {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Sets': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesStickerSetInstallResultArchive) CRC() uint32 {
	return uint32(0x35e410a8)
}

func (*MessagesStickerSetInstallResultArchive) ImplementsMessagesStickerSetInstallResult() {}

func (e *MessagesStickerSetInstallResultArchive) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Sets)
	return buf.Result()
}

func (e *MessagesStickerSetInstallResultArchive) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Sets)
	return buf.Result()
}

type MessagesStickerSetInstallResultSuccess struct{}

func (e *MessagesStickerSetInstallResultSuccess) Validate() error {
	return nil
}

func (*MessagesStickerSetInstallResultSuccess) CRC() uint32 {
	return uint32(0x38641628)
}

func (*MessagesStickerSetInstallResultSuccess) ImplementsMessagesStickerSetInstallResult() {}

func (e *MessagesStickerSetInstallResultSuccess) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesStickerSetInstallResultSuccess) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type MessagesStickers interface {
	serialize.TL
	ImplementsMessagesStickers()
	Validate() error
}

type MessagesStickersObj struct {
	Hash     int32      `validate:"required"`
	Stickers []Document `validate:"required"`
}

func (e *MessagesStickersObj) Validate() error {
	if e.Hash == 0 {
		return fmt.Errorf("field 'Hash' is not set")
	} // builtin_check

	if len(e.Stickers) == 0 {
		return fmt.Errorf("field 'Stickers' is not set")
	} // slice_len_check
	for _, item := range e.Stickers {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Stickers': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*MessagesStickersObj) CRC() uint32 {
	return uint32(0xe4599bbd)
}

func (*MessagesStickersObj) ImplementsMessagesStickers() {}

func (e *MessagesStickersObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

func (e *MessagesStickersObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Hash)
	buf.PutVector(e.Stickers)
	return buf.Result()
}

type MessagesStickersNotModified struct{}

func (e *MessagesStickersNotModified) Validate() error {
	return nil
}

func (*MessagesStickersNotModified) CRC() uint32 {
	return uint32(0xf1749a22)
}

func (*MessagesStickersNotModified) ImplementsMessagesStickers() {}

func (e *MessagesStickersNotModified) Encode() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

func (e *MessagesStickersNotModified) EncodeNonreflect() []byte {
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	return buf.Result()
}

type PaymentsPaymentResult interface {
	serialize.TL
	ImplementsPaymentsPaymentResult()
	Validate() error
}

type PaymentsPaymentResultObj struct {
	Updates Updates `validate:"required"`
}

func (e *PaymentsPaymentResultObj) Validate() error {
	if err := e.Updates.Validate(); err != nil {
		return fmt.Errorf("field 'Updates': %w", err)
	} // type_iter_check

	return nil
}

func (*PaymentsPaymentResultObj) CRC() uint32 {
	return uint32(0x4e5f810d)
}

func (*PaymentsPaymentResultObj) ImplementsPaymentsPaymentResult() {}

func (e *PaymentsPaymentResultObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Updates.Encode())
	return buf.Result()
}

func (e *PaymentsPaymentResultObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutRawBytes(e.Updates.Encode())
	return buf.Result()
}

type PaymentsPaymentVerificationNeeded struct {
	Url string `validate:"required"`
}

func (e *PaymentsPaymentVerificationNeeded) Validate() error {
	if e.Url == "" {
		return fmt.Errorf("field 'Url' is not set")
	} // builtin_check

	return nil
}

func (*PaymentsPaymentVerificationNeeded) CRC() uint32 {
	return uint32(0xd8411139)
}

func (*PaymentsPaymentVerificationNeeded) ImplementsPaymentsPaymentResult() {}

func (e *PaymentsPaymentVerificationNeeded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

func (e *PaymentsPaymentVerificationNeeded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutString(e.Url)
	return buf.Result()
}

type PhotosPhotos interface {
	serialize.TL
	ImplementsPhotosPhotos()
	Validate() error
}

type PhotosPhotosObj struct {
	Photos []Photo `validate:"required"`
	Users  []User  `validate:"required"`
}

func (e *PhotosPhotosObj) Validate() error {
	if len(e.Photos) == 0 {
		return fmt.Errorf("field 'Photos' is not set")
	} // slice_len_check
	for _, item := range e.Photos {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Photos': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PhotosPhotosObj) CRC() uint32 {
	return uint32(0x8dca6aa5)
}

func (*PhotosPhotosObj) ImplementsPhotosPhotos() {}

func (e *PhotosPhotosObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Photos)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PhotosPhotosObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Photos)
	buf.PutVector(e.Users)
	return buf.Result()
}

type PhotosPhotosSlice struct {
	Count  int32   `validate:"required"`
	Photos []Photo `validate:"required"`
	Users  []User  `validate:"required"`
}

func (e *PhotosPhotosSlice) Validate() error {
	if e.Count == 0 {
		return fmt.Errorf("field 'Count' is not set")
	} // builtin_check

	if len(e.Photos) == 0 {
		return fmt.Errorf("field 'Photos' is not set")
	} // slice_len_check
	for _, item := range e.Photos {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Photos': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*PhotosPhotosSlice) CRC() uint32 {
	return uint32(0x15051f54)
}

func (*PhotosPhotosSlice) ImplementsPhotosPhotos() {}

func (e *PhotosPhotosSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Photos)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *PhotosPhotosSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Count)
	buf.PutVector(e.Photos)
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdatesChannelDifference interface {
	serialize.TL
	ImplementsUpdatesChannelDifference()
	Validate() error
}

type UpdatesChannelDifferenceObj struct {
	Chats           []Chat    `validate:"required"`
	Final           bool      `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	NewMessages     []Message `validate:"required"`
	OtherUpdates    []Update  `validate:"required"`
	Pts             int32     `validate:"required"`
	Timeout         int32     `flag:"1"`
	Users           []User    `validate:"required"`
}

func (e *UpdatesChannelDifferenceObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.NewMessages) == 0 {
		return fmt.Errorf("field 'NewMessages' is not set")
	} // slice_len_check
	for _, item := range e.NewMessages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'NewMessages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.OtherUpdates) == 0 {
		return fmt.Errorf("field 'OtherUpdates' is not set")
	} // slice_len_check
	for _, item := range e.OtherUpdates {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'OtherUpdates': %w", err)
		} // type_iter_check
	} // subitem_check

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesChannelDifferenceObj) CRC() uint32 {
	return uint32(0x2064674e)
}

func (*UpdatesChannelDifferenceObj) ImplementsUpdatesChannelDifference() {}

func (e *UpdatesChannelDifferenceObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Final) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Timeout) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutUint(flag)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutInt(e.Pts)
	if !zero.IsZeroVal(e.Timeout) {
		buf.PutInt(e.Timeout)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesChannelDifferenceObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Final != false {
		flag |= 1 << 0
	}
	if e.Timeout != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutUint(flag)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutInt(e.Pts)
	if e.Timeout != 0 {
		buf.PutInt(e.Timeout)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdatesChannelDifferenceTooLong struct {
	Chats           []Chat    `validate:"required"`
	Dialog          Dialog    `validate:"required"`
	Final           bool      `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{}  // flags param position `validate:"required"`
	Messages        []Message `validate:"required"`
	Timeout         int32     `flag:"1"`
	Users           []User    `validate:"required"`
}

func (e *UpdatesChannelDifferenceTooLong) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.Dialog.Validate(); err != nil {
		return fmt.Errorf("field 'Dialog': %w", err)
	} // type_iter_check

	if len(e.Messages) == 0 {
		return fmt.Errorf("field 'Messages' is not set")
	} // slice_len_check
	for _, item := range e.Messages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Messages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesChannelDifferenceTooLong) CRC() uint32 {
	return uint32(0xa4bcc6fe)
}

func (*UpdatesChannelDifferenceTooLong) ImplementsUpdatesChannelDifference() {}

func (e *UpdatesChannelDifferenceTooLong) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Final) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Timeout) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.Dialog.Encode())
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	if !zero.IsZeroVal(e.Timeout) {
		buf.PutInt(e.Timeout)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesChannelDifferenceTooLong) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Final != false {
		flag |= 1 << 0
	}
	if e.Timeout != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.Dialog.Encode())
	buf.PutUint(flag)
	buf.PutVector(e.Messages)
	if e.Timeout != 0 {
		buf.PutInt(e.Timeout)
	}
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdatesChannelDifferenceEmpty struct {
	Final           bool     `flag:"0,encoded_in_bitflags"`
	__flagsPosition struct{} // flags param position `validate:"required"`
	Pts             int32    `validate:"required"`
	Timeout         int32    `flag:"1"`
}

func (e *UpdatesChannelDifferenceEmpty) Validate() error {

	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	return nil
}

func (*UpdatesChannelDifferenceEmpty) CRC() uint32 {
	return uint32(0x3e11affb)
}

func (*UpdatesChannelDifferenceEmpty) ImplementsUpdatesChannelDifference() {}

func (e *UpdatesChannelDifferenceEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if !zero.IsZeroVal(e.Final) {
		flag |= 1 << 0
	}
	if !zero.IsZeroVal(e.Timeout) {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Pts)
	if !zero.IsZeroVal(e.Timeout) {
		buf.PutInt(e.Timeout)
	}
	return buf.Result()
}

func (e *UpdatesChannelDifferenceEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	var flag uint32
	if e.Final != false {
		flag |= 1 << 0
	}
	if e.Timeout != 0 {
		flag |= 1 << 1
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutUint(flag)
	buf.PutInt(e.Pts)
	if e.Timeout != 0 {
		buf.PutInt(e.Timeout)
	}
	return buf.Result()
}

type UpdatesDifference interface {
	serialize.TL
	ImplementsUpdatesDifference()
	Validate() error
}

type UpdatesDifferenceEmpty struct {
	Date int32 `validate:"required"`
	Seq  int32 `validate:"required"`
}

func (e *UpdatesDifferenceEmpty) Validate() error {
	if e.Date == 0 {
		return fmt.Errorf("field 'Date' is not set")
	} // builtin_check

	if e.Seq == 0 {
		return fmt.Errorf("field 'Seq' is not set")
	} // builtin_check

	return nil
}

func (*UpdatesDifferenceEmpty) CRC() uint32 {
	return uint32(0x5d75a138)
}

func (*UpdatesDifferenceEmpty) ImplementsUpdatesDifference() {}

func (e *UpdatesDifferenceEmpty) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	return buf.Result()
}

func (e *UpdatesDifferenceEmpty) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Date)
	buf.PutInt(e.Seq)
	return buf.Result()
}

type UpdatesDifferenceTooLong struct {
	Pts int32 `validate:"required"`
}

func (e *UpdatesDifferenceTooLong) Validate() error {
	if e.Pts == 0 {
		return fmt.Errorf("field 'Pts' is not set")
	} // builtin_check

	return nil
}

func (*UpdatesDifferenceTooLong) CRC() uint32 {
	return uint32(0x4afe8f6d)
}

func (*UpdatesDifferenceTooLong) ImplementsUpdatesDifference() {}

func (e *UpdatesDifferenceTooLong) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	return buf.Result()
}

func (e *UpdatesDifferenceTooLong) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.Pts)
	return buf.Result()
}

type UpdatesDifferenceSlice struct {
	Chats                []Chat             `validate:"required"`
	IntermediateState    *UpdatesState      `validate:"required"`
	NewEncryptedMessages []EncryptedMessage `validate:"required"`
	NewMessages          []Message          `validate:"required"`
	OtherUpdates         []Update           `validate:"required"`
	Users                []User             `validate:"required"`
}

func (e *UpdatesDifferenceSlice) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.IntermediateState.Validate(); err != nil {
		return fmt.Errorf("field 'IntermediateState': %w", err)
	} // type_iter_check

	if len(e.NewEncryptedMessages) == 0 {
		return fmt.Errorf("field 'NewEncryptedMessages' is not set")
	} // slice_len_check
	for _, item := range e.NewEncryptedMessages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'NewEncryptedMessages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.NewMessages) == 0 {
		return fmt.Errorf("field 'NewMessages' is not set")
	} // slice_len_check
	for _, item := range e.NewMessages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'NewMessages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.OtherUpdates) == 0 {
		return fmt.Errorf("field 'OtherUpdates' is not set")
	} // slice_len_check
	for _, item := range e.OtherUpdates {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'OtherUpdates': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesDifferenceSlice) CRC() uint32 {
	return uint32(0xa8fb1981)
}

func (*UpdatesDifferenceSlice) ImplementsUpdatesDifference() {}

func (e *UpdatesDifferenceSlice) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.IntermediateState.Encode())
	buf.PutVector(e.NewEncryptedMessages)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesDifferenceSlice) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutRawBytes(e.IntermediateState.Encode())
	buf.PutVector(e.NewEncryptedMessages)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutVector(e.Users)
	return buf.Result()
}

type UpdatesDifferenceObj struct {
	Chats                []Chat             `validate:"required"`
	NewEncryptedMessages []EncryptedMessage `validate:"required"`
	NewMessages          []Message          `validate:"required"`
	OtherUpdates         []Update           `validate:"required"`
	State                *UpdatesState      `validate:"required"`
	Users                []User             `validate:"required"`
}

func (e *UpdatesDifferenceObj) Validate() error {
	if len(e.Chats) == 0 {
		return fmt.Errorf("field 'Chats' is not set")
	} // slice_len_check
	for _, item := range e.Chats {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Chats': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.NewEncryptedMessages) == 0 {
		return fmt.Errorf("field 'NewEncryptedMessages' is not set")
	} // slice_len_check
	for _, item := range e.NewEncryptedMessages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'NewEncryptedMessages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.NewMessages) == 0 {
		return fmt.Errorf("field 'NewMessages' is not set")
	} // slice_len_check
	for _, item := range e.NewMessages {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'NewMessages': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.OtherUpdates) == 0 {
		return fmt.Errorf("field 'OtherUpdates' is not set")
	} // slice_len_check
	for _, item := range e.OtherUpdates {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'OtherUpdates': %w", err)
		} // type_iter_check
	} // subitem_check

	if err := e.State.Validate(); err != nil {
		return fmt.Errorf("field 'State': %w", err)
	} // type_iter_check

	if len(e.Users) == 0 {
		return fmt.Errorf("field 'Users' is not set")
	} // slice_len_check
	for _, item := range e.Users {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'Users': %w", err)
		} // type_iter_check
	} // subitem_check

	return nil
}

func (*UpdatesDifferenceObj) CRC() uint32 {
	return uint32(0xf49ca0)
}

func (*UpdatesDifferenceObj) ImplementsUpdatesDifference() {}

func (e *UpdatesDifferenceObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.NewEncryptedMessages)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutRawBytes(e.State.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

func (e *UpdatesDifferenceObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutVector(e.Chats)
	buf.PutVector(e.NewEncryptedMessages)
	buf.PutVector(e.NewMessages)
	buf.PutVector(e.OtherUpdates)
	buf.PutRawBytes(e.State.Encode())
	buf.PutVector(e.Users)
	return buf.Result()
}

type UploadCdnFile interface {
	serialize.TL
	ImplementsUploadCdnFile()
	Validate() error
}

type UploadCdnFileReuploadNeeded struct {
	RequestToken []byte `validate:"required"`
}

func (e *UploadCdnFileReuploadNeeded) Validate() error {
	if len(e.RequestToken) == 0 {
		return fmt.Errorf("field 'RequestToken' is not set")
	} // byte_slice_check

	return nil
}

func (*UploadCdnFileReuploadNeeded) CRC() uint32 {
	return uint32(0xeea8e46e)
}

func (*UploadCdnFileReuploadNeeded) ImplementsUploadCdnFile() {}

func (e *UploadCdnFileReuploadNeeded) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.RequestToken)
	return buf.Result()
}

func (e *UploadCdnFileReuploadNeeded) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.RequestToken)
	return buf.Result()
}

type UploadCdnFileObj struct {
	Bytes []byte `validate:"required"`
}

func (e *UploadCdnFileObj) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	return nil
}

func (*UploadCdnFileObj) CRC() uint32 {
	return uint32(0xa99fca4f)
}

func (*UploadCdnFileObj) ImplementsUploadCdnFile() {}

func (e *UploadCdnFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	return buf.Result()
}

func (e *UploadCdnFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	return buf.Result()
}

type UploadFile interface {
	serialize.TL
	ImplementsUploadFile()
	Validate() error
}

type UploadFileCdnRedirect struct {
	DcId          int32       `validate:"required"`
	EncryptionIv  []byte      `validate:"required"`
	EncryptionKey []byte      `validate:"required"`
	FileHashes    []*FileHash `validate:"required"`
	FileToken     []byte      `validate:"required"`
}

func (e *UploadFileCdnRedirect) Validate() error {
	if e.DcId == 0 {
		return fmt.Errorf("field 'DcId' is not set")
	} // builtin_check

	if len(e.EncryptionIv) == 0 {
		return fmt.Errorf("field 'EncryptionIv' is not set")
	} // byte_slice_check

	if len(e.EncryptionKey) == 0 {
		return fmt.Errorf("field 'EncryptionKey' is not set")
	} // byte_slice_check

	if len(e.FileHashes) == 0 {
		return fmt.Errorf("field 'FileHashes' is not set")
	} // slice_len_check
	for _, item := range e.FileHashes {
		if err := item.Validate(); err != nil {
			return fmt.Errorf("field 'FileHashes': %w", err)
		} // type_iter_check
	} // subitem_check

	if len(e.FileToken) == 0 {
		return fmt.Errorf("field 'FileToken' is not set")
	} // byte_slice_check

	return nil
}

func (*UploadFileCdnRedirect) CRC() uint32 {
	return uint32(0xf18cda44)
}

func (*UploadFileCdnRedirect) ImplementsUploadFile() {}

func (e *UploadFileCdnRedirect) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutMessage(e.EncryptionIv)
	buf.PutMessage(e.EncryptionKey)
	buf.PutVector(e.FileHashes)
	buf.PutMessage(e.FileToken)
	return buf.Result()
}

func (e *UploadFileCdnRedirect) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutInt(e.DcId)
	buf.PutMessage(e.EncryptionIv)
	buf.PutMessage(e.EncryptionKey)
	buf.PutVector(e.FileHashes)
	buf.PutMessage(e.FileToken)
	return buf.Result()
}

type UploadFileObj struct {
	Bytes []byte          `validate:"required"`
	Mtime int32           `validate:"required"`
	Type  StorageFileType `validate:"required"`
}

func (e *UploadFileObj) Validate() error {
	if len(e.Bytes) == 0 {
		return fmt.Errorf("field 'Bytes' is not set")
	} // byte_slice_check

	if e.Mtime == 0 {
		return fmt.Errorf("field 'Mtime' is not set")
	} // builtin_check

	if e.Type == 0 {
		return fmt.Errorf("field 'Type' is not set")
	} // enum_check

	return nil
}

func (*UploadFileObj) CRC() uint32 {
	return uint32(0x96a18d5)
}

func (*UploadFileObj) ImplementsUploadFile() {}

func (e *UploadFileObj) Encode() []byte {
	if err := validator.New().Struct(e); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.Mtime)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}

func (e *UploadFileObj) EncodeNonreflect() []byte {
	if err := e.Validate(); err != nil {
		// return nil, fmt.Errorf("validator: %w", err)
		panic(err)
	}
	buf := serialize.NewEncoder()
	buf.PutUint(e.CRC())
	buf.PutMessage(e.Bytes)
	buf.PutInt(e.Mtime)
	buf.PutRawBytes(e.Type.Encode())
	return buf.Result()
}
