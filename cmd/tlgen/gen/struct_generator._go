package main

import (
	"os"
	"strconv"

	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"github.com/k0kubun/pp"
)

func _GenerateSpecificStructs(file *jen.File, data *FileStructure) error {
	for _, _type := range data.SingleInterfaceTypes {
		file.Add(GenerateStructDefinition(_type, nil, data)...)
	}

	return nil
}

func GenerateStructDefinition(def *StructObject, implements []string, data *FileStructure) []jen.Code {
	printer := pp.New()
	printer.SetOutput(os.Stderr)
	p := printer.Println

	total := make([]jen.Code, 0)

	fields := make([]jen.Code, len(def.Fields))
	atLeastOneFieldOptional := false
	maxFlagBit := 0
	putFuncs := make([]jen.Code, len(def.Fields))

	for i, field := range def.Fields {
		name := strcase.ToCamel(field.Name)
		typ := field.Type

		if name == "Flags" && typ == "bitflags" {
			name = "__flagsPosition"
		}

		f := jen.Id(name)
		putFuncId := ""
		if field.IsList {
			f = f.Index()
			putFuncId = "buf.PutVector"
		}

		switch typ {
		case "true", "Bool":
			f = f.Bool()
			putFuncId = "buf.PutBool"
		case "long":
			f = f.Int64()
			putFuncId = "buf.PutLong"
		case "double":
			f = f.Float64()
			putFuncId = "buf.PutDouble"
		case "int":
			f = f.Int32()
			putFuncId = "buf.PutInt"
		case "string":
			f = f.String()
			putFuncId = "buf.PutString"
		case "bytes":
			f = f.Index().Byte()
			putFuncId = "buf.PutMessage"
		case "bitflags":
			f = f.Struct().Comment("flags param position")
		default:
			putFuncId = "buf.PutRawBytes"

			name, generatedType := data.Declarations().Find(typ)
			switch generatedType {
			case typEnum, typInterface:
				f = f.Id(normalizeID(typ, false))
			case typStruct:
				f = f.Id("*" + normalizeID(typ, false))
			default:

				p(field, name, generatedType)
				panic("пробовали обработать '" + field.Type + "'")
			}
		}

		putFunc := jen.Null()
		if putFuncId == "buf.PutRawBytes" {
			putFunc = jen.Id(putFuncId).Call(jen.Id("e." + name).Dot("Encode").Call())
		} else if putFuncId != "" {
			putFunc = jen.Id(putFuncId).Call(jen.Id("e." + name))
		}

		tags := map[string]string{}
		if !field.IsOptional {
			tags["validate"] = "required"
		} else {
			tags["flag"] = strconv.Itoa(field.BitToTrigger)
			atLeastOneFieldOptional = true
			if maxFlagBit < field.BitToTrigger {
				maxFlagBit = field.BitToTrigger
			}

			putFunc = jen.If(jen.Op("!").Qual("github.com/vikyd/zero", "IsZeroVal").Call(jen.Id("e." + strcase.ToCamel(field.Name)))).Block(
				putFunc,
			)
		}

		f.Tag(tags)

		fields[i] = f
		putFuncs[i] = putFunc
	}

	interfaceName := ""
	for k, v := range data.Declarations().SpecificStructs {
		if v == def.Name {
			interfaceName = k
		}
	}
	if interfaceName == "" {
		panic("не нашли каноничное имя")
	}

	interfaceName = normalizeID(interfaceName, false)

	t := jen.Type().Id(interfaceName).Struct(
		fields...,
	)
	total = append(total, t, jen.Line())

	// CRC() uint23
	f := jen.Func().Params(jen.Id("e").Id("*" + interfaceName)).Id("CRC").Params().Uint32().Block(
		jen.Return(jen.Lit(def.CRCCode)),
	)
	total = append(total, f, jen.Line())

	// Ecncode() []byte
	calls := make([]jen.Code, 0)
	calls = append(calls,
		jen.Id("err").Op(":=").Qual("github.com/go-playground/validator", "New").Call().Dot("Struct").Call(jen.Id("e")),
		jen.Qual("github.com/xelaj/go-dry", "PanicIfErr").Call(jen.Id("err")),
		jen.Line(),
	)

	if atLeastOneFieldOptional {
		// string это fieldname
		sortedOptionalValues := make([][]*Param, maxFlagBit+1)
		for _, field := range def.Fields {
			if !field.IsOptional {
				continue
			}
			if sortedOptionalValues[field.BitToTrigger] == nil {
				sortedOptionalValues[field.BitToTrigger] = make([]*Param, 0)
			}

			sortedOptionalValues[field.BitToTrigger] = append(sortedOptionalValues[field.BitToTrigger], &Param{
				Name: field.Name,
				Type: field.Type,
			})
		}

		flagchecks := make([]jen.Code, len(sortedOptionalValues))
		for i, fields := range sortedOptionalValues {
			if len(fields) == 0 {
				continue
			}

			statements := jen.Null()
			for j, field := range fields {
				if j != 0 {
					statements.Add(jen.Op("||"))
				}
				//? zero.IsZeroVal(e.Fieldname)
				statements.Add(jen.Op("!").Qual("github.com/vikyd/zero", "IsZeroVal").Call(jen.Id("e." + strcase.ToCamel(field.Name))))
			} //?               if !zero.IsZeroVal(n) || !zer.IsZeroVal(m)...
			flagchecks[i] = jen.If(statements).Block(
				//? flag |= 1 << n
				jen.Id("flag").Op("|=").Lit(1).Op("<<").Lit(i),
			)
		}

		calls = append(calls, jen.Var().Id("flag").Uint32())
		calls = append(calls,
			flagchecks...,
		)

	}

	calls = append(calls,
		jen.Id("buf").Op(":=").Qual("github.com/xelaj/mtproto", "NewEncodeBuf").Call(jen.Lit(512)),
		jen.Id("buf.PutUint").Call(jen.Id("e.CRC").Call()),
	)

	calls = append(calls,
		putFuncs...,
	)

	calls = append(calls,
		jen.Return(jen.Id("buf.Result").Call()),
	)

	f = jen.Func().Params(jen.Id("e").Id("*" + interfaceName)).Id("Encode").Params().Index().Byte().Block(
		calls...,
	)
	total = append(total, f, jen.Line())

	calls = make([]jen.Code, 0)
	calls = append(calls,
		jen.Id("crc").Op(":=").Id("buf.PopUint").Call(),
		jen.If(jen.Id("crc").Op("!=").Id("e.CRC").Call()).Block(
			jen.Panic(jen.Lit("wrong type: ").Op("+").Qual("fmt", "Sprintf").Call(jen.Lit("%#v"), jen.Id("crc"))),
		),
	)

	for _, field := range def.Fields {
		name := strcase.ToCamel(field.Name)
		typ := field.Type

		var funcCall jen.Code
		listType := ""

		switch typ {
		case "true", "Bool":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopBool").Call()
			listType = "bool"
		case "long":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopLong").Call()
			listType = "int64"
		case "double":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopDouble").Call()
			listType = "float64"
		case "int":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopInt").Call()
			listType = "int32"
		case "string":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopString").Call()
			listType = "string"
		case "bytes":
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopMessage").Call()
			listType = "[]byte"
		case "bitflags":
			funcCall = jen.Id("flags").Op(":=").Id("buf.PopUint").Call()
			listType = "uint32"
		default:
			normalized := normalizeID(typ, false)

			generatedName, generatedType := previousDeclarations.Find(typ)
			switch generatedType {
			case typEnum:
				//? *((buf.PopObj()).(*SecureValueType))
				funcCall = jen.Id("e." + name).Op("=").Id("*").Call(jen.Id("buf.PopObj").Call().Assert(jen.Id("*" + normalized)))
			case typStruct:
				funcCall = jen.Id("e." + name).Op("=").Id("buf.PopObj").Call().Assert(jen.Id("*" + normalized))
				generatedName = "*" + generatedName
			case typInterface:
				//? SecureValueType(buf.PopObj())
				funcCall = jen.Id("e." + name).Op("=").Id(normalized).Call(jen.Id("buf.PopObj").Call())
			}
			if funcCall == nil {
				pp.Fprintln(os.Stderr, field)
				panic("пробовали обработать '" + field.Type + "'")
			}
		}

		if field.IsList {
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopVector").Call(jen.Qual("reflect", "TypeOf").Call(jen.Index().Id(listType).Values())).Assert(jen.Index().Id(listType))
		}

		if field.IsOptional {
			funcCall = jen.If(jen.Id("flags").Op("&").Lit(1).Op("<<").Lit(field.BitToTrigger).Op(">").Lit(0)).Block(
				funcCall,
			)
		}

		calls = append(calls,
			funcCall,
		)
	}

	// DecodeFrom(d *mtproto.Decoder)
	f = jen.Func().Params(jen.Id("e").Id("*" + interfaceName)).Id("DecodeFrom").Params(jen.Id("buf").Op("*").Qual("github.com/xelaj/mtproto", "Decoder")).Block(
		calls...,
	)
	total = append(total, f, jen.Line())

	return total
}

func GenerateEncoder(def *StructObject, generatedField string, data *FileStructure) jen.Code {
	var thisField *Param
	for _, p := range def.Fields {
		if normalizeID(p.Name, false) == generatedField {
			thisField = p
			break
		}
	}

	if thisField == nil {
		panic("field '" + generatedField + "' not found")
	}

	funcToCall := "" // PutThis который мы будем вызывать
	switch thisField.Type {
	case "true", "Bool":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopBool").Call()
		listType = "bool"
	case "long":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopLong").Call()
		listType = "int64"
	case "double":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopDouble").Call()
		listType = "float64"
	case "int":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopInt").Call()
		listType = "int32"
	case "string":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopString").Call()
		listType = "string"
	case "bytes":
		funcCall = jen.Id("e." + name).Op("=").Id("buf.PopMessage").Call()
		listType = "[]byte"
	case "bitflags":
		funcCall = jen.Id("flags").Op(":=").Id("buf.PopUint").Call()
		listType = "uint32"
	default:
		normalized := normalizeID(typ, false)

		generatedName, generatedType := previousDeclarations.Find(typ)
		switch generatedType {
		case typEnum:
			//? *((buf.PopObj()).(*SecureValueType))
			funcCall = jen.Id("e." + name).Op("=").Id("*").Call(jen.Id("buf.PopObj").Call().Assert(jen.Id("*" + normalized)))
		case typStruct:
			funcCall = jen.Id("e." + name).Op("=").Id("buf.PopObj").Call().Assert(jen.Id("*" + normalized))
			generatedName = "*" + generatedName
		case typInterface:
			//? SecureValueType(buf.PopObj())
			funcCall = jen.Id("e." + name).Op("=").Id(normalized).Call(jen.Id("buf.PopObj").Call())
		}
		if funcCall == nil {
			pp.Fprintln(os.Stderr, field)
			panic("пробовали обработать '" + field.Type + "'")
		}
	}
}
