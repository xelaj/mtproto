// Copyright (c) 2020-2021 KHS Films
//
// This file is a part of mtproto package.
// See https://github.com/xelaj/mtproto/blob/master/LICENSE for details

package ige

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var testAuthKey = []byte{
	0x2f, 0xdf, 0xc5, 0x42, 0xa0, 0x0c, 0x6b, 0x3f, 0xed, 0x76, 0xa6, 0x38, 0xb2, 0x9c, 0x9a, 0x77,
	0x51, 0x98, 0xac, 0xca, 0xa3, 0x14, 0x73, 0x36, 0x45, 0xa7, 0xe3, 0x44, 0x69, 0xc4, 0xe2, 0xcb,
	0x26, 0x4f, 0x8c, 0x0f, 0xe3, 0x23, 0xa2, 0x61, 0xf0, 0x09, 0xfc, 0xe2, 0xc3, 0xd3, 0x4c, 0x6e,
	0xd1, 0x64, 0xa5, 0x60, 0x9c, 0x35, 0xa5, 0x7d, 0x27, 0x93, 0xc0, 0x1f, 0x29, 0x65, 0x4f, 0xfe,
	0x56, 0x63, 0xf1, 0x10, 0x62, 0xf2, 0x8e, 0xef, 0x38, 0x22, 0x1d, 0x7e, 0xc8, 0x87, 0x24, 0x47,
	0x74, 0x05, 0x26, 0xe8, 0xf6, 0xf1, 0x56, 0x61, 0x8a, 0xc0, 0xa2, 0x20, 0x9a, 0x3d, 0x37, 0xe0,
	0xae, 0xdc, 0x90, 0x6d, 0xb2, 0x96, 0x7d, 0x5f, 0xd0, 0x6c, 0xbb, 0xea, 0x21, 0x05, 0x2b, 0xf0,
	0x73, 0x0e, 0x5b, 0x6f, 0xe3, 0x7d, 0xe1, 0x0a, 0x1d, 0x61, 0x8e, 0x1c, 0x28, 0xb0, 0x0c, 0xd0,
	0xaf, 0x8f, 0x2f, 0xff, 0x9b, 0x41, 0xfe, 0xfe, 0x2c, 0xa4, 0x4b, 0xaf, 0x07, 0xae, 0xa9, 0x83,
	0x70, 0x4c, 0xdb, 0x1a, 0xaa, 0xce, 0x3e, 0x67, 0x37, 0x4f, 0xe0, 0x97, 0x2e, 0x0d, 0x53, 0x40,
	0xf1, 0x76, 0x6b, 0x1f, 0xf4, 0x00, 0x50, 0xe2, 0xdb, 0xf0, 0x71, 0xdf, 0xba, 0x23, 0xf0, 0xb5,
	0xdc, 0x35, 0x52, 0xfe, 0xb8, 0xc6, 0x90, 0xd6, 0x6f, 0xfc, 0x1d, 0x60, 0xe9, 0xf8, 0xe4, 0x5b,
	0xde, 0x76, 0xca, 0x8a, 0xc7, 0x34, 0x8b, 0xa1, 0x04, 0x89, 0x11, 0xc6, 0x04, 0x33, 0xfe, 0x8d,
	0xcd, 0xf4, 0x67, 0x68, 0xa7, 0x64, 0x3c, 0x01, 0x2b, 0xba, 0xd5, 0x1f, 0x43, 0x4c, 0x7d, 0xd4,
	0x63, 0x15, 0xd1, 0xbd, 0xc9, 0x2e, 0x7d, 0xb9, 0x66, 0x13, 0x74, 0x15, 0xb4, 0x7d, 0x7d, 0x2f,
	0x37, 0xcb, 0xf3, 0x27, 0x7c, 0xbd, 0xc7, 0xd4, 0x74, 0x7e, 0x8f, 0x32, 0xf8, 0x2b, 0x2e, 0x57,
}

func TestCipher_isCorrectData(t *testing.T) {
	tests := []struct {
		name    string
		data    []byte
		wantErr assert.ErrorAssertionFunc
	}{
		{
			name:    "good_one",
			data:    Hexed("0000000000000000000000000000000000000000000000000000000000000000"),
			wantErr: assert.NoError,
		},
		{
			name:    "smaller_than_want",
			data:    Hexed("0000"),
			wantErr: assert.Error,
		},
		{
			name:    "not_divisible_by_blocks",
			data:    Hexed("0000000000000000000000000000000000000000000000000000000000"),
			wantErr: assert.Error,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			wantErr := tt.wantErr
			if wantErr == nil {
				wantErr = assert.NoError
			}
			err := isCorrectData(tt.data)
			wantErr(t, err)
		})
	}
}

func Test_aesKeys(t *testing.T) {
	msgKey := []byte{
		0x2b, 0xbe, 0x1e, 0xa0, 0xaa, 0x58, 0xdd, 0x4c, 0x37, 0x68, 0x23, 0x72, 0xe7, 0x51, 0xfd, 0xf7,
	}

	tests := []struct {
		name    string
		decode  bool
		key, iv [32]byte
	}{
		{"Encode", false, [32]byte{
			0x56, 0xdc, 0x47, 0xab, 0x93, 0x94, 0x71, 0xf7, 0xa1, 0x20, 0xb3, 0x00, 0x4b, 0xc6, 0x01, 0xa8,
			0x2a, 0x3b, 0x16, 0xe9, 0x2e, 0x62, 0x7d, 0x56, 0x1a, 0xdf, 0x23, 0xee, 0xae, 0xe5, 0x0b, 0x72,
		}, [32]byte{
			0x8d, 0xb5, 0xd5, 0x3d, 0x4b, 0x87, 0xc1, 0x8b, 0xf9, 0xf9, 0x9a, 0x5d, 0xfa, 0x38, 0x7a, 0xf9,
			0x9c, 0xa7, 0x34, 0xcc, 0x03, 0x16, 0x93, 0x41, 0xf3, 0xfa, 0xc4, 0xbf, 0x78, 0x25, 0x84, 0x75,
		}},
		{"Decode", true, [32]byte{
			0x60, 0xc7, 0xb2, 0x42, 0x4d, 0xa7, 0x98, 0x55, 0x5d, 0xea, 0x3b, 0xdc, 0xbf, 0x9b, 0x10, 0x61,
			0x4d, 0xaf, 0x05, 0x0b, 0xb1, 0x9b, 0x73, 0x7b, 0xc2, 0x09, 0xc9, 0x01, 0x87, 0x2a, 0x0e, 0xee,
		}, [32]byte{
			0x49, 0xdb, 0x6d, 0x4f, 0xa0, 0x05, 0x5b, 0x9c, 0xe8, 0x05, 0x90, 0xfd, 0x54, 0x9a, 0x7a, 0x17,
			0xf5, 0xe6, 0x64, 0xaa, 0xe6, 0xa7, 0x8e, 0xd9, 0xfd, 0x13, 0xa0, 0x2a, 0x55, 0x11, 0x2c, 0xc2,
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := assert.New(t)

			key, iv := aesKeys(msgKey, testAuthKey, tt.decode)
			a.Equal(tt.key, key)
			a.Equal(tt.iv, iv)
		})
	}
}
